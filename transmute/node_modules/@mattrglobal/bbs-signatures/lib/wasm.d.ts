/* tslint:disable */
/* eslint-disable */
/**
* @param {any} request
* @returns {any}
*/
export function sign(request: any): any;
/**
* @param {any} request
* @returns {any}
*/
export function verify(request: any): any;
/**
* @param {any} request
* @returns {any}
*/
export function blindSignCommitment(request: any): any;
/**
* @param {any} request
* @returns {any}
*/
export function verifyBlind(request: any): any;
/**
* @param {any} request
* @returns {any}
*/
export function blindSign(request: any): any;
/**
* @param {any} request
* @returns {any}
*/
export function unBlind(request: any): any;
/**
* @param {any} request
* @returns {any}
*/
export function createProof(request: any): any;
/**
* @param {any} request
* @returns {any}
*/
export function verifyProof(request: any): any;
/**
* Generate a BLS 12-381 key pair.
*
* * seed: UIntArray with 32 element
*
* returned vector is the concatenation of first the private key (32 bytes)
* followed by the public key (96) bytes.
* @param {Uint8Array | undefined} seed
* @returns {any}
*/
export function generateBls12381G2KeyPair(seed?: Uint8Array): any;
/**
* Generate a BLS 12-381 key pair.
*
* * seed: UIntArray with 32 element
*
* returned vector is the concatenation of first the private key (32 bytes)
* followed by the public key (48) bytes.
* @param {Uint8Array | undefined} seed
* @returns {any}
*/
export function generateBls12381G1KeyPair(seed?: Uint8Array): any;
/**
* Get the BBS public key associated with the private key
* @param {any} request
* @returns {any}
*/
export function bls12381toBbs(request: any): any;
/**
* Signs a set of messages with a BLS 12-381 key pair and produces a BBS signature
* @param {any} request
* @returns {any}
*/
export function blsSign(request: any): any;
/**
* Verifies a BBS+ signature for a set of messages with a with a BLS 12-381 public key
* @param {any} request
* @returns {any}
*/
export function blsVerify(request: any): any;
/**
* Creates a BBS+ PoK
* @param {any} request
* @returns {any}
*/
export function blsCreateProof(request: any): any;
/**
* Verify a BBS+ PoK
* @param {any} request
* @returns {any}
*/
export function blsVerifyProof(request: any): any;
/**
* Indicates the status returned from `PoKOfSignatureProof`
*/
export enum PoKOfSignatureProofStatus {
/**
* The proof verified
*/
  Success,
/**
* The proof failed because the signature proof of knowledge failed
*/
  BadSignature,
/**
* The proof failed because a hidden message was invalid when the proof was created
*/
  BadHiddenMessage,
/**
* The proof failed because a revealed message was invalid
*/
  BadRevealedMessage,
}
