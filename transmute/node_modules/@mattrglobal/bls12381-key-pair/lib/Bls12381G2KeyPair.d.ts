import { JsonWebKey, KeyPairOptions, KeyPairSigner, KeyPairVerifier, GenerateKeyPairOptions, JwkKeyPairOptions } from "./types";
/**
 * A BLS 12-381 based key pair
 */
export declare class Bls12381G2KeyPair {
    /**
     * The key id
     */
    readonly id?: string;
    /**
     * The key controller
     */
    readonly controller?: string;
    /**
     * Buffer containing the raw bytes of the private key
     */
    readonly privateKeyBuffer?: Uint8Array;
    /**
     * Buffer containing the raw bytes of the public key
     */
    readonly publicKeyBuffer: Uint8Array;
    /**
     * Type identifier for the key pair
     */
    readonly type: string;
    /**
     * Default constructor.
     */
    constructor(options: KeyPairOptions);
    /**
     * Generates a BLS 12-381 key pair
     * @param options [Optional] options for the key pair generation
     *
     * @returns A BLS 12-381 key pair
     */
    static generate(options?: GenerateKeyPairOptions): Promise<Bls12381G2KeyPair>;
    /**
     * Constructs a BLS 12-381 key pair from options
     * @param options [Optional] options for key pair
     *
     * @returns A BLS 12-381 key pair
     */
    static from(options: KeyPairOptions): Promise<Bls12381G2KeyPair>;
    /**
     * Constructs a BLS 12-381 key pair from options
     * @param options [Optional] options for key pair
     *
     * @returns A BLS 12-381 G2 key pair
     */
    static fromJwk(options: JwkKeyPairOptions): Promise<Bls12381G2KeyPair>;
    /**
     * Constructs a BLS 12-381 key pair from a public key fingerprint
     * @param fingerprint [Optional] public key fingerprint
     *
     * TODO this interface needs to be refactored, there should be no
     * hard coded notion of DIDs at this layer
     *
     * @returns A BLS 12-381 key pair
     */
    static fromFingerprint({ id, controller, fingerprint }: any): Bls12381G2KeyPair;
    /**
     * Returns a signer object for use with jsonld-signatures.
     *
     * @returns {{sign: Function}} A signer for the json-ld block.
     */
    signer(): KeyPairSigner;
    /**
     * Returns a verifier object for use with jsonld-signatures.
     *
     * @returns {{verify: Function}} Used to verify jsonld-signatures.
     */
    verifier(): KeyPairVerifier;
    /**
     * Returns the base58 encoded public key.
     *
     * @returns The base58 encoded public key.
     */
    get publicKey(): string;
    /**
     * Returns the JWK structured public key.
     *
     * @returns The JWK public key.
     */
    get publicKeyJwk(): JsonWebKey;
    /**
     * Returns the base58 encoded private key.
     *
     * @returns The base58 encoded private key.
     */
    get privateKey(): string | undefined;
    /**
     * Returns the JWK formatted private key.
     *
     * @returns The JWK formatted private key.
     */
    get privateKeyJwk(): JsonWebKey | undefined;
    /**
     * Adds a public key base to a public key node.
     *
     * @param publicKeyNode - The public key node.
     * @param publicKeyNode.publicKeyBase58 - Base58 public key.
     *
     * @returns A PublicKeyNode in a block.
     */
    addEncodedPublicKey(publicKeyNode: any): any;
    /**
     * Generates and returns a public key fingerprint.
     *
     * @param publicKeyBase58 - The base58 encoded public key material.
     *
     * @returns The fingerprint.
     */
    static fingerprintFromPublicKey({ publicKeyBase58 }: any): string;
    /**
     * Generates and returns a public key fingerprint.
     *
     * @returns The fingerprint.
     */
    fingerprint(): string;
    /**
     * Verifies whether the fingerprint was generated from a given key pair.
     *
     * @param fingerprint - A Base58 public key.
     *
     * @returns An object indicating valid is true or false.
     */
    verifyFingerprint(fingerprint: string): any;
}
