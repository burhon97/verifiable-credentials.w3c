/**
 * Package aes implements AES block cipher.
 */
import { BlockCipher } from "@stablelib/blockcipher";
/**
 * AES block cipher.
 *
 * WARNING: This implementation uses lookup tables, so it's susceptible to cache-timing
 * side-channel attacks. (A constant-time version we tried was super slow: a few
 * kilobytes per second)
 *
 * Key size: 16, 24 or 32 bytes, block size: 16 bytes.
 */
export declare class AES implements BlockCipher {
    readonly blockSize = 16;
    private _keyLen;
    private _encKey;
    private _decKey;
    /**
     * Constructs AES with the given 16, 24 or 32-byte key
     * for AES-128, AES-192, or AES-256.
     *
     * If noDecryption is true, decryption key will not expanded,
     * saving time and memory for cipher modes when decryption
     * is not used (such as AES-CTR).
     */
    constructor(key: Uint8Array, noDecryption?: boolean);
    /**
     * Re-initializes this instance with a new key.
     *
     * This is helpful to avoid allocations.
     */
    setKey(key: Uint8Array, noDecryption?: boolean): this;
    /**
     * Erases expanded keys from memory.
     */
    clean(): this;
    /**
     * Encrypt 16-byte block src into 16-byte block dst.
     *
     * Source and destination may point to the same byte array.
     *
     * This function should not be used to encrypt data without any
     * cipher mode! It should only be used to implement a cipher mode.
     */
    encryptBlock(src: Uint8Array, dst: Uint8Array): this;
    /**
     * Decrypt 16-byte block src into 16-byte block dst.
     *
     * Source and destination may point to the same byte array.
     *
     * This function should not be used to encrypt data without any
     * cipher mode! It should only be used to implement a cipher mode.
     */
    decryptBlock(src: Uint8Array, dst: Uint8Array): this;
}
