import { instantiateRustWasm, sha256Base64Bytes, } from '../bin/bin';
import { base64ToBin } from '../format/format';
/**
 * The most performant way to instantiate sha256 functionality. To avoid
 * using Node.js or DOM-specific APIs, you can use `instantiateSha256`.
 *
 * @param webassemblyBytes - A buffer containing the sha256 binary.
 */
export const instantiateSha256Bytes = async (webassemblyBytes) => {
    const wasm = await instantiateRustWasm(webassemblyBytes, './sha256', 'sha256', 'sha256_init', 'sha256_update', 'sha256_final');
    return {
        final: wasm.final,
        hash: wasm.hash,
        init: wasm.init,
        update: wasm.update,
    };
};
export const getEmbeddedSha256Binary = () => base64ToBin(sha256Base64Bytes).buffer;
const cachedSha256 = {};
/**
 * An ultimately-portable (but possibly slower) version of
 * `instantiateSha256Bytes` which does not require the consumer to provide the
 * sha256 binary buffer.
 */
export const instantiateSha256 = async () => {
    if (cachedSha256.cache !== undefined) {
        return cachedSha256.cache;
    }
    const result = instantiateSha256Bytes(getEmbeddedSha256Binary());
    // eslint-disable-next-line functional/immutable-data, functional/no-expression-statement
    cachedSha256.cache = result;
    return result;
};
//# sourceMappingURL=sha256.js.map