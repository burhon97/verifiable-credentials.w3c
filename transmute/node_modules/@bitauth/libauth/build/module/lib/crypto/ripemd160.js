import { instantiateRustWasm, ripemd160Base64Bytes, } from '../bin/bin';
import { base64ToBin } from '../format/format';
/**
 * The most performant way to instantiate ripemd160 functionality. To avoid
 * using Node.js or DOM-specific APIs, you can use `instantiateRipemd160`.
 *
 * @param webassemblyBytes - A buffer containing the ripemd160 binary.
 */
export const instantiateRipemd160Bytes = async (webassemblyBytes) => {
    const wasm = await instantiateRustWasm(webassemblyBytes, './ripemd160', 'ripemd160', 'ripemd160_init', 'ripemd160_update', 'ripemd160_final');
    return {
        final: wasm.final,
        hash: wasm.hash,
        init: wasm.init,
        update: wasm.update,
    };
};
export const getEmbeddedRipemd160Binary = () => base64ToBin(ripemd160Base64Bytes).buffer;
const cachedRipemd160 = {};
/**
 * An ultimately-portable (but slower) version of `instantiateRipemd160Bytes`
 * which does not require the consumer to provide the ripemd160 binary buffer.
 */
export const instantiateRipemd160 = async () => {
    if (cachedRipemd160.cache !== undefined) {
        return cachedRipemd160.cache;
    }
    const result = instantiateRipemd160Bytes(getEmbeddedRipemd160Binary());
    // eslint-disable-next-line functional/immutable-data, functional/no-expression-statement
    cachedRipemd160.cache = result;
    return result;
};
//# sourceMappingURL=ripemd160.js.map