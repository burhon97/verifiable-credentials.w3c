import { instantiateRustWasm, sha512Base64Bytes, } from '../bin/bin';
import { base64ToBin } from '../format/format';
/**
 * The most performant way to instantiate sha512 functionality. To avoid
 * using Node.js or DOM-specific APIs, you can use `instantiateSha512`.
 *
 * @param webassemblyBytes - A buffer containing the sha512 binary.
 */
export const instantiateSha512Bytes = async (webassemblyBytes) => {
    const wasm = await instantiateRustWasm(webassemblyBytes, './sha512', 'sha512', 'sha512_init', 'sha512_update', 'sha512_final');
    return {
        final: wasm.final,
        hash: wasm.hash,
        init: wasm.init,
        update: wasm.update,
    };
};
export const getEmbeddedSha512Binary = () => base64ToBin(sha512Base64Bytes).buffer;
const cachedSha512 = {};
/**
 * An ultimately-portable (but slower) version of `instantiateSha512Bytes`
 * which does not require the consumer to provide the sha512 binary buffer.
 */
export const instantiateSha512 = async () => {
    if (cachedSha512.cache !== undefined) {
        return cachedSha512.cache;
    }
    const result = instantiateSha512Bytes(getEmbeddedSha512Binary());
    // eslint-disable-next-line functional/immutable-data, functional/no-expression-statement
    cachedSha512.cache = result;
    return result;
};
//# sourceMappingURL=sha512.js.map