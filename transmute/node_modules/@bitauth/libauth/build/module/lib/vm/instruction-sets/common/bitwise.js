import { combineOperations, pushToStack, useTwoStackItems, } from './combinators';
import { opVerify } from './flow-control';
import { OpcodesCommon } from './opcodes';
import { booleanToScriptNumber } from './types';
const areEqual = (a, b) => {
    if (a.length !== b.length) {
        return false;
    }
    // eslint-disable-next-line functional/no-let, functional/no-loop-statement, no-plusplus
    for (let i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) {
            return false;
        }
    }
    return true;
};
export const opEqual = () => (state) => useTwoStackItems(state, (nextState, [element1, element2]) => pushToStack(nextState, booleanToScriptNumber(areEqual(element1, element2))));
export const opEqualVerify = () => combineOperations(opEqual(), opVerify());
export const bitwiseOperations = () => ({
    [OpcodesCommon.OP_EQUAL]: opEqual(),
    [OpcodesCommon.OP_EQUALVERIFY]: opEqualVerify(),
});
//# sourceMappingURL=bitwise.js.map