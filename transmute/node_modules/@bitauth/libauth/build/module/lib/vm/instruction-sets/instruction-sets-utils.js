import { binToHex, flattenBinArray, numberToBinUint16LE, numberToBinUint32LE, } from '../../format/format';
import { createCompilerCommonSynchronous } from '../../template/compiler';
import { OpcodesBCH } from './bch/bch';
import { OpcodesBTC } from './btc/btc';
/**
 * A type-guard which checks if the provided instruction is malformed.
 * @param instruction - the instruction to check
 */
export const authenticationInstructionIsMalformed = (instruction) => 'malformed' in instruction;
/**
 * A type-guard which checks if the final instruction in the provided array of
 * instructions is malformed. (Only the final instruction can be malformed.)
 * @param instruction - the array of instructions to check
 */
export const authenticationInstructionsAreMalformed = (instructions) => instructions.length > 0 &&
    authenticationInstructionIsMalformed(instructions[instructions.length - 1]);
/**
 * A type-guard which confirms that the final instruction in the provided array
 * is not malformed. (Only the final instruction can be malformed.)
 * @param instruction - the array of instructions to check
 */
export const authenticationInstructionsAreNotMalformed = (instructions) => !authenticationInstructionsAreMalformed(instructions);
var CommonPushOpcodes;
(function (CommonPushOpcodes) {
    CommonPushOpcodes[CommonPushOpcodes["OP_0"] = 0] = "OP_0";
    CommonPushOpcodes[CommonPushOpcodes["OP_PUSHDATA_1"] = 76] = "OP_PUSHDATA_1";
    CommonPushOpcodes[CommonPushOpcodes["OP_PUSHDATA_2"] = 77] = "OP_PUSHDATA_2";
    CommonPushOpcodes[CommonPushOpcodes["OP_PUSHDATA_4"] = 78] = "OP_PUSHDATA_4";
})(CommonPushOpcodes || (CommonPushOpcodes = {}));
const uint8Bytes = 1;
const uint16Bytes = 2;
const uint32Bytes = 4;
const readLittleEndianNumber = (script, index, length) => {
    const view = new DataView(script.buffer, index, length);
    const readAsLittleEndian = true;
    return length === uint8Bytes
        ? view.getUint8(0)
        : length === uint16Bytes
            ? view.getUint16(0, readAsLittleEndian)
            : view.getUint32(0, readAsLittleEndian);
};
/**
 * Returns the number of bytes used to indicate the length of the push in this
 * operation.
 * @param opcode - an opcode between 0x00 and 0x4e
 */
export const lengthBytesForPushOpcode = (opcode) => opcode < CommonPushOpcodes.OP_PUSHDATA_1
    ? 0
    : opcode === CommonPushOpcodes.OP_PUSHDATA_1
        ? uint8Bytes
        : opcode === CommonPushOpcodes.OP_PUSHDATA_2
            ? uint16Bytes
            : uint32Bytes;
/**
 * Parse one instruction from the provided script.
 *
 * Returns an object with an `instruction` referencing a
 * `ParsedAuthenticationInstruction`, and a `nextIndex` indicating the next
 * index from which to read. If the next index is greater than or equal to the
 * length of the script, the script has been fully parsed.
 *
 * The final `ParsedAuthenticationInstruction` from a serialized script may be
 * malformed if 1) the final operation is a push and 2) too few bytes remain for
 * the push operation to complete.
 *
 * @param script - the script from which to read the next instruction
 * @param index - the offset from which to begin reading
 */
// eslint-disable-next-line complexity
export const readAuthenticationInstruction = (script, index) => {
    const opcode = script[index];
    if (opcode > CommonPushOpcodes.OP_PUSHDATA_4) {
        return {
            instruction: {
                opcode: opcode,
            },
            nextIndex: index + 1,
        };
    }
    const lengthBytes = lengthBytesForPushOpcode(opcode);
    if (lengthBytes !== 0 && index + lengthBytes >= script.length) {
        const sliceStart = index + 1;
        const sliceEnd = sliceStart + lengthBytes;
        return {
            instruction: {
                expectedLengthBytes: lengthBytes,
                length: script.slice(sliceStart, sliceEnd),
                malformed: true,
                opcode: opcode,
            },
            nextIndex: sliceEnd,
        };
    }
    const dataBytes = lengthBytes === 0
        ? opcode
        : readLittleEndianNumber(script, index + 1, lengthBytes);
    const dataStart = index + 1 + lengthBytes;
    const dataEnd = dataStart + dataBytes;
    return {
        instruction: {
            data: script.slice(dataStart, dataEnd),
            ...(dataEnd > script.length
                ? {
                    expectedDataBytes: dataEnd - dataStart,
                    malformed: true,
                }
                : undefined),
            opcode: opcode,
        },
        nextIndex: dataEnd,
    };
};
/**
 * Parse authentication bytecode (`lockingBytecode` or `unlockingBytecode`)
 * into `ParsedAuthenticationInstructions`. The method
 * `authenticationInstructionsAreMalformed` can be used to check if these
 * instructions include a malformed instruction. If not, they are valid
 * `AuthenticationInstructions`.
 *
 * This implementation is common to most bitcoin forks, but the type parameter
 * can be used to strongly type the resulting instructions. For example:
 *
 * ```js
 *  const instructions = parseAuthenticationBytecode<OpcodesBCH>(script);
 * ```
 *
 * @param script - the serialized script to parse
 */
export const parseBytecode = (script) => {
    const instructions = [];
    // eslint-disable-next-line functional/no-let
    let i = 0;
    // eslint-disable-next-line functional/no-loop-statement
    while (i < script.length) {
        const { instruction, nextIndex } = readAuthenticationInstruction(script, i);
        // eslint-disable-next-line functional/no-expression-statement
        i = nextIndex;
        // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
        instructions.push(instruction);
    }
    return instructions;
};
/**
 * OP_0 is the only single-word push. All other push instructions will
 * disassemble to multiple ASM words. (OP_1-OP_16 are handled like normal
 * operations.)
 */
const isMultiWordPush = (opcode) => opcode !== CommonPushOpcodes.OP_0;
const formatAsmPushHex = (data) => data.length > 0 ? `0x${binToHex(data)}` : '';
const formatMissingBytesAsm = (missing) => `[missing ${missing} byte${missing === 1 ? '' : 's'}]`;
const hasMalformedLength = (instruction) => 'length' in instruction;
const isPushData = (pushOpcode) => pushOpcode >= CommonPushOpcodes.OP_PUSHDATA_1;
/**
 * Disassemble a malformed authentication instruction into a string description.
 * @param opcodes - a mapping of possible opcodes to their string representation
 * @param instruction - the malformed instruction to disassemble
 */
export const disassembleParsedAuthenticationInstructionMalformed = (opcodes, instruction) => `${opcodes[instruction.opcode]} ${hasMalformedLength(instruction)
    ? `${formatAsmPushHex(instruction.length)}${formatMissingBytesAsm(instruction.expectedLengthBytes - instruction.length.length)}`
    : `${isPushData(instruction.opcode)
        ? `${instruction.expectedDataBytes} `
        : ''}${formatAsmPushHex(instruction.data)}${formatMissingBytesAsm(instruction.expectedDataBytes - instruction.data.length)}`}`;
/**
 * Disassemble a properly-formed authentication instruction into a string
 * description.
 * @param opcodes - a mapping of possible opcodes to their string representation
 * @param instruction - the instruction to disassemble
 */
export const disassembleAuthenticationInstruction = (opcodes, instruction) => `${opcodes[instruction.opcode]}${'data' in instruction &&
    isMultiWordPush(instruction.opcode)
    ? ` ${isPushData(instruction.opcode)
        ? `${instruction.data.length} `
        : ''}${formatAsmPushHex(instruction.data)}`
    : ''}`;
/**
 * Disassemble a single `ParsedAuthenticationInstruction` (includes potentially
 * malformed instructions) into its ASM representation.
 *
 * @param script - the instruction to disassemble
 */
export const disassembleParsedAuthenticationInstruction = (opcodes, instruction) => authenticationInstructionIsMalformed(instruction)
    ? disassembleParsedAuthenticationInstructionMalformed(opcodes, instruction)
    : disassembleAuthenticationInstruction(opcodes, instruction);
/**
 * Disassemble an array of `ParsedAuthenticationInstructions` (including
 * potentially malformed instructions) into its ASM representation.
 *
 * @param script - the array of instructions to disassemble
 */
export const disassembleParsedAuthenticationInstructions = (opcodes, instructions) => instructions
    .map((instruction) => disassembleParsedAuthenticationInstruction(opcodes, instruction))
    .join(' ');
/**
 * Disassemble authentication bytecode into a lossless ASM representation. (All
 * push operations are represented with the same opcodes used in the bytecode,
 * even when non-minimally encoded.)
 *
 * @param opcodes - the set to use when determining the name of opcodes, e.g. `OpcodesBCH`
 * @param bytecode - the authentication bytecode to disassemble
 */
export const disassembleBytecode = (opcodes, bytecode) => disassembleParsedAuthenticationInstructions(opcodes, parseBytecode(bytecode));
/**
 * Disassemble BCH authentication bytecode into its ASM representation.
 * @param bytecode - the authentication bytecode to disassemble
 */
export const disassembleBytecodeBCH = (bytecode) => disassembleParsedAuthenticationInstructions(OpcodesBCH, parseBytecode(bytecode));
/**
 * Disassemble BTC authentication bytecode into its ASM representation.
 * @param bytecode - the authentication bytecode to disassemble
 */
export const disassembleBytecodeBTC = (bytecode) => disassembleParsedAuthenticationInstructions(OpcodesBTC, parseBytecode(bytecode));
/**
 * Create an object where each key is an opcode identifier and each value is
 * the bytecode value (`Uint8Array`) it represents.
 * @param opcodes - An opcode enum, e.g. `OpcodesBCH`
 */
export const generateBytecodeMap = (opcodes) => Object.entries(opcodes)
    .filter((entry) => typeof entry[1] === 'number')
    .reduce((identifiers, pair) => ({
    ...identifiers,
    [pair[0]]: Uint8Array.of(pair[1]),
}), {});
/**
 * Re-assemble a string of disassembled bytecode (see `disassembleBytecode`).
 *
 * @param opcodes - a mapping of opcodes to their respective Uint8Array
 * representation
 * @param disassembledBytecode - the disassembled bytecode to re-assemble
 */
export const assembleBytecode = (opcodes, disassembledBytecode) => {
    const environment = {
        opcodes,
        scripts: { asm: disassembledBytecode },
    };
    return createCompilerCommonSynchronous(environment).generateBytecode('asm', {});
};
/**
 * Re-assemble a string of disassembled BCH bytecode (see
 * `disassembleBytecodeBCH`).
 *
 * Note, this method performs automatic minimization of push instructions.
 *
 * @param disassembledBytecode - the disassembled BCH bytecode to re-assemble
 */
export const assembleBytecodeBCH = (disassembledBytecode) => assembleBytecode(generateBytecodeMap(OpcodesBCH), disassembledBytecode);
/**
 * Re-assemble a string of disassembled BCH bytecode (see
 * `disassembleBytecodeBTC`).
 *
 * Note, this method performs automatic minimization of push instructions.
 *
 * @param disassembledBytecode - the disassembled BTC bytecode to re-assemble
 */
export const assembleBytecodeBTC = (disassembledBytecode) => assembleBytecode(generateBytecodeMap(OpcodesBTC), disassembledBytecode);
const getInstructionLengthBytes = (instruction) => {
    const opcode = instruction.opcode;
    const expectedLength = lengthBytesForPushOpcode(opcode);
    return expectedLength === uint8Bytes
        ? Uint8Array.of(instruction.data.length)
        : expectedLength === uint16Bytes
            ? numberToBinUint16LE(instruction.data.length)
            : numberToBinUint32LE(instruction.data.length);
};
/**
 * Re-serialize a valid authentication instruction.
 * @param instruction - the instruction to serialize
 */
export const serializeAuthenticationInstruction = (instruction) => Uint8Array.from([
    instruction.opcode,
    ...('data' in instruction
        ? [
            ...(isPushData(instruction.opcode)
                ? getInstructionLengthBytes(instruction)
                : []),
            ...instruction.data,
        ]
        : []),
]);
/**
 * Re-serialize a malformed authentication instruction.
 * @param instruction - the malformed instruction to serialize
 */
export const serializeParsedAuthenticationInstructionMalformed = (instruction) => {
    const opcode = instruction.opcode;
    if (hasMalformedLength(instruction)) {
        return Uint8Array.from([opcode, ...instruction.length]);
    }
    if (isPushData(opcode)) {
        return Uint8Array.from([
            opcode,
            ...(opcode === CommonPushOpcodes.OP_PUSHDATA_1
                ? Uint8Array.of(instruction.expectedDataBytes)
                : opcode === CommonPushOpcodes.OP_PUSHDATA_2
                    ? numberToBinUint16LE(instruction.expectedDataBytes)
                    : numberToBinUint32LE(instruction.expectedDataBytes)),
            ...instruction.data,
        ]);
    }
    return Uint8Array.from([opcode, ...instruction.data]);
};
/**
 * Re-serialize a potentially-malformed authentication instruction.
 * @param instruction - the potentially-malformed instruction to serialize
 */
export const serializeParsedAuthenticationInstruction = (instruction) => authenticationInstructionIsMalformed(instruction)
    ? serializeParsedAuthenticationInstructionMalformed(instruction)
    : serializeAuthenticationInstruction(instruction);
/**
 * Re-serialize an array of valid authentication instructions.
 * @param instructions - the array of valid instructions to serialize
 */
export const serializeAuthenticationInstructions = (instructions) => flattenBinArray(instructions.map(serializeAuthenticationInstruction));
/**
 * Re-serialize an array of potentially-malformed authentication instructions.
 * @param instructions - the array of instructions to serialize
 */
export const serializeParsedAuthenticationInstructions = (instructions) => flattenBinArray(instructions.map(serializeParsedAuthenticationInstruction));
//# sourceMappingURL=instruction-sets-utils.js.map