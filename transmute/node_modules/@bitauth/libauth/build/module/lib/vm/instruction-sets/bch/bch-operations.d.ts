import { Secp256k1, Sha256 } from '../../../crypto/crypto';
import { AuthenticationProgramStateCommon, AuthenticationProgramStateError, AuthenticationProgramStateSignatureAnalysis, AuthenticationProgramStateStack } from '../../vm-types';
import { AuthenticationErrorCommon } from '../common/errors';
import { AuthenticationErrorBCH } from './bch-errors';
import { OpcodesBCH } from './bch-opcodes';
export declare const opCat: <State extends AuthenticationProgramStateStack<Uint8Array> & AuthenticationProgramStateError<AuthenticationErrorBCH, AuthenticationErrorCommon>>() => (state: State) => State;
export declare const opSplit: <State extends AuthenticationProgramStateStack<Uint8Array> & AuthenticationProgramStateError<AuthenticationErrorBCH, AuthenticationErrorCommon>>({ requireMinimalEncoding, }: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const padMinimallyEncodedScriptNumber: (scriptNumber: Uint8Array, length: number) => Uint8Array;
export declare const opNum2Bin: <State extends AuthenticationProgramStateStack<Uint8Array> & AuthenticationProgramStateError<AuthenticationErrorBCH, AuthenticationErrorCommon>>() => (state: State) => State;
export declare const opBin2Num: <State extends AuthenticationProgramStateStack<Uint8Array> & AuthenticationProgramStateError<AuthenticationErrorBCH, AuthenticationErrorCommon>>() => (state: State) => State;
export declare const bitwiseOperation: <State extends AuthenticationProgramStateStack<Uint8Array> & AuthenticationProgramStateError<AuthenticationErrorBCH, AuthenticationErrorCommon>>(combine: (a: Uint8Array, b: Uint8Array) => Uint8Array) => (state: State) => State;
export declare const opAnd: <State extends AuthenticationProgramStateStack<Uint8Array> & AuthenticationProgramStateError<AuthenticationErrorBCH, AuthenticationErrorCommon>>() => (state: State) => State;
export declare const opOr: <State extends AuthenticationProgramStateStack<Uint8Array> & AuthenticationProgramStateError<AuthenticationErrorBCH, AuthenticationErrorCommon>>() => (state: State) => State;
export declare const opXor: <State extends AuthenticationProgramStateStack<Uint8Array> & AuthenticationProgramStateError<AuthenticationErrorBCH, AuthenticationErrorCommon>>() => (state: State) => State;
export declare const opDiv: <State extends AuthenticationProgramStateStack<Uint8Array> & AuthenticationProgramStateError<AuthenticationErrorBCH, AuthenticationErrorCommon>>({ requireMinimalEncoding, }: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opMod: <State extends AuthenticationProgramStateStack<Uint8Array> & AuthenticationProgramStateError<AuthenticationErrorBCH, AuthenticationErrorCommon>>({ requireMinimalEncoding, }: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
/**
 * Validate the encoding of a raw signature â€“ a signature without a signing
 * serialization type byte (A.K.A. "sighash" byte).
 *
 * @param signature - the raw signature
 */
export declare const isValidSignatureEncodingBCHRaw: (signature: Uint8Array) => boolean;
export declare const opCheckDataSig: <State extends AuthenticationProgramStateStack<Uint8Array> & AuthenticationProgramStateError<Errors, AuthenticationErrorCommon> & AuthenticationProgramStateSignatureAnalysis, Errors>({ secp256k1, sha256, }: {
    sha256: {
        hash: Sha256['hash'];
    };
    secp256k1: {
        verifySignatureSchnorr: Secp256k1['verifySignatureSchnorr'];
        verifySignatureDERLowS: Secp256k1['verifySignatureDERLowS'];
    };
}) => (state: State) => State;
export declare const opCheckDataSigVerify: <State extends AuthenticationProgramStateStack<Uint8Array> & AuthenticationProgramStateError<Errors, AuthenticationErrorCommon> & AuthenticationProgramStateSignatureAnalysis, Errors>({ secp256k1, sha256, }: {
    sha256: {
        hash: Sha256['hash'];
    };
    secp256k1: {
        verifySignatureSchnorr: Secp256k1['verifySignatureSchnorr'];
        verifySignatureDERLowS: Secp256k1['verifySignatureDERLowS'];
    };
}) => (state: State) => State;
export declare const opReverseBytes: <State extends AuthenticationProgramStateStack<Uint8Array>>() => (state: State) => State;
export declare const bitcoinCashOperations: <Opcodes, State extends AuthenticationProgramStateCommon<Opcodes, AuthenticationErrorBCH>>({ flags, secp256k1, sha256, }: {
    sha256: {
        hash: Sha256['hash'];
    };
    secp256k1: {
        verifySignatureSchnorr: Secp256k1['verifySignatureSchnorr'];
        verifySignatureDERLowS: Secp256k1['verifySignatureDERLowS'];
    };
    flags: {
        opReverseBytes: boolean;
        requireBugValueZero: boolean;
        requireMinimalEncoding: boolean;
        requireNullSignatureFailures: boolean;
    };
}) => {
    126: (state: State) => State;
    127: (state: State) => State;
    128: (state: State) => State;
    129: (state: State) => State;
    132: (state: State) => State;
    133: (state: State) => State;
    134: (state: State) => State;
    150: (state: State) => State;
    151: (state: State) => State;
    186: (state: State) => State;
    187: (state: State) => State;
} | {
    188: (state: State) => State;
    126: (state: State) => State;
    127: (state: State) => State;
    128: (state: State) => State;
    129: (state: State) => State;
    132: (state: State) => State;
    133: (state: State) => State;
    134: (state: State) => State;
    150: (state: State) => State;
    151: (state: State) => State;
    186: (state: State) => State;
    187: (state: State) => State;
};
//# sourceMappingURL=bch-operations.d.ts.map