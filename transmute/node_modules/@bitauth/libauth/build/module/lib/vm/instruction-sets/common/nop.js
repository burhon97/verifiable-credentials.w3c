import { applyError, AuthenticationErrorCommon } from './errors';
import { OpcodesCommon } from './opcodes';
export const opNop = (flags) => (state) => flags.disallowUpgradableNops
    ? applyError(AuthenticationErrorCommon.calledUpgradableNop, state)
    : state;
export const nonOperations = (flags) => ({
    [OpcodesCommon.OP_NOP]: opNop(flags),
    [OpcodesCommon.OP_NOP1]: opNop(flags),
    [OpcodesCommon.OP_NOP4]: opNop(flags),
    [OpcodesCommon.OP_NOP5]: opNop(flags),
    [OpcodesCommon.OP_NOP6]: opNop(flags),
    [OpcodesCommon.OP_NOP7]: opNop(flags),
    [OpcodesCommon.OP_NOP8]: opNop(flags),
    [OpcodesCommon.OP_NOP9]: opNop(flags),
    [OpcodesCommon.OP_NOP10]: opNop(flags),
});
/**
 * "Disabled" operations are explicitly forbidden from occurring anywhere in a
 * script, even within an unexecuted branch.
 */
export const disabledOperation = () => (state) => applyError(AuthenticationErrorCommon.unknownOpcode, state);
export const disabledOperations = () => ({
    [OpcodesCommon.OP_CAT]: disabledOperation(),
    [OpcodesCommon.OP_SUBSTR]: disabledOperation(),
    [OpcodesCommon.OP_LEFT]: disabledOperation(),
    [OpcodesCommon.OP_RIGHT]: disabledOperation(),
    [OpcodesCommon.OP_INVERT]: disabledOperation(),
    [OpcodesCommon.OP_AND]: disabledOperation(),
    [OpcodesCommon.OP_OR]: disabledOperation(),
    [OpcodesCommon.OP_XOR]: disabledOperation(),
    [OpcodesCommon.OP_2MUL]: disabledOperation(),
    [OpcodesCommon.OP_2DIV]: disabledOperation(),
    [OpcodesCommon.OP_MUL]: disabledOperation(),
    [OpcodesCommon.OP_DIV]: disabledOperation(),
    [OpcodesCommon.OP_MOD]: disabledOperation(),
    [OpcodesCommon.OP_LSHIFT]: disabledOperation(),
    [OpcodesCommon.OP_RSHIFT]: disabledOperation(),
});
//# sourceMappingURL=nop.js.map