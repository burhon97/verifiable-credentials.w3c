import { Sha256 } from '../../crypto/crypto';
import { TransactionContextCommon } from '../../transaction/transaction-types';
import { AuthenticationProgramStateBCH } from '../../vm/instruction-sets/instruction-sets';
import { AnyCompilationEnvironment, CompilationData, CompilationEnvironment, CompilerOperationResult } from '../compiler-types';
import { AuthenticationTemplate } from '../template-types';
export declare type CompilerOperationsKeyBCH = 'data_signature' | 'public_key' | 'schnorr_data_signature' | 'schnorr_signature' | 'signature';
export declare enum SigningSerializationAlgorithmIdentifier {
    /**
     * A.K.A. `SIGHASH_ALL`
     */
    allOutputs = "all_outputs",
    /**
     * A.K.A. `SIGHASH_ALL|ANYONE_CAN_PAY`
     */
    allOutputsSingleInput = "all_outputs_single_input",
    /**
     * A.K.A. `SIGHASH_SINGLE`
     */
    correspondingOutput = "corresponding_output",
    /**
     * A.K.A. `SIGHASH_SINGLE|ANYONE_CAN_PAY`
     */
    correspondingOutputSingleInput = "corresponding_output_single_input",
    /**
     * A.K.A `SIGHASH_NONE`
     */
    noOutputs = "no_outputs",
    /**
     * A.K.A `SIGHASH_NONE|ANYONE_CAN_PAY`
     */
    noOutputsSingleInput = "no_outputs_single_input"
}
export declare const compilerOperationHelperComputeSignatureBCH: ({ coveredBytecode, identifier, transactionContext, operationName, privateKey, sha256, sign, }: {
    coveredBytecode: Uint8Array;
    identifier: string;
    privateKey: Uint8Array;
    transactionContext: TransactionContextCommon;
    operationName: string;
    sign: (privateKey: Uint8Array, messageHash: Uint8Array) => Uint8Array;
    sha256: {
        hash: Sha256['hash'];
    };
}) => CompilerOperationResult;
export declare const compilerOperationHelperHdKeySignatureBCH: ({ operationName, secp256k1Method, }: {
    operationName: string;
    secp256k1Method: keyof NonNullable<CompilationEnvironment['secp256k1']>;
}) => import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
export declare const compilerOperationHdKeyEcdsaSignatureBCH: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
export declare const compilerOperationHdKeySchnorrSignatureBCH: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
export declare const compilerOperationHelperKeySignatureBCH: ({ operationName, secp256k1Method, }: {
    operationName: string;
    secp256k1Method: keyof NonNullable<CompilationEnvironment['secp256k1']>;
}) => import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
export declare const compilerOperationKeyEcdsaSignatureBCH: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
export declare const compilerOperationKeySchnorrSignatureBCH: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
export declare const compilerOperationHelperComputeDataSignatureBCH: <Data extends CompilationData<TransactionContextCommon>, Environment extends AnyCompilationEnvironment<TransactionContextCommon>>({ data, environment, identifier, operationName, privateKey, sha256, sign, }: {
    data: Data;
    environment: Environment;
    identifier: string;
    privateKey: Uint8Array;
    operationName: string;
    sign: (privateKey: Uint8Array, messageHash: Uint8Array) => Uint8Array;
    sha256: {
        hash: Sha256['hash'];
    };
}) => CompilerOperationResult;
export declare const compilerOperationHelperKeyDataSignatureBCH: ({ operationName, secp256k1Method, }: {
    operationName: string;
    secp256k1Method: keyof NonNullable<CompilationEnvironment['secp256k1']>;
}) => import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
export declare const compilerOperationKeyEcdsaDataSignatureBCH: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
export declare const compilerOperationKeySchnorrDataSignatureBCH: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
export declare const compilerOperationHelperHdKeyDataSignatureBCH: ({ operationName, secp256k1Method, }: {
    operationName: string;
    secp256k1Method: keyof NonNullable<CompilationEnvironment['secp256k1']>;
}) => import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
export declare const compilerOperationHdKeyEcdsaDataSignatureBCH: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
export declare const compilerOperationHdKeySchnorrDataSignatureBCH: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
export declare const compilerOperationSigningSerializationFullBCH: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
export declare const compilerOperationsBCH: {
    hdKey: {
        data_signature: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
        public_key: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
        schnorr_data_signature: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
        schnorr_signature: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
        signature: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
    };
    key: {
        data_signature: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
        public_key: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
        schnorr_data_signature: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
        schnorr_signature: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
        signature: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
    };
    signingSerialization: {
        full_all_outputs: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
        full_all_outputs_single_input: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
        full_corresponding_output: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
        full_corresponding_output_single_input: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
        full_no_outputs: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
        full_no_outputs_single_input: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
        corresponding_output: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
        corresponding_output_hash: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
        covered_bytecode: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
        covered_bytecode_length: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
        locktime: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
        outpoint_index: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
        outpoint_transaction_hash: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
        output_value: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
        sequence_number: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
        transaction_outpoints: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
        transaction_outpoints_hash: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
        transaction_outputs: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
        transaction_outputs_hash: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
        transaction_sequence_numbers: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
        transaction_sequence_numbers_hash: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
        version: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
    };
    addressData: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
    currentBlockHeight: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
    currentBlockTime: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
    walletData: import("../compiler-types").CompilerOperation<TransactionContextCommon, false, CompilationData<TransactionContextCommon>, CompilationEnvironment<TransactionContextCommon, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>>;
};
export declare type TransactionContextBCH = TransactionContextCommon;
export declare type CompilationEnvironmentBCH = CompilationEnvironment<TransactionContextBCH, CompilerOperationsKeyBCH>;
/**
 * Create a compiler using the default BCH environment.
 *
 * Internally instantiates the necessary crypto and VM implementations – use
 * `createCompiler` for more control.
 *
 * @param scriptsAndOverrides - a compilation environment from which properties
 * will be used to override properties of the default BCH environment – must
 * include the `scripts` property
 */
export declare const createCompilerBCH: <TransactionContext extends TransactionContextCommon, Environment extends AnyCompilationEnvironment<TransactionContext>, ProgramState extends AuthenticationProgramStateBCH>(scriptsAndOverrides: Environment) => Promise<import("../compiler-types").Compiler<TransactionContext, Environment, ProgramState>>;
/**
 * Create a BCH `Compiler` from an `AuthenticationTemplate` and an optional set
 * of overrides.
 * @param template - the `AuthenticationTemplate` from which to create the BCH
 * compiler
 * @param overrides - a compilation environment from which properties will be
 * used to override properties of the default BCH environment
 */
export declare const authenticationTemplateToCompilerBCH: <TransactionContext extends TransactionContextCommon, Environment extends AnyCompilationEnvironment<TransactionContext>, ProgramState extends AuthenticationProgramStateBCH>(template: AuthenticationTemplate, overrides?: CompilationEnvironment<TransactionContext, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false> | undefined) => Promise<import("../compiler-types").Compiler<TransactionContext, Environment, ProgramState>>;
//# sourceMappingURL=compiler-bch.d.ts.map