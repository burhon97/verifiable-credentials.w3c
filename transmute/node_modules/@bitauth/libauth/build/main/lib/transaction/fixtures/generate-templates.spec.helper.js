"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable no-console, functional/no-expression-statement */
const log_1 = require("../../format/log");
const template_1 = require("../../template/template");
const template_1_of_8_tree_spec_helper_1 = require("./template.1-of-8-tree.spec.helper");
const template_2_of_2_recoverable_spec_helper_1 = require("./template.2-of-2-recoverable.spec.helper");
const template_2_of_3_spec_helper_1 = require("./template.2-of-3.spec.helper");
const template_cash_channels_spec_helper_1 = require("./template.cash-channels.spec.helper");
const template_sig_of_sig_spec_helper_1 = require("./template.sig-of-sig.spec.helper");
// eslint-disable-next-line complexity
const printTemplate = (template) => {
    switch (template) {
        case 'p2pkh':
            console.log(log_1.stringify(template_1.authenticationTemplateP2pkh));
            return;
        case '2-of-3':
            console.log(log_1.stringify(template_2_of_3_spec_helper_1.twoOfThree));
            return;
        case '2-of-2-recoverable':
            console.log(log_1.stringify(template_2_of_2_recoverable_spec_helper_1.twoOfTwoRecoverable));
            return;
        case '1-of-8-tree':
            console.log(log_1.stringify(template_1_of_8_tree_spec_helper_1.oneOfEightTreeSig));
            return;
        case 'sig-of-sig':
            console.log(log_1.stringify(template_sig_of_sig_spec_helper_1.sigOfSig));
            return;
        case 'cash-channels':
            console.log(log_1.stringify(template_cash_channels_spec_helper_1.cashChannels));
            return;
        // eslint-disable-next-line functional/no-conditional-statement
        default:
            console.error('unknown template');
            process.exit(1);
    }
};
const [, , arg] = process.argv;
printTemplate(arg);
//# sourceMappingURL=generate-templates.spec.helper.js.map