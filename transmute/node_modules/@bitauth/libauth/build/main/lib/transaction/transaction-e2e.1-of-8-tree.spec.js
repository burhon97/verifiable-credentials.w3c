"use strict";
/* eslint-disable functional/no-expression-statement, camelcase, @typescript-eslint/naming-convention */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = __importDefault(require("ava"));
const lib_1 = require("../lib");
const transaction_e2e_spec_helper_1 = require("./transaction-e2e.spec.helper");
ava_1.default('transaction e2e tests: 1-of-8 Tree Signature (fails)', async (t) => {
    const template = lib_1.validateAuthenticationTemplate(transaction_e2e_spec_helper_1.oneOfEightTreeJson);
    if (typeof template === 'string') {
        t.fail(lib_1.stringify(template));
        return;
    }
    /**
     * The HD public keys shared between the entities at wallet creation time
     */
    const hdPublicKeys = {
        signer_1: transaction_e2e_spec_helper_1.hdPublicKey0H,
        signer_2: transaction_e2e_spec_helper_1.hdPublicKey1H,
        signer_3: transaction_e2e_spec_helper_1.hdPublicKey2H,
        signer_4: transaction_e2e_spec_helper_1.hdPublicKey3H,
        signer_5: transaction_e2e_spec_helper_1.hdPublicKey4H,
        signer_6: transaction_e2e_spec_helper_1.hdPublicKey5H,
        signer_7: transaction_e2e_spec_helper_1.hdPublicKey6H,
        signer_8: transaction_e2e_spec_helper_1.hdPublicKey7H,
    };
    const lockingData = {
        hdKeys: { addressIndex: 0, hdPublicKeys },
    };
    const lockingScript = 'lock';
    const compiler = await lib_1.authenticationTemplateToCompilerBCH(template);
    const lockingBytecode = compiler.generateBytecode(lockingScript, lockingData);
    t.false(lockingBytecode.success, lib_1.stringify(lockingBytecode));
});
//# sourceMappingURL=transaction-e2e.1-of-8-tree.spec.js.map