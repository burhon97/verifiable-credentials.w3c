"use strict";
/* eslint-disable functional/no-expression-statement */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = __importDefault(require("ava"));
const lib_1 = require("../lib");
const transaction_e2e_spec_helper_1 = require("./transaction-e2e.spec.helper");
ava_1.default('transaction e2e tests: P2PKH (authenticationTemplateP2pkhHd)', async (t) => {
    const template = lib_1.validateAuthenticationTemplate(transaction_e2e_spec_helper_1.p2pkhJson);
    if (typeof template === 'string') {
        t.fail(template);
        return;
    }
    const lockingScript = 'lock';
    /**
     * Available to observer
     */
    const lockingData = {
        hdKeys: { addressIndex: 0, hdPublicKeys: { owner: transaction_e2e_spec_helper_1.hdPublicKey } },
    };
    /**
     * Only available to owner
     */
    const unlockingData = {
        hdKeys: { addressIndex: 0, hdPrivateKeys: { owner: transaction_e2e_spec_helper_1.hdPrivateKey } },
    };
    const compiler = await lib_1.authenticationTemplateToCompilerBCH(template);
    const lockingBytecode = compiler.generateBytecode(lockingScript, lockingData);
    if (!lockingBytecode.success) {
        t.log(lockingBytecode.errors);
        t.fail();
        return;
    }
    t.deepEqual(lib_1.lockingBytecodeToCashAddress(lockingBytecode.bytecode, lib_1.CashAddressNetworkPrefix.testnet), 'bchtest:qq2azmyyv6dtgczexyalqar70q036yund53jvfde0x');
    const utxoOutpointTransactionHash = lib_1.hexToBin('68127de83d2ab77d7f5fd8d2ac6181d94473c0cbb2d0776084bf28884f6ecd77');
    const satoshis = 1000000;
    const result = lib_1.generateTransaction({
        inputs: [
            {
                outpointIndex: 1,
                outpointTransactionHash: utxoOutpointTransactionHash,
                sequenceNumber: 0,
                unlockingBytecode: {
                    compiler,
                    data: unlockingData,
                    satoshis: lib_1.bigIntToBinUint64LE(BigInt(satoshis)),
                    script: 'unlock',
                },
            },
        ],
        locktime: 0,
        outputs: [
            {
                lockingBytecode: lib_1.hexToBin('6a0b68656c6c6f20776f726c64'),
                satoshis: lib_1.bigIntToBinUint64LE(BigInt(0)),
            },
        ],
        version: 2,
    });
    if (!result.success) {
        t.log(result.errors);
        t.fail();
        return;
    }
    t.deepEqual(result, {
        success: true,
        transaction: lib_1.decodeTransaction(lib_1.hexToBin('020000000177cd6e4f8828bf846077d0b2cbc07344d98161acd2d85f7f7db72a3de87d1268010000006441f87a1dc0fb4a30443fdfcc678e713d99cffb963bd52b497377e81abe2cc2b5ac6e9837fab0a23f4d05fd06b80e7673a68bfa8d2f66b7ec5537e88696d7bae1b841210376ea9e36a75d2ecf9c93a0be76885e36f822529db22acfdc761c9b5b4544f5c5000000000100000000000000000d6a0b68656c6c6f20776f726c6400000000')),
    });
});
//# sourceMappingURL=transaction-e2e.p2pkh.spec.js.map