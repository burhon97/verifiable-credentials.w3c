"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeBase58Address = exports.decodeBase58AddressFormat = exports.Base58AddressError = exports.encodeBase58Address = exports.encodeBase58AddressFormat = exports.Base58AddressFormatVersion = void 0;
const format_1 = require("../format/format");
/**
 * Base58 version byte values for common Base58Address format versions.
 */
var Base58AddressFormatVersion;
(function (Base58AddressFormatVersion) {
    /**
     * A Pay to Public Key Hash (P2PKH) address – base58 encodes to a leading `1`.
     *
     * Hex: `0x00`
     */
    Base58AddressFormatVersion[Base58AddressFormatVersion["p2pkh"] = 0] = "p2pkh";
    /**
     * A Pay to Script Hash (P2SH) address – base58 encodes to a leading `3`.
     *
     * Hex: `0x05`
     */
    Base58AddressFormatVersion[Base58AddressFormatVersion["p2sh"] = 5] = "p2sh";
    /**
     * A private key in Wallet Import Format. For private keys used with
     * uncompressed public keys, the payload is 32 bytes and causes the version
     * to be encoded as a `5`. For private keys used with compressed public keys,
     * a final `0x01` byte is appended to the private key, increasing the payload
     * to 33 bytes, and causing the version to be encoded as a `K` or `L`.
     *
     * Hex: `0x80`
     */
    Base58AddressFormatVersion[Base58AddressFormatVersion["wif"] = 128] = "wif";
    /**
     * A testnet Pay to Public Key Hash (P2PKH) address – base58 encodes to a
     * leading `m` or `n`.
     *
     * Hex: `0x6f`
     */
    Base58AddressFormatVersion[Base58AddressFormatVersion["p2pkhTestnet"] = 111] = "p2pkhTestnet";
    /**
     * A testnet Pay to Script Hash (P2SH) address – base58 encodes to a leading
     * `2`.
     *
     * Hex: `0xc4`
     */
    Base58AddressFormatVersion[Base58AddressFormatVersion["p2shTestnet"] = 196] = "p2shTestnet";
    /**
     * A private key in Wallet Import Format intended for testnet use. For private
     * keys used with uncompressed public keys, the payload is 32 bytes and causes
     * the version to be encoded as a `9`. For private keys used with compressed
     * public keys, a final `0x01` byte is appended to the private key, increasing
     * the payload to 33 bytes, and causing the version to be encoded as a `c`.
     *
     * Hex: `0xef`
     */
    Base58AddressFormatVersion[Base58AddressFormatVersion["wifTestnet"] = 239] = "wifTestnet";
    /**
     * A Pay to Public Key Hash (P2PKH) address intended for use on the Bitcoin
     * Cash network – base58 encodes to a leading `C`. This version was
     * temporarily used by the Copay project before the CashAddress format was
     * standardized.
     *
     * Hex: `0x1c`
     */
    Base58AddressFormatVersion[Base58AddressFormatVersion["p2pkhCopayBCH"] = 28] = "p2pkhCopayBCH";
    /**
     * A Pay to Script Hash (P2SH) address intended for use on the Bitcoin
     * Cash network – base58 encodes to a leading `H`. This version was
     * temporarily used by the Copay project before the CashAddress format was
     * standardized.
     *
     * Hex: `0x28`
     */
    Base58AddressFormatVersion[Base58AddressFormatVersion["p2shCopayBCH"] = 40] = "p2shCopayBCH";
})(Base58AddressFormatVersion = exports.Base58AddressFormatVersion || (exports.Base58AddressFormatVersion = {}));
/**
 * Encode a payload using the Base58Address format, the original address format
 * used by the Satoshi implementation.
 *
 * Note, this method does not enforce error handling via the type system. The
 * returned string will not be a valid Base58Address if `hash` is not exactly 20
 * bytes. If needed, validate the length of `hash` before calling this method.
 *
 * @remarks
 * A Base58Address includes a 1-byte prefix to indicate the address version, a
 * variable-length payload, and a 4-byte checksum:
 *
 * `[version: 1 byte] [payload: variable length] [checksum: 4 bytes]`
 *
 * The checksum is the first 4 bytes of the double-SHA256 hash of the version
 * byte followed by the payload.
 *
 * @param sha256 - an implementation of sha256 (a universal implementation is
 * available via `instantiateSha256`)
 * @param version - the address version byte (see `Base58Version`)
 * @param payload - the Uint8Array payload to encode
 */
exports.encodeBase58AddressFormat = (sha256, version, payload) => {
    const checksumBytes = 4;
    const content = Uint8Array.from([version, ...payload]);
    const checksum = sha256.hash(sha256.hash(content)).slice(0, checksumBytes);
    const bin = format_1.flattenBinArray([content, checksum]);
    return format_1.binToBase58(bin);
};
/**
 * Encode a hash as a Base58Address.
 *
 * Note, this method does not enforce error handling via the type system. The
 * returned string will not be a valid Base58Address if `hash` is not exactly 20
 * bytes. If needed, validate the length of `hash` before calling this method.
 *
 * For other standards which use the Base58Address format but have other version
 * or length requirements, use `encodeCashAddressFormat`.
 *
 * @param sha256 - an implementation of sha256 (a universal implementation is
 * available via `instantiateSha256`)
 * @param type - the type of address to encode: `p2pkh`, `p2sh`,
 * `p2pkh-testnet`, or `p2sh-testnet`
 * @param hash - the 20-byte hash to encode
 * (`RIPEMD160(SHA256(public key or bytecode))`)
 */
exports.encodeBase58Address = (sha256, type, payload) => exports.encodeBase58AddressFormat(sha256, {
    p2pkh: Base58AddressFormatVersion.p2pkh,
    'p2pkh-copay-bch': Base58AddressFormatVersion.p2pkhCopayBCH,
    'p2pkh-testnet': Base58AddressFormatVersion.p2pkhTestnet,
    p2sh: Base58AddressFormatVersion.p2sh,
    'p2sh-copay-bch': Base58AddressFormatVersion.p2shCopayBCH,
    'p2sh-testnet': Base58AddressFormatVersion.p2shTestnet,
}[type], payload);
var Base58AddressError;
(function (Base58AddressError) {
    Base58AddressError["unknownCharacter"] = "Base58Address error: address may only contain valid base58 characters.";
    Base58AddressError["tooShort"] = "Base58Address error: address is too short to be valid.";
    Base58AddressError["invalidChecksum"] = "Base58Address error: address has an invalid checksum.";
    Base58AddressError["unknownAddressVersion"] = "Base58Address error: address uses an unknown address version.";
    Base58AddressError["incorrectLength"] = "Base58Address error: the encoded payload is not the correct length (20 bytes).";
})(Base58AddressError = exports.Base58AddressError || (exports.Base58AddressError = {}));
/**
 * Attempt to decode a Base58Address-formatted string. This is more lenient than
 * `decodeCashAddress`, which also validates the address version.
 *
 * Returns the contents of the address or an error message as a string.
 *
 * @param sha256 - an implementation of sha256 (a universal implementation is
 * available via `instantiateSha256`)
 * @param address - the string to decode as a base58 address
 */
exports.decodeBase58AddressFormat = (sha256, address) => {
    const checksumBytes = 4;
    const bin = format_1.base58ToBin(address);
    if (bin === format_1.BaseConversionError.unknownCharacter) {
        return Base58AddressError.unknownCharacter;
    }
    const minimumBase58AddressLength = 5;
    if (bin.length < minimumBase58AddressLength) {
        return Base58AddressError.tooShort;
    }
    const content = bin.slice(0, -checksumBytes);
    const checksum = bin.slice(-checksumBytes);
    const expectedChecksum = sha256
        .hash(sha256.hash(content))
        .slice(0, checksumBytes);
    if (!checksum.every((value, i) => value === expectedChecksum[i])) {
        return Base58AddressError.invalidChecksum;
    }
    return {
        payload: content.slice(1),
        version: content[0],
    };
};
/**
 * Decode and validate a Base58Address, strictly checking the version and
 * payload length.
 *
 * For other address-like standards which closely follow the Base58Address
 * format (but have alternative version byte requirements), use
 * `decodeBase58AddressFormat`.
 *
 * @remarks
 * Because the Wallet Import Format (WIF) private key serialization format uses
 * the Base58Address format, some libraries allow WIF key decoding via the same
 * method as base58 address decoding. This method strictly accepts only
 * Base58Address types, but WIF keys can be decoded with `decodePrivateKeyWif`.
 *
 * @param sha256 - an implementation of sha256 (a universal implementation is
 * available via `instantiateSha256`)
 * @param address - the string to decode as a base58 address
 */
exports.decodeBase58Address = (sha256, address) => {
    const decoded = exports.decodeBase58AddressFormat(sha256, address);
    if (typeof decoded === 'string')
        return decoded;
    if (![
        Base58AddressFormatVersion.p2pkh,
        Base58AddressFormatVersion.p2sh,
        Base58AddressFormatVersion.p2pkhTestnet,
        Base58AddressFormatVersion.p2shTestnet,
        Base58AddressFormatVersion.p2pkhCopayBCH,
        Base58AddressFormatVersion.p2shCopayBCH,
    ].includes(decoded.version)) {
        return Base58AddressError.unknownAddressVersion;
    }
    const hash160Length = 20;
    if (decoded.payload.length !== hash160Length) {
        return Base58AddressError.incorrectLength;
    }
    return decoded;
};
//# sourceMappingURL=base58-address.js.map