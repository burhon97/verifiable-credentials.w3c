"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable functional/no-expression-statement, @typescript-eslint/no-magic-numbers */
const ava_1 = __importDefault(require("ava"));
const ava_fast_check_1 = require("ava-fast-check");
const lib_1 = require("../lib");
const base58Json = __importStar(require("./fixtures/base58_encode_decode.json"));
const base58Vectors = Object.values(base58Json).filter((item) => Array.isArray(item) && item.every((x) => typeof x === 'string'));
const base2 = lib_1.createBaseConverter('01');
const base2Vector = (t, string, bin) => {
    t.deepEqual(base2.decode(string), bin);
    t.deepEqual(base2.encode(bin), string);
};
// eslint-disable-next-line functional/immutable-data
base2Vector.title = (_, string) => `createBaseConverter – base2: ${string}`;
ava_1.default(base2Vector, '', Uint8Array.of());
ava_1.default(base2Vector, '0', Uint8Array.of(0));
ava_1.default(base2Vector, '00', Uint8Array.of(0, 0));
ava_1.default(base2Vector, '001', Uint8Array.of(0, 0, 1));
ava_1.default(base2Vector, '0010', Uint8Array.of(0, 0, 2));
ava_1.default(base2Vector, '001111', Uint8Array.of(0, 0, 15));
ava_1.default(base2Vector, '0011111111', Uint8Array.of(0, 0, 255));
ava_1.default(base2Vector, '111111111111', Uint8Array.of(15, 255));
ava_1.default(base2Vector, '11111111000000001111111100000000', Uint8Array.of(255, 0, 255, 0));
const base16 = lib_1.createBaseConverter('0123456789abcdef');
const base16Vector = (t, string, bin) => {
    t.deepEqual(base16.decode(string), bin);
    t.deepEqual(base16.encode(bin), string);
};
// eslint-disable-next-line functional/immutable-data
base16Vector.title = (_, string) => `createBaseConverter – base16: ${string}`;
ava_1.default(base16Vector, '', Uint8Array.of());
ava_1.default(base16Vector, '0', Uint8Array.of(0));
ava_1.default(base16Vector, '000f', Uint8Array.of(0, 0, 0, 15));
ava_1.default(base16Vector, '0fff', Uint8Array.of(0, 15, 255));
ava_1.default(base16Vector, 'ffff', Uint8Array.of(255, 255));
const base58Vector = (t, string, bin) => {
    t.deepEqual(lib_1.base58ToBin(string), bin);
    t.deepEqual(lib_1.binToBase58(bin), string);
};
// eslint-disable-next-line functional/immutable-data
base58Vector.title = (_, string) => `base58ToBin – binToBase58: ${string}`;
ava_1.default(base58Vector, '', Uint8Array.of());
ava_1.default(base58Vector, '1', Uint8Array.of(0));
ava_1.default(base58Vector, '1111', Uint8Array.of(0, 0, 0, 0));
ava_1.default(base58Vector, '2g', lib_1.utf8ToBin('a'));
ava_1.default(base58Vector, 'a3gV', lib_1.utf8ToBin('bbb'));
ava_1.default(base58Vector, 'aPEr', lib_1.utf8ToBin('ccc'));
ava_1.default(base58Vector, '1NS17iag9jJgTHD1VXjvLCEnZuQ3rJDE9L', lib_1.hexToBin('00eb15231dfceb60925886b67d065299925915aeb172c06647'));
ava_1.default('createBaseConverter: alphabet too long', (t) => {
    t.deepEqual(lib_1.createBaseConverter(lib_1.range(255)
        .map((i) => String.fromCharCode(i))
        .join('')), lib_1.BaseConversionError.tooLong);
});
ava_1.default('createBaseConverter: ambiguous character in alphabet', (t) => {
    t.deepEqual(lib_1.createBaseConverter('00'), lib_1.BaseConversionError.ambiguousCharacter);
});
ava_1.default('base58ToBin: unknown character', (t) => {
    t.deepEqual(lib_1.base58ToBin('#'), lib_1.BaseConversionError.unknownCharacter);
});
const maxUint8Number = 255;
const fcUint8Array = (minLength, maxLength) => ava_fast_check_1.fc
    .array(ava_fast_check_1.fc.integer(0, maxUint8Number), minLength, maxLength)
    .map((a) => Uint8Array.from(a));
ava_fast_check_1.testProp('[fast-check] base2.encode <-> base2.encode', [fcUint8Array(0, 100)], (t, input) => t.deepEqual(base2.encode(base2.decode(base2.encode(input))), base2.encode(input)));
ava_fast_check_1.testProp('[fast-check] base16.encode <-> base16.encode', [fcUint8Array(0, 100)], (t, input) => t.deepEqual(base16.encode(base16.decode(base16.encode(input))), base16.encode(input)));
const base26 = lib_1.createBaseConverter(
// cspell: disable-next-line
'abcdefghijklmnopqrstuvwxyz');
ava_fast_check_1.testProp('[fast-check] base26.encode <-> base26.encode', [fcUint8Array(0, 100)], (t, input) => t.deepEqual(base26.encode(base26.decode(base26.encode(input))), base26.encode(input)));
const base42 = lib_1.createBaseConverter('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghi');
ava_fast_check_1.testProp('[fast-check] base42.encode <-> base42.encode', [fcUint8Array(0, 100)], (t, input) => t.deepEqual(base42.encode(base42.decode(base42.encode(input))), base42.encode(input)));
ava_fast_check_1.testProp('[fast-check] binToBase58 <-> base58ToBin', [fcUint8Array(0, 100)], (t, input) => t.deepEqual(lib_1.binToBase58(lib_1.base58ToBin(lib_1.binToBase58(input))), lib_1.binToBase58(input)));
ava_1.default('base58 Test Vectors', (t) => {
    t.truthy(base58Vectors);
    // eslint-disable-next-line functional/no-loop-statement
    for (const [binHex, base58] of base58Vectors) {
        t.deepEqual(lib_1.base58ToBin(base58), lib_1.hexToBin(binHex));
        t.deepEqual(lib_1.binToBase58(lib_1.hexToBin(binHex)), base58);
    }
});
//# sourceMappingURL=base-convert.spec.js.map