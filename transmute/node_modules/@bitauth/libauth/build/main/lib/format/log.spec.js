"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable functional/no-expression-statement, @typescript-eslint/no-magic-numbers */
const ava_1 = __importDefault(require("ava"));
const lib_1 = require("../lib");
ava_1.default('stringify', (t) => {
    t.deepEqual(lib_1.stringify(BigInt(0)), '"<bigint: 0n>"');
    t.deepEqual(lib_1.stringify({ a: BigInt(0) }), '{\n  "a": "<bigint: 0n>"\n}');
    t.deepEqual(lib_1.stringify(Uint8Array.of(32, 32)), '"<Uint8Array: 0x2020>"');
    t.deepEqual(lib_1.stringify({ b: Uint8Array.of(32, 32) }), '{\n  "b": "<Uint8Array: 0x2020>"\n}');
    t.deepEqual(lib_1.stringify((x) => x * 2), '"<function: (x) => x * 2>"');
    t.deepEqual(lib_1.stringify({ c: (x) => x * 2 }), '{\n  "c": "<function: (x) => x * 2>"\n}');
    t.deepEqual(lib_1.stringify(Symbol('A')), '"<symbol: Symbol(A)>"');
    t.deepEqual(lib_1.stringify({ d: Symbol('A') }), '{\n  "d": "<symbol: Symbol(A)>"\n}');
});
ava_1.default('sortObjectKeys', (t) => {
    t.deepEqual(lib_1.sortObjectKeys(BigInt(0)), BigInt(0));
    t.deepEqual(lib_1.sortObjectKeys(Uint8Array.of(32, 32)), Uint8Array.of(32, 32));
    t.deepEqual(lib_1.sortObjectKeys(Object.assign({ b: Object.assign({ c: 1 }, { a: 2, b: null }) }, { a: Uint8Array.of(2), c: Uint8Array.of(3) })), { a: Uint8Array.of(2), b: { a: 2, b: null, c: 1 }, c: Uint8Array.of(3) });
    const func = (x) => x * 2;
    t.deepEqual(lib_1.sortObjectKeys(func), func);
    const sym = Symbol('A');
    t.deepEqual(lib_1.sortObjectKeys(sym), sym);
    t.deepEqual(lib_1.sortObjectKeys([
        3,
        2,
        Object.assign({ b: Uint8Array.of(1) }, { a: Uint8Array.of(2), c: Uint8Array.of(3) }),
        1,
    ]), [3, 2, { a: Uint8Array.of(2), b: Uint8Array.of(1), c: Uint8Array.of(3) }, 1]);
});
ava_1.default('stringifyTestVector', (t) => {
    const one = lib_1.stringifyTestVector(Object.assign({ b: [1, 2, Object.assign(Object.assign({ a: 1 }, { c: Uint8Array.of(2) }), { b: 3 })] }, { a: Object.assign(Object.assign({ a: 1 }, { c: BigInt(2) }), { b: 3 }) }));
    t.deepEqual(one, `{
  "a": {
    "a": 1,
    "b": 3,
    "c": BigInt('2')
  },
  "b": [
    1,
    2,
    {
      "a": 1,
      "b": 3,
      "c": hexToBin('02')
    }
  ]
}`, one);
});
//# sourceMappingURL=log.spec.js.map