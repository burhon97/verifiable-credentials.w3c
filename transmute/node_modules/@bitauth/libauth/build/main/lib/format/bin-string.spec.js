"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable functional/no-expression-statement, @typescript-eslint/no-magic-numbers */
const ava_1 = __importDefault(require("ava"));
const ava_fast_check_1 = require("ava-fast-check");
const lib_1 = require("../lib");
const maxUint8Number = 255;
const fcUint8Array = (minLength, maxLength) => ava_fast_check_1.fc
    .array(ava_fast_check_1.fc.integer(0, maxUint8Number), minLength, maxLength)
    .map((a) => Uint8Array.from(a));
ava_1.default('isBinString', (t) => {
    t.deepEqual(lib_1.isBinString('0'), false);
    t.deepEqual(lib_1.isBinString('01'), false);
    t.deepEqual(lib_1.isBinString('00000000'), true);
    t.deepEqual(lib_1.isBinString('0000000 '), false);
    t.deepEqual(lib_1.isBinString('00000001'), true);
    t.deepEqual(lib_1.isBinString('00000002'), false);
    t.deepEqual(lib_1.isBinString('0000000100000001'), true);
    t.deepEqual(lib_1.isBinString('000000010000000100000001'), true);
});
ava_1.default('binStringToBin', (t) => {
    t.deepEqual(lib_1.binStringToBin('0010101001100100'), Uint8Array.from([42, 100]));
});
ava_1.default('binToBinString', (t) => {
    t.deepEqual(lib_1.binToBinString(Uint8Array.from([42, 100])), '0010101001100100');
});
ava_fast_check_1.testProp('[fast-check] binStringToBin <-> binToBinString', [fcUint8Array(0, 100)], (t, input) => t.deepEqual(lib_1.binToBinString(lib_1.binStringToBin(lib_1.binToBinString(input))), lib_1.binToBinString(input)));
//# sourceMappingURL=bin-string.spec.js.map