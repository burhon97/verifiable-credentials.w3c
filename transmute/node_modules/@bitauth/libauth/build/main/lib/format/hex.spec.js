"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable functional/no-expression-statement, @typescript-eslint/no-magic-numbers */
const ava_1 = __importDefault(require("ava"));
const ava_fast_check_1 = require("ava-fast-check");
const lib_1 = require("../lib");
const maxUint8Number = 255;
const fcUint8Array = (minLength, maxLength) => ava_fast_check_1.fc
    .array(ava_fast_check_1.fc.integer(0, maxUint8Number), minLength, maxLength)
    .map((a) => Uint8Array.from(a));
ava_1.default('range', (t) => {
    t.deepEqual(lib_1.range(3), [0, 1, 2]);
    t.deepEqual(lib_1.range(3, 1), [1, 2, 3]);
});
ava_1.default('splitEvery', (t) => {
    t.deepEqual(lib_1.splitEvery('abcd', 2), ['ab', 'cd']);
    t.deepEqual(lib_1.splitEvery('abcde', 2), ['ab', 'cd', 'e']);
});
ava_1.default('isHex', (t) => {
    t.deepEqual(lib_1.isHex('0001022a646566ff'), true);
    t.deepEqual(lib_1.isHex('0001022A646566Ff'), true);
    t.deepEqual(lib_1.isHex('0001022A646566FF'), true);
    t.deepEqual(lib_1.isHex('0001022A646566F'), false);
    t.deepEqual(lib_1.isHex('0001022A646566FG'), false);
});
ava_1.default('hexToBin', (t) => {
    t.deepEqual(lib_1.hexToBin('0001022a646566ff'), Uint8Array.from([0, 1, 2, 42, 100, 101, 102, 255]));
    t.deepEqual(lib_1.hexToBin('0001022A646566FF'), Uint8Array.from([0, 1, 2, 42, 100, 101, 102, 255]));
});
ava_1.default('binToHex', (t) => {
    t.deepEqual(lib_1.binToHex(Uint8Array.from([0, 1, 2, 42, 100, 101, 102, 255])), '0001022a646566ff');
});
ava_fast_check_1.testProp('[fast-check] hexToBin <-> binToHex', [fcUint8Array(0, 100)], (t, input) => t.deepEqual(lib_1.binToHex(lib_1.hexToBin(lib_1.binToHex(input))), lib_1.binToHex(input)));
ava_1.default('swapEndianness', (t) => {
    t.deepEqual(lib_1.swapEndianness('0001022a646566ff'), 'ff6665642a020100');
});
//# sourceMappingURL=hex.spec.js.map