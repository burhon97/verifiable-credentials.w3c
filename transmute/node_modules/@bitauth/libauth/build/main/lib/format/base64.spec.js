"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable functional/no-expression-statement, @typescript-eslint/no-magic-numbers */
const ava_1 = __importDefault(require("ava"));
const lib_1 = require("../lib");
ava_1.default('isBase64', (t) => {
    t.deepEqual(lib_1.isBase64('YWJj'), true);
    t.deepEqual(lib_1.isBase64('YWJjZA=='), true);
    t.deepEqual(lib_1.isBase64('YWJ&'), false);
    t.deepEqual(lib_1.isBase64('YWJ'), false);
    t.deepEqual(lib_1.isBase64('YW'), false);
    t.deepEqual(lib_1.isBase64('Y'), false);
});
ava_1.default('base64ToBin works as expected', (t) => {
    const abc = new Uint8Array([97, 98, 99]);
    const abcd = new Uint8Array([97, 98, 99, 100]);
    const abcde = new Uint8Array([97, 98, 99, 100, 101]);
    t.deepEqual(lib_1.base64ToBin('YWJj'), abc);
    t.deepEqual(lib_1.base64ToBin('YWJjZA=='), abcd);
    t.deepEqual(lib_1.base64ToBin('YWJjZGU='), abcde);
});
ava_1.default('binToBase64 works as expected', (t) => {
    const abc = 'YWJj';
    const abcd = 'YWJjZA==';
    const abcde = 'YWJjZGU=';
    t.deepEqual(lib_1.binToBase64(Uint8Array.from([97, 98, 99])), abc);
    t.deepEqual(lib_1.binToBase64(Uint8Array.from([97, 98, 99, 100])), abcd);
    t.deepEqual(lib_1.binToBase64(Uint8Array.from([97, 98, 99, 100, 101])), abcde);
});
//# sourceMappingURL=base64.spec.js.map