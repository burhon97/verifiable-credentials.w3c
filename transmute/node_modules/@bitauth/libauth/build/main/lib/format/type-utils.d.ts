declare type ImmutablePrimitive = undefined | null | boolean | string | number | Function;
declare type ImmutableArray<T> = readonly Immutable<T>[];
declare type ImmutableMap<K, V> = ReadonlyMap<Immutable<K>, Immutable<V>>;
declare type ImmutableSet<T> = ReadonlySet<Immutable<T>>;
declare type ImmutableObject<T> = {
    readonly [K in keyof T]: Immutable<T[K]>;
};
declare type ImmutableUint8Array = Readonly<ArrayLike<number>> & Iterable<number> & ImmutableObject<Uint8Array>;
/**
 * A deep-readonly utility type. Can be removed when a built-in alternative is
 * added to TypeScript. Derived from:
 * https://github.com/microsoft/TypeScript/issues/13923#issuecomment-557509399
 */
export declare type Immutable<T> = T extends ImmutablePrimitive ? T : T extends (infer U)[] ? ImmutableArray<U> : T extends Map<infer K, infer V> ? ImmutableMap<K, V> : T extends Set<infer M> ? ImmutableSet<M> : T extends Uint8Array ? ImmutableUint8Array : ImmutableObject<T>;
export {};
//# sourceMappingURL=type-utils.d.ts.map