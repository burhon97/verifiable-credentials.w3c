"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.benchmarkHashingFunction = void 0;
/* global Buffer */
/* eslint-disable functional/no-let, @typescript-eslint/init-declarations, functional/no-expression-statement, functional/no-conditional-statement */
const crypto_1 = require("crypto");
const asmCrypto = __importStar(require("asmcrypto.js"));
const ava_1 = __importDefault(require("ava"));
const bcrypto = __importStar(require("bcrypto"));
const chuhai_1 = __importDefault(require("chuhai"));
const hashJs = __importStar(require("hash.js"));
exports.benchmarkHashingFunction = (hashFunctionName, hashFunctionPromise, nodeJsAlgorithm) => {
    const singlePassNodeBenchmark = (inputLength) => {
        const bcryptoAlgorithm = nodeJsAlgorithm.toUpperCase();
        ava_1.default(`node: ${hashFunctionName}: hash a ${inputLength}-byte input`, async (t) => {
            const hashFunction = await hashFunctionPromise;
            await chuhai_1.default(t.title, (s) => {
                let message;
                let hash;
                /*
                 * we let Node.js use the message as a Node.js buffer
                 * (may slightly overestimate Node.js native performance)
                 */
                let nodeJsBuffer;
                const nextCycle = () => {
                    message = crypto_1.randomBytes(inputLength);
                    nodeJsBuffer = Buffer.from(message);
                };
                nextCycle();
                s.bench('libauth', () => {
                    hash = hashFunction.hash(message);
                });
                s.bench('hash.js', () => {
                    hash = hashJs[nodeJsAlgorithm]().update(message).digest();
                });
                s.bench('bcoin', () => {
                    hash = bcrypto[bcryptoAlgorithm].digest(Buffer.from(message));
                });
                s.bench('node.js native', () => {
                    hash = crypto_1.createHash(nodeJsAlgorithm).update(nodeJsBuffer).digest();
                });
                if (nodeJsAlgorithm !== 'ripemd160') {
                    // eslint-disable-next-line @typescript-eslint/naming-convention
                    const Algorithm = nodeJsAlgorithm === 'sha1'
                        ? asmCrypto.Sha1
                        : nodeJsAlgorithm === 'sha256'
                            ? asmCrypto.Sha256
                            : asmCrypto.Sha512;
                    s.bench('asmcrypto.js', () => {
                        const instance = new Algorithm();
                        hash = instance.process(message).finish().result;
                    });
                }
                s.cycle(() => {
                    if (hash === null) {
                        t.fail(`asmcrypto.js failed to produce a hash for message: ${message.toString()}`);
                    }
                    else {
                        t.deepEqual(new Uint8Array(hash), hashFunction.hash(message));
                        nextCycle();
                    }
                });
            });
        });
    };
    const mb = 1000000;
    const incrementalNodeBenchmark = (totalInput, chunkSize) => {
        ava_1.default(`node: ${hashFunctionName}: incrementally hash a ${totalInput / mb}MB input in ${chunkSize / mb}MB chunks`, async (t) => {
            const hashFunction = await hashFunctionPromise;
            await chuhai_1.default(t.title, (s) => {
                let message;
                let messageChunks;
                let nodeJsChunks;
                let hash;
                const nextCycle = () => {
                    message = crypto_1.randomBytes(totalInput);
                    const chunkCount = Math.ceil(message.length / chunkSize);
                    messageChunks = Array.from({ length: chunkCount }).map((_, index) => message.slice(index * chunkSize, index * chunkSize + chunkSize));
                    nodeJsChunks = messageChunks.map((chunk) => Buffer.from(chunk));
                };
                nextCycle();
                s.bench('libauth', () => {
                    hash = hashFunction.final(messageChunks.reduce((state, chunk) => hashFunction.update(state, chunk), hashFunction.init()));
                });
                s.bench('hash.js', () => {
                    hash = messageChunks
                        .reduce((state, chunk) => state.update(chunk), hashJs[nodeJsAlgorithm]())
                        .digest();
                });
                s.bench('node.js native', () => {
                    hash = nodeJsChunks
                        .reduce((state, chunk) => state.update(chunk), crypto_1.createHash(nodeJsAlgorithm))
                        .digest();
                });
                if (nodeJsAlgorithm !== 'ripemd160') {
                    // eslint-disable-next-line @typescript-eslint/naming-convention
                    const Algorithm = nodeJsAlgorithm === 'sha1'
                        ? asmCrypto.Sha1
                        : nodeJsAlgorithm === 'sha256'
                            ? asmCrypto.Sha256
                            : asmCrypto.Sha512;
                    s.bench('asmcrypto.js', () => {
                        const instance = new Algorithm();
                        hash = instance.process(message).finish().result;
                    });
                }
                s.cycle(() => {
                    if (hash === null) {
                        t.fail(`asmcrypto.js failed to produce a hash for message: ${message.toString()}`);
                    }
                    else {
                        t.deepEqual(new Uint8Array(hash), hashFunction.hash(message));
                        nextCycle();
                    }
                });
            });
        });
    };
    /* eslint-disable @typescript-eslint/no-magic-numbers */
    singlePassNodeBenchmark(32);
    singlePassNodeBenchmark(100);
    singlePassNodeBenchmark(1000);
    singlePassNodeBenchmark(10000);
    incrementalNodeBenchmark(mb * 32, mb);
    /* eslint-enable @typescript-eslint/no-magic-numbers */
};
//# sourceMappingURL=hash.bench.helper.js.map