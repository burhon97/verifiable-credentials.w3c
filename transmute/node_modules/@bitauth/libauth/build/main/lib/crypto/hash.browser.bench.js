"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable functional/no-expression-statement */
const path_1 = require("path");
const plugin_alias_1 = __importDefault(require("@rollup/plugin-alias"));
const plugin_commonjs_1 = __importDefault(require("@rollup/plugin-commonjs"));
const plugin_node_resolve_1 = __importDefault(require("@rollup/plugin-node-resolve"));
const ava_1 = __importDefault(require("ava"));
const puppeteer_1 = require("puppeteer");
const rollup_1 = require("rollup");
const prepareCode = async () => {
    // eslint-disable-next-line no-console
    const realConsoleWarn = console.warn;
    /**
     * Suppress Rollup warning:
     * `Use of eval is strongly discouraged, as it poses security risks and may cause issues with minification`
     */
    // eslint-disable-next-line no-console, functional/immutable-data
    console.warn = (suppress) => suppress;
    const bundle = await rollup_1.rollup({
        input: path_1.join(__dirname, 'hash.browser.bench.helper.js'),
        plugins: [
            plugin_alias_1.default({
                entries: {
                    chuhai: './../../../bench/chuhai.js',
                    'hash.js': './../../../bench/hash.js',
                },
            }),
            plugin_commonjs_1.default(),
            plugin_node_resolve_1.default(),
        ],
    });
    // eslint-disable-next-line no-console, require-atomic-updates, functional/immutable-data
    console.warn = realConsoleWarn;
    const result = await bundle.generate({
        format: 'esm',
    });
    return result.output[0].code;
};
const preparePage = async () => {
    const browser = await puppeteer_1.launch({
        args: ['--no-sandbox', '--disable-setuid-sandbox'],
    });
    const page = await browser.newPage();
    // https://github.com/GoogleChrome/puppeteer/issues/2301#issuecomment-379622459
    await page.goto('file:///');
    return { browser, page };
};
(async () => {
    const [code, { browser, page }] = await Promise.all([
        prepareCode(),
        preparePage(),
    ]);
    ava_1.default(`# browser: ${await browser.version()}`, async (t) => {
        page.on('console', (msg) => {
            // eslint-disable-next-line no-console
            console.log(msg.text());
        });
        page.on('error', (err) => {
            // eslint-disable-next-line no-console
            console.error(`error: ${String(err)}`);
        });
        // cspell: disable-next-line
        page.on('pageerror', (err) => {
            // eslint-disable-next-line no-console
            console.error(`pageerror: ${String(err)}`); // cspell: disable-line
        });
        // eslint-disable-next-line @typescript-eslint/no-misused-promises, no-async-promise-executor
        await new Promise(async (resolve) => {
            await page.exposeFunction('benchError', (error) => {
                // eslint-disable-next-line no-console
                console.error(error);
            });
            await page.exposeFunction('benchComplete', async () => {
                // eslint-disable-next-line no-console
                console.log('Browser benchmark complete, closing browser.');
                await browser.close();
                t.pass();
                resolve();
            });
            await page.setContent(`<script type="module">${code}</script>`);
        });
    });
})().catch((err) => {
    // eslint-disable-next-line no-console
    console.error(err);
});
//# sourceMappingURL=hash.browser.bench.js.map