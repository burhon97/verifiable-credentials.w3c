"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* global window, crypto */
/* eslint-disable functional/no-let, @typescript-eslint/init-declarations, functional/no-expression-statement, functional/no-conditional-statement */
const asmCrypto = __importStar(require("asmcrypto.js"));
const chuhai_1 = __importDefault(require("chuhai"));
const hashJs = __importStar(require("hash.js"));
const crypto_1 = require("./crypto");
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const isUint8Array = (array) => { var _a; 
// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
return ((_a = array === null || array === void 0 ? void 0 : array.constructor) === null || _a === void 0 ? void 0 : _a.name) === 'Uint8Array'; };
const compare = (a, b) => {
    if (!isUint8Array(a) || !isUint8Array(b) || a.toString() !== b.toString()) {
        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
        benchError(`\nInvalid result: ${a} is not equal to ${b}\n`);
    }
};
const randomBytes = (bytes) => crypto.getRandomValues(new Uint8Array(bytes));
const singlePassBrowserBenchmark = async ({ hashFunction, hashFunctionName, inputLength, subtleCryptoAlgorithmName, }) => chuhai_1.default(`browser: ${hashFunctionName}: hash a ${inputLength}-byte input`, (s) => {
    let message = randomBytes(inputLength);
    let hash;
    s.cycle(() => {
        if (hash === null) {
            benchError(`asmcrypto.js produced a null result given message: ${message.toString()}`);
        }
        else {
            compare(hash, hashFunction.hash(message));
        }
        message = randomBytes(inputLength);
    });
    s.bench('libauth', () => {
        hash = hashFunction.hash(message);
    });
    s.bench('hash.js', () => {
        hash = new Uint8Array(hashJs[hashFunctionName]().update(message).digest());
    });
    if (typeof subtleCryptoAlgorithmName === 'string') {
        s.bench('crypto.subtle', (deferred) => {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            window.crypto.subtle
                .digest(subtleCryptoAlgorithmName, message)
                .then((buffer) => {
                hash = new Uint8Array(buffer);
                deferred.resolve();
            });
        }, {
            defer: true,
        });
        // eslint-disable-next-line @typescript-eslint/naming-convention
        const Algorithm = subtleCryptoAlgorithmName === 'SHA-1'
            ? asmCrypto.Sha1
            : subtleCryptoAlgorithmName === 'SHA-256'
                ? asmCrypto.Sha256
                : asmCrypto.Sha512;
        s.bench('asmcrypto.js', () => {
            const instance = new Algorithm();
            hash = instance.process(message).finish().result;
        });
    }
});
const mb = 1000000;
const incrementalBrowserBenchmark = async ({ chunkSize, hashFunction, hashFunctionName, totalInput, }) => chuhai_1.default(`browser: ${hashFunctionName}: incrementally hash a ${totalInput / mb}MB input in ${chunkSize / mb}MB chunks`, (s) => {
    let message;
    let messageChunks;
    let hash;
    const nextCycle = () => {
        /**
         * We can't get this much entropy, so we just use 0s here.
         */
        message = new Uint8Array(totalInput).fill(0);
        const chunkCount = Math.ceil(message.length / chunkSize);
        messageChunks = Array.from({ length: chunkCount }).map((_, index) => message.slice(index * chunkSize, index * chunkSize + chunkSize));
    };
    nextCycle();
    s.cycle(() => {
        if (hash === null) {
            benchError(`asmcrypto.js produced a null result given message: ${message.toString()}`);
        }
        else {
            compare(new Uint8Array(hash), hashFunction.hash(message));
        }
        nextCycle();
    });
    s.bench('libauth', () => {
        hash = hashFunction.final(messageChunks.reduce((state, chunk) => hashFunction.update(state, chunk), hashFunction.init()));
    });
    s.bench('hash.js', () => {
        hash = messageChunks
            .reduce((state, chunk) => state.update(chunk), hashJs[hashFunctionName]())
            .digest();
    });
    if (hashFunctionName !== 'ripemd160') {
        // eslint-disable-next-line @typescript-eslint/naming-convention
        const Algorithm = hashFunctionName === 'sha1'
            ? asmCrypto.Sha1
            : hashFunctionName === 'sha256'
                ? asmCrypto.Sha256
                : asmCrypto.Sha512;
        s.bench('asmcrypto.js', () => {
            const instance = new Algorithm();
            hash = instance.process(message).finish().result;
        });
    }
});
const browserBenchmarks = async ({ hashFunction, hashFunctionName, subtleCryptoAlgorithmName, }) => {
    /* eslint-disable @typescript-eslint/no-magic-numbers */
    await singlePassBrowserBenchmark({
        hashFunction,
        hashFunctionName,
        inputLength: 32,
        subtleCryptoAlgorithmName,
    });
    await singlePassBrowserBenchmark({
        hashFunction,
        hashFunctionName,
        inputLength: 100,
        subtleCryptoAlgorithmName,
    });
    await singlePassBrowserBenchmark({
        hashFunction,
        hashFunctionName,
        inputLength: 1000,
        subtleCryptoAlgorithmName,
    });
    await singlePassBrowserBenchmark({
        hashFunction,
        hashFunctionName,
        inputLength: 10000,
        subtleCryptoAlgorithmName,
    });
    await incrementalBrowserBenchmark({
        chunkSize: mb,
        hashFunction,
        hashFunctionName,
        totalInput: mb * 32,
    });
    /* eslint-enable @typescript-eslint/no-magic-numbers */
};
(async () => {
    const sha1 = await crypto_1.instantiateSha1();
    const sha256 = await crypto_1.instantiateSha256();
    const sha512 = await crypto_1.instantiateSha512();
    const ripemd160 = await crypto_1.instantiateRipemd160();
    await browserBenchmarks({
        hashFunction: sha1,
        hashFunctionName: 'sha1',
        subtleCryptoAlgorithmName: 'SHA-1',
    });
    await browserBenchmarks({
        hashFunction: sha256,
        hashFunctionName: 'sha256',
        subtleCryptoAlgorithmName: 'SHA-256',
    });
    await browserBenchmarks({
        hashFunction: sha512,
        hashFunctionName: 'sha512',
        subtleCryptoAlgorithmName: 'SHA-512',
    });
    await browserBenchmarks({
        hashFunction: ripemd160,
        hashFunctionName: 'ripemd160',
    });
    benchComplete();
})().catch((err) => {
    // eslint-disable-next-line no-console
    console.error(err);
});
//# sourceMappingURL=hash.browser.bench.helper.js.map