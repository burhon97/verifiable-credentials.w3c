"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.instantiateSha1 = exports.getEmbeddedSha1Binary = exports.instantiateSha1Bytes = void 0;
const bin_1 = require("../bin/bin");
const format_1 = require("../format/format");
/**
 * The most performant way to instantiate sha1 functionality. To avoid
 * using Node.js or DOM-specific APIs, you can use `instantiateSha1`.
 *
 * @param webassemblyBytes - A buffer containing the sha1 binary.
 */
exports.instantiateSha1Bytes = async (webassemblyBytes) => {
    const wasm = await bin_1.instantiateRustWasm(webassemblyBytes, './sha1', 'sha1', 'sha1_init', 'sha1_update', 'sha1_final');
    return {
        final: wasm.final,
        hash: wasm.hash,
        init: wasm.init,
        update: wasm.update,
    };
};
exports.getEmbeddedSha1Binary = () => format_1.base64ToBin(bin_1.sha1Base64Bytes).buffer;
const cachedSha1 = {};
/**
 * An ultimately-portable (but slower) version of `instantiateSha1Bytes`
 * which does not require the consumer to provide the sha1 binary buffer.
 */
exports.instantiateSha1 = async () => {
    if (cachedSha1.cache !== undefined) {
        return cachedSha1.cache;
    }
    const result = exports.instantiateSha1Bytes(exports.getEmbeddedSha1Binary());
    // eslint-disable-next-line functional/immutable-data, functional/no-expression-statement
    cachedSha1.cache = result;
    return result;
};
//# sourceMappingURL=sha1.js.map