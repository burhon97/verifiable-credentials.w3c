"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable functional/no-expression-statement */
const crypto_1 = require("crypto");
const ava_1 = __importDefault(require("ava"));
const ava_fast_check_1 = require("ava-fast-check");
const lib_1 = require("../lib");
const privateKeyLength = 32;
const maximumUint8Value = 255;
const secureRandom = () => crypto_1.randomBytes(privateKeyLength);
const secp256k1Promise = lib_1.instantiateSecp256k1();
ava_1.default('validateSecp256k1PrivateKey', (t) => {
    t.false(lib_1.validateSecp256k1PrivateKey(lib_1.hexToBin('')));
    t.false(lib_1.validateSecp256k1PrivateKey(lib_1.hexToBin('00')));
    t.false(lib_1.validateSecp256k1PrivateKey(lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000')));
    t.true(lib_1.validateSecp256k1PrivateKey(lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000001')));
    t.true(lib_1.validateSecp256k1PrivateKey(lib_1.hexToBin('00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')));
    t.true(lib_1.validateSecp256k1PrivateKey(lib_1.hexToBin('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413f')));
    t.false(lib_1.validateSecp256k1PrivateKey(lib_1.hexToBin('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140')));
});
const secp256k1OrderNFFBytes = 15;
// eslint-disable-next-line functional/immutable-data
const almostInvalid = Array(secp256k1OrderNFFBytes).fill(maximumUint8Value);
const theRest = privateKeyLength - almostInvalid.length;
ava_fast_check_1.testProp('[fast-check] validateSecp256k1PrivateKey <-> Secp256k1.validatePrivateKey', [
    ava_fast_check_1.fc
        .array(ava_fast_check_1.fc.integer(0, maximumUint8Value), theRest, theRest)
        .map((random) => Uint8Array.from([...almostInvalid, ...random])),
], async (t, input) => {
    const secp256k1 = await secp256k1Promise;
    t.deepEqual(lib_1.validateSecp256k1PrivateKey(input), secp256k1.validatePrivateKey(input));
});
ava_1.default('generatePrivateKey: works', async (t) => {
    const secp256k1 = await secp256k1Promise;
    const key = lib_1.generatePrivateKey(secureRandom);
    t.true(secp256k1.validatePrivateKey(key));
});
ava_1.default('generatePrivateKey: tries until success', (t) => {
    // eslint-disable-next-line functional/no-let
    let calls = 0;
    const entropy = [
        // eslint-disable-next-line functional/immutable-data
        Uint8Array.from(Array(privateKeyLength).fill(maximumUint8Value)),
        // eslint-disable-next-line functional/immutable-data
        Uint8Array.from(Array(privateKeyLength).fill(1)),
    ];
    const mockEntropy = () => {
        // eslint-disable-next-line no-plusplus
        calls++;
        return entropy[calls];
    };
    const key = lib_1.generatePrivateKey(mockEntropy);
    t.deepEqual(key, entropy[1]);
    t.deepEqual(calls, 1);
});
//# sourceMappingURL=key-utils.spec.js.map