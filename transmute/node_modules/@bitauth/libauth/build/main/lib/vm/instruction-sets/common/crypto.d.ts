import { Ripemd160, Secp256k1, Sha1, Sha256 } from '../../../crypto/crypto';
import { Operation } from '../../virtual-machine';
import { AuthenticationProgramStateCommon, AuthenticationProgramStateError, AuthenticationProgramStateMinimum, AuthenticationProgramStateStack } from '../../vm-types';
import { AuthenticationErrorCommon } from './errors';
import { OpcodesCommon } from './opcodes';
export { Ripemd160, Sha1, Sha256, Secp256k1 };
export declare const opRipemd160: <Opcodes, State extends AuthenticationProgramStateMinimum<Opcodes> & AuthenticationProgramStateStack<Uint8Array> & AuthenticationProgramStateError<Errors, AuthenticationErrorCommon>, Errors>({ ripemd160, }: {
    ripemd160: {
        hash: Ripemd160['hash'];
    };
}) => Operation<State>;
export declare const opSha1: <Opcodes, State extends AuthenticationProgramStateMinimum<Opcodes> & AuthenticationProgramStateStack<Uint8Array> & AuthenticationProgramStateError<Errors, AuthenticationErrorCommon>, Errors>({ sha1, }: {
    sha1: {
        hash: Sha1['hash'];
    };
}) => Operation<State>;
export declare const opSha256: <Opcodes, State extends AuthenticationProgramStateMinimum<Opcodes> & AuthenticationProgramStateStack<Uint8Array> & AuthenticationProgramStateError<Errors, AuthenticationErrorCommon>, Errors>({ sha256, }: {
    sha256: {
        hash: Sha256['hash'];
    };
}) => Operation<State>;
export declare const opHash160: <Opcodes, State extends AuthenticationProgramStateMinimum<Opcodes> & AuthenticationProgramStateStack<Uint8Array> & AuthenticationProgramStateError<Errors, AuthenticationErrorCommon>, Errors>({ ripemd160, sha256, }: {
    sha256: {
        hash: Sha256['hash'];
    };
    ripemd160: {
        hash: Ripemd160['hash'];
    };
}) => Operation<State>;
export declare const opHash256: <Opcodes, State extends AuthenticationProgramStateMinimum<Opcodes> & AuthenticationProgramStateStack<Uint8Array> & AuthenticationProgramStateError<Errors, AuthenticationErrorCommon>, Errors>({ sha256, }: {
    sha256: {
        hash: Sha256['hash'];
    };
}) => Operation<State>;
export declare const opCodeSeparator: <Opcodes, State extends AuthenticationProgramStateMinimum<Opcodes> & {
    lastCodeSeparator: number;
}>() => Operation<State>;
export declare const opCheckSig: <Opcodes, State extends AuthenticationProgramStateCommon<Opcodes, Errors>, Errors>({ flags, secp256k1, sha256, }: {
    sha256: {
        hash: Sha256['hash'];
    };
    secp256k1: {
        verifySignatureSchnorr: Secp256k1['verifySignatureSchnorr'];
        verifySignatureDERLowS: Secp256k1['verifySignatureDERLowS'];
    };
    flags: {
        requireNullSignatureFailures: boolean;
    };
}) => Operation<State>;
export declare const opCheckMultiSig: <Opcodes, State extends AuthenticationProgramStateCommon<Opcodes, Errors>, Errors>({ flags: { requireMinimalEncoding, requireBugValueZero, requireNullSignatureFailures, }, secp256k1, sha256, }: {
    sha256: {
        hash: Sha256['hash'];
    };
    secp256k1: {
        verifySignatureDERLowS: Secp256k1['verifySignatureDERLowS'];
    };
    flags: {
        requireBugValueZero: boolean;
        requireMinimalEncoding: boolean;
        requireNullSignatureFailures: boolean;
    };
}) => (s: State) => State;
export declare const opCheckSigVerify: <Opcodes, State extends AuthenticationProgramStateCommon<Opcodes, Errors>, Errors>({ flags, secp256k1, sha256, }: {
    sha256: {
        hash: Sha256['hash'];
    };
    secp256k1: {
        verifySignatureSchnorr: Secp256k1['verifySignatureSchnorr'];
        verifySignatureDERLowS: Secp256k1['verifySignatureDERLowS'];
    };
    flags: {
        requireNullSignatureFailures: boolean;
    };
}) => Operation<State>;
export declare const opCheckMultiSigVerify: <Opcodes, State extends AuthenticationProgramStateCommon<Opcodes, Errors>, Errors>({ flags, secp256k1, sha256, }: {
    sha256: {
        hash: Sha256['hash'];
    };
    secp256k1: {
        verifySignatureDERLowS: Secp256k1['verifySignatureDERLowS'];
    };
    flags: {
        requireBugValueZero: boolean;
        requireMinimalEncoding: boolean;
        requireNullSignatureFailures: boolean;
    };
}) => Operation<State>;
export declare const cryptoOperations: <Opcodes, State extends AuthenticationProgramStateCommon<Opcodes, Errors>, Errors>({ flags, ripemd160, secp256k1, sha1, sha256, }: {
    sha1: {
        hash: Sha1['hash'];
    };
    sha256: {
        hash: Sha256['hash'];
    };
    ripemd160: {
        hash: Ripemd160['hash'];
    };
    secp256k1: {
        verifySignatureSchnorr: Secp256k1['verifySignatureSchnorr'];
        verifySignatureDERLowS: Secp256k1['verifySignatureDERLowS'];
    };
    flags: {
        requireBugValueZero: boolean;
        requireMinimalEncoding: boolean;
        requireNullSignatureFailures: boolean;
    };
}) => {
    166: Operation<State>;
    167: Operation<State>;
    168: Operation<State>;
    169: Operation<State>;
    170: Operation<State>;
    171: Operation<State>;
    172: Operation<State>;
    173: Operation<State>;
    174: (s: State) => State;
    175: Operation<State>;
};
//# sourceMappingURL=crypto.d.ts.map