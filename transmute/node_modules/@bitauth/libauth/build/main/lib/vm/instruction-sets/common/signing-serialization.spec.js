"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable functional/no-expression-statement, @typescript-eslint/no-magic-numbers */
const ava_1 = __importDefault(require("ava"));
const lib_1 = require("../../../lib");
const sighashTests = __importStar(require("../bch/fixtures/bitcoin-abc/sighash.json"));
const tests = Object.values(sighashTests)
    .filter((e) => e.length !== 1 && e.length < 8)
    .map((expectation, testIndex) => ({
    inputIndex: expectation[2],
    scriptHex: expectation[1],
    signingSerializationBCHDigestHex: expectation[4],
    signingSerializationType: expectation[3],
    testIndex,
    transactionHex: expectation[0],
}))
    .filter((expectation) => 
/**
 * Currently, this library only supports the new BCH signing serialization
 * algorithm. If the legacy algorithm is implemented, we can re-enable the
 * rest of these tests.
 */
!lib_1.isLegacySigningSerialization(expectation.signingSerializationType));
/**
 * Isolate a single test for debugging
 */
// const pendingTests = tests.filter(e => e.testIndex === 999);
const pendingTests = tests;
const sha256Promise = lib_1.instantiateSha256();
pendingTests.map((expectation, currentTest) => {
    ava_1.default(`[signing-serialization tests] sighash.json ${currentTest}/${pendingTests.length} (#${expectation.testIndex})`, async (t) => {
        const sha256 = await sha256Promise;
        const tx = lib_1.decodeTransactionUnsafe(lib_1.hexToBin(expectation.transactionHex));
        const lockingBytecode = lib_1.hexToBin(expectation.scriptHex);
        const signingSerializationType = lib_1.numberToBinInt32TwosCompliment(expectation.signingSerializationType);
        const state = lib_1.createTransactionContextCommon({
            inputIndex: expectation.inputIndex,
            sourceOutput: { satoshis: new Uint8Array(8) },
            spendingTransaction: tx,
        });
        const serialization = lib_1.generateSigningSerializationBCH({
            correspondingOutput: state.correspondingOutput,
            coveredBytecode: lockingBytecode,
            forkId: signingSerializationType.slice(1, 4),
            locktime: state.locktime,
            outpointIndex: state.outpointIndex,
            outpointTransactionHash: state.outpointTransactionHash,
            outputValue: state.outputValue,
            sequenceNumber: state.sequenceNumber,
            sha256,
            signingSerializationType: signingSerializationType.slice(0, 1),
            transactionOutpoints: state.transactionOutpoints,
            transactionOutputs: state.transactionOutputs,
            transactionSequenceNumbers: state.transactionSequenceNumbers,
            version: state.version,
        });
        const digest = sha256.hash(sha256.hash(serialization));
        t.deepEqual(digest, lib_1.hexToBin(expectation.signingSerializationBCHDigestHex).reverse(), `failed serialization: ${lib_1.binToHex(serialization)}`);
    });
    return undefined;
});
//# sourceMappingURL=signing-serialization.spec.js.map