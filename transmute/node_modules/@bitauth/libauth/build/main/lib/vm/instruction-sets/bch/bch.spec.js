"use strict";
/* eslint-disable functional/no-expression-statement, @typescript-eslint/no-magic-numbers */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = __importDefault(require("ava"));
const lib_1 = require("../../../lib");
ava_1.default('[BCH VM] vm.stateEvaluate: OP_2 OP_2 OP_ADD', async (t) => {
    const vm = await lib_1.instantiateVirtualMachineBCH();
    const state = lib_1.createAuthenticationProgramStateCommonEmpty({
        instructions: lib_1.parseBytecode(Uint8Array.from([lib_1.OpcodesBCH.OP_2, lib_1.OpcodesBCH.OP_2, lib_1.OpcodesBCH.OP_ADD])),
    });
    const result = vm.stateEvaluate(state);
    t.deepEqual(result, {
        alternateStack: [],
        correspondingOutput: Uint8Array.of(0),
        executionStack: [],
        instructions: [
            {
                opcode: 82,
            },
            {
                opcode: 82,
            },
            {
                opcode: 147,
            },
        ],
        ip: 3,
        lastCodeSeparator: -1,
        locktime: 0,
        operationCount: 1,
        outpointIndex: 0,
        outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
        outputValue: lib_1.hexToBin('0000000000000000'),
        sequenceNumber: 0,
        signatureOperationsCount: 0,
        signedMessages: [],
        stack: [Uint8Array.of(0x04)],
        transactionOutpoints: Uint8Array.of(0),
        transactionOutputs: Uint8Array.of(0),
        transactionSequenceNumbers: Uint8Array.of(0),
        version: 0,
    });
});
ava_1.default('[BCH VM] vm.stateDebug: OP_2 OP_2 OP_ADD', async (t) => {
    const vm = await lib_1.instantiateVirtualMachineBCH();
    const state = lib_1.createAuthenticationProgramStateCommonEmpty({
        instructions: lib_1.parseBytecode(Uint8Array.from([lib_1.OpcodesBCH.OP_2, lib_1.OpcodesBCH.OP_2, lib_1.OpcodesBCH.OP_ADD])),
    });
    const result = vm.stateDebug(state);
    t.deepEqual(result, [
        {
            alternateStack: [],
            correspondingOutput: Uint8Array.of(0),
            executionStack: [],
            instructions: [
                {
                    opcode: 82,
                },
                {
                    opcode: 82,
                },
                {
                    opcode: 147,
                },
            ],
            ip: 0,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 0,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [],
            transactionOutpoints: Uint8Array.of(0),
            transactionOutputs: Uint8Array.of(0),
            transactionSequenceNumbers: Uint8Array.of(0),
            version: 0,
        },
        {
            alternateStack: [],
            correspondingOutput: Uint8Array.of(0),
            executionStack: [],
            instructions: [
                {
                    opcode: 82,
                },
                {
                    opcode: 82,
                },
                {
                    opcode: 147,
                },
            ],
            ip: 1,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 0,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [Uint8Array.of(0x02)],
            transactionOutpoints: Uint8Array.of(0),
            transactionOutputs: Uint8Array.of(0),
            transactionSequenceNumbers: Uint8Array.of(0),
            version: 0,
        },
        {
            alternateStack: [],
            correspondingOutput: Uint8Array.of(0),
            executionStack: [],
            instructions: [
                {
                    opcode: 82,
                },
                {
                    opcode: 82,
                },
                {
                    opcode: 147,
                },
            ],
            ip: 2,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 0,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [Uint8Array.of(0x02), Uint8Array.of(0x02)],
            transactionOutpoints: Uint8Array.of(0),
            transactionOutputs: Uint8Array.of(0),
            transactionSequenceNumbers: Uint8Array.of(0),
            version: 0,
        },
        {
            alternateStack: [],
            correspondingOutput: Uint8Array.of(0),
            executionStack: [],
            instructions: [
                {
                    opcode: 82,
                },
                {
                    opcode: 82,
                },
                {
                    opcode: 147,
                },
            ],
            ip: 3,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 1,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [Uint8Array.of(0x04)],
            transactionOutpoints: Uint8Array.of(0),
            transactionOutputs: Uint8Array.of(0),
            transactionSequenceNumbers: Uint8Array.of(0),
            version: 0,
        },
    ]);
});
ava_1.default('[BCH VM] vm.stateStep through: OP_2 OP_2 OP_ADD', async (t) => {
    const vm = await lib_1.instantiateVirtualMachineBCH();
    const state0 = lib_1.createAuthenticationProgramStateCommonEmpty({
        instructions: lib_1.parseBytecode(Uint8Array.from([lib_1.OpcodesBCH.OP_2, lib_1.OpcodesBCH.OP_2, lib_1.OpcodesBCH.OP_ADD])),
    });
    const state1 = vm.stateStep(state0);
    const state2 = vm.stateStep(state1);
    t.deepEqual(vm.stateContinue(state2), true);
    const state3 = vm.stateStep(state2);
    t.deepEqual(vm.stateContinue(state3), false);
    t.deepEqual(state0, {
        alternateStack: [],
        correspondingOutput: Uint8Array.of(0),
        executionStack: [],
        instructions: [
            {
                opcode: 82,
            },
            {
                opcode: 82,
            },
            {
                opcode: 147,
            },
        ],
        ip: 0,
        lastCodeSeparator: -1,
        locktime: 0,
        operationCount: 0,
        outpointIndex: 0,
        outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
        outputValue: lib_1.hexToBin('0000000000000000'),
        sequenceNumber: 0,
        signatureOperationsCount: 0,
        signedMessages: [],
        stack: [],
        transactionOutpoints: Uint8Array.of(0),
        transactionOutputs: Uint8Array.of(0),
        transactionSequenceNumbers: Uint8Array.of(0),
        version: 0,
    });
    t.deepEqual(state1, {
        alternateStack: [],
        correspondingOutput: Uint8Array.of(0),
        executionStack: [],
        instructions: [
            {
                opcode: 82,
            },
            {
                opcode: 82,
            },
            {
                opcode: 147,
            },
        ],
        ip: 1,
        lastCodeSeparator: -1,
        locktime: 0,
        operationCount: 0,
        outpointIndex: 0,
        outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
        outputValue: lib_1.hexToBin('0000000000000000'),
        sequenceNumber: 0,
        signatureOperationsCount: 0,
        signedMessages: [],
        stack: [Uint8Array.of(0x02)],
        transactionOutpoints: Uint8Array.of(0),
        transactionOutputs: Uint8Array.of(0),
        transactionSequenceNumbers: Uint8Array.of(0),
        version: 0,
    });
    t.deepEqual(state2, {
        alternateStack: [],
        correspondingOutput: Uint8Array.of(0),
        executionStack: [],
        instructions: [
            {
                opcode: 82,
            },
            {
                opcode: 82,
            },
            {
                opcode: 147,
            },
        ],
        ip: 2,
        lastCodeSeparator: -1,
        locktime: 0,
        operationCount: 0,
        outpointIndex: 0,
        outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
        outputValue: lib_1.hexToBin('0000000000000000'),
        sequenceNumber: 0,
        signatureOperationsCount: 0,
        signedMessages: [],
        stack: [Uint8Array.of(0x02), Uint8Array.of(0x02)],
        transactionOutpoints: Uint8Array.of(0),
        transactionOutputs: Uint8Array.of(0),
        transactionSequenceNumbers: Uint8Array.of(0),
        version: 0,
    });
    t.deepEqual(state3, {
        alternateStack: [],
        correspondingOutput: Uint8Array.of(0),
        executionStack: [],
        instructions: [
            {
                opcode: 82,
            },
            {
                opcode: 82,
            },
            {
                opcode: 147,
            },
        ],
        ip: 3,
        lastCodeSeparator: -1,
        locktime: 0,
        operationCount: 1,
        outpointIndex: 0,
        outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
        outputValue: lib_1.hexToBin('0000000000000000'),
        sequenceNumber: 0,
        signatureOperationsCount: 0,
        signedMessages: [],
        stack: [Uint8Array.of(0x04)],
        transactionOutpoints: Uint8Array.of(0),
        transactionOutputs: Uint8Array.of(0),
        transactionSequenceNumbers: Uint8Array.of(0),
        version: 0,
    });
});
ava_1.default('[BCH VM] vm.evaluate: only lockingBytecode: OP_2 OP_2 OP_ADD', async (t) => {
    const sha256 = await lib_1.instantiateSha256();
    const vm = await lib_1.instantiateVirtualMachineBCH();
    const program = lib_1.createTestAuthenticationProgramBCH({
        lockingBytecode: Uint8Array.from([
            lib_1.OpcodesBCH.OP_2,
            lib_1.OpcodesBCH.OP_2,
            lib_1.OpcodesBCH.OP_ADD,
        ]),
        satoshis: lib_1.hexToBin('0000000000000000'),
        sha256,
        unlockingBytecode: Uint8Array.of(),
    });
    const result = vm.evaluate(program);
    t.deepEqual(result, {
        alternateStack: [],
        correspondingOutput: lib_1.hexToBin('000000000000000000'),
        executionStack: [],
        instructions: [
            {
                opcode: 82,
            },
            {
                opcode: 82,
            },
            {
                opcode: 147,
            },
        ],
        ip: 3,
        lastCodeSeparator: -1,
        locktime: 0,
        operationCount: 1,
        outpointIndex: 0,
        outpointTransactionHash: lib_1.hexToBin('e3d27808b1d16719d2690e9a30de9d69c52c33916a0c491d0aa0a98c56d6c2af'),
        outputValue: lib_1.hexToBin('0000000000000000'),
        sequenceNumber: 4294967295,
        signatureOperationsCount: 0,
        signedMessages: [],
        stack: [Uint8Array.of(0x04)],
        transactionOutpoints: lib_1.hexToBin('afc2d6568ca9a00a1d490c6a91332cc5699dde309a0e69d21967d1b10878d2e300000000'),
        transactionOutputs: lib_1.hexToBin('000000000000000000'),
        transactionSequenceNumbers: lib_1.hexToBin('ffffffff'),
        version: 1,
    });
});
ava_1.default('[BCH VM] vm.debug: only lockingBytecode: OP_2 OP_2 OP_ADD', async (t) => {
    const sha256 = await lib_1.instantiateSha256();
    const vm = await lib_1.instantiateVirtualMachineBCH();
    const program = lib_1.createTestAuthenticationProgramBCH({
        lockingBytecode: Uint8Array.from([
            lib_1.OpcodesBCH.OP_2,
            lib_1.OpcodesBCH.OP_2,
            lib_1.OpcodesBCH.OP_ADD,
        ]),
        satoshis: lib_1.hexToBin('0000000000000000'),
        sha256,
        unlockingBytecode: Uint8Array.of(),
    });
    const result = vm.debug(program);
    t.deepEqual(result, [
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            executionStack: [],
            instructions: [],
            ip: 0,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 0,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('e3d27808b1d16719d2690e9a30de9d69c52c33916a0c491d0aa0a98c56d6c2af'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 4294967295,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [],
            transactionOutpoints: lib_1.hexToBin('afc2d6568ca9a00a1d490c6a91332cc5699dde309a0e69d21967d1b10878d2e300000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('ffffffff'),
            version: 1,
        },
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            executionStack: [],
            instructions: [
                {
                    opcode: 82,
                },
                {
                    opcode: 82,
                },
                {
                    opcode: 147,
                },
            ],
            ip: 0,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 0,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('e3d27808b1d16719d2690e9a30de9d69c52c33916a0c491d0aa0a98c56d6c2af'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 4294967295,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [],
            transactionOutpoints: lib_1.hexToBin('afc2d6568ca9a00a1d490c6a91332cc5699dde309a0e69d21967d1b10878d2e300000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('ffffffff'),
            version: 1,
        },
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            executionStack: [],
            instructions: [
                {
                    opcode: 82,
                },
                {
                    opcode: 82,
                },
                {
                    opcode: 147,
                },
            ],
            ip: 1,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 0,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('e3d27808b1d16719d2690e9a30de9d69c52c33916a0c491d0aa0a98c56d6c2af'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 4294967295,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [Uint8Array.of(0x02)],
            transactionOutpoints: lib_1.hexToBin('afc2d6568ca9a00a1d490c6a91332cc5699dde309a0e69d21967d1b10878d2e300000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('ffffffff'),
            version: 1,
        },
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            executionStack: [],
            instructions: [
                {
                    opcode: 82,
                },
                {
                    opcode: 82,
                },
                {
                    opcode: 147,
                },
            ],
            ip: 2,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 0,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('e3d27808b1d16719d2690e9a30de9d69c52c33916a0c491d0aa0a98c56d6c2af'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 4294967295,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [Uint8Array.of(0x02), Uint8Array.of(0x02)],
            transactionOutpoints: lib_1.hexToBin('afc2d6568ca9a00a1d490c6a91332cc5699dde309a0e69d21967d1b10878d2e300000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('ffffffff'),
            version: 1,
        },
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            executionStack: [],
            instructions: [
                {
                    opcode: 82,
                },
                {
                    opcode: 82,
                },
                {
                    opcode: 147,
                },
            ],
            ip: 3,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 1,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('e3d27808b1d16719d2690e9a30de9d69c52c33916a0c491d0aa0a98c56d6c2af'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 4294967295,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [Uint8Array.of(0x04)],
            transactionOutpoints: lib_1.hexToBin('afc2d6568ca9a00a1d490c6a91332cc5699dde309a0e69d21967d1b10878d2e300000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('ffffffff'),
            version: 1,
        },
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            executionStack: [],
            instructions: [
                {
                    opcode: 82,
                },
                {
                    opcode: 82,
                },
                {
                    opcode: 147,
                },
            ],
            ip: 3,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 1,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('e3d27808b1d16719d2690e9a30de9d69c52c33916a0c491d0aa0a98c56d6c2af'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 4294967295,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [Uint8Array.of(0x04)],
            transactionOutpoints: lib_1.hexToBin('afc2d6568ca9a00a1d490c6a91332cc5699dde309a0e69d21967d1b10878d2e300000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('ffffffff'),
            version: 1,
        },
    ]);
});
//# sourceMappingURL=bch.spec.js.map