import { Sha256 } from '../../../crypto/sha256';
import { Input, Output, Transaction } from '../../../transaction/transaction-types';
import { AuthenticationProgramCommon, AuthenticationProgramStateCommon } from '../../vm-types';
import { AuthenticationErrorBCH } from './bch-errors';
import { OpcodesBCH } from './bch-opcodes';
export declare enum ConsensusBCH {
    schnorrSignatureLength = 64
}
export interface AuthenticationProgramBCH extends AuthenticationProgramCommon {
}
export interface AuthenticationProgramStateBCH extends AuthenticationProgramStateCommon<OpcodesBCH, AuthenticationErrorBCH> {
}
export declare const createTestAuthenticationProgramBCH: ({ lockingBytecode, satoshis, sha256, unlockingBytecode, }: {
    /**
     * An implementation of sha256. Available via `instantiateSha256`.
     */
    sha256: {
        hash: Sha256['hash'];
    };
} & Output<Uint8Array, Uint8Array> & Pick<Input<Uint8Array, Uint8Array>, "unlockingBytecode">) => {
    inputIndex: number;
    sourceOutput: Output<Uint8Array, Uint8Array>;
    spendingTransaction: Transaction<Input<Uint8Array, Uint8Array>, Output<Uint8Array, Uint8Array>>;
};
//# sourceMappingURL=bch-types.d.ts.map