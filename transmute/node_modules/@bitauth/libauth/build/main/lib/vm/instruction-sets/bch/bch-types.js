"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTestAuthenticationProgramBCH = exports.ConsensusBCH = void 0;
const format_1 = require("../../../format/format");
const transaction_serialization_1 = require("../../../transaction/transaction-serialization");
var ConsensusBCH;
(function (ConsensusBCH) {
    ConsensusBCH[ConsensusBCH["schnorrSignatureLength"] = 64] = "schnorrSignatureLength";
})(ConsensusBCH = exports.ConsensusBCH || (exports.ConsensusBCH = {}));
exports.createTestAuthenticationProgramBCH = ({ lockingBytecode, satoshis, sha256, unlockingBytecode, }) => {
    const testFundingTransaction = {
        inputs: [
            {
                outpointIndex: 0xffffffff,
                outpointTransactionHash: format_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                sequenceNumber: 0xffffffff,
                unlockingBytecode: Uint8Array.of(0, 0),
            },
        ],
        locktime: 0,
        outputs: [{ lockingBytecode, satoshis }],
        version: 1,
    };
    const testSpendingTransaction = {
        inputs: [
            {
                outpointIndex: 0,
                outpointTransactionHash: transaction_serialization_1.getTransactionHashBE(sha256, transaction_serialization_1.encodeTransaction(testFundingTransaction)),
                sequenceNumber: 0xffffffff,
                unlockingBytecode,
            },
        ],
        locktime: 0,
        outputs: [{ lockingBytecode: Uint8Array.of(), satoshis }],
        version: 1,
    };
    return {
        inputIndex: 0,
        sourceOutput: testFundingTransaction.outputs[0],
        spendingTransaction: testSpendingTransaction,
    };
};
//# sourceMappingURL=bch-types.js.map