import { AuthenticationProgramStateAlternateStack, AuthenticationProgramStateError, AuthenticationProgramStateStack } from '../../vm-types';
import { AuthenticationErrorCommon } from './errors';
import { OpcodesCommon } from './opcodes';
export declare const opToAltStack: <State extends AuthenticationProgramStateStack<Uint8Array> & AuthenticationProgramStateAlternateStack<Uint8Array>>() => (state: State) => State;
export declare const opFromAltStack: <State extends AuthenticationProgramStateStack<Uint8Array> & AuthenticationProgramStateAlternateStack<Uint8Array> & AuthenticationProgramStateError<Errors, AuthenticationErrorCommon>, Errors>() => (state: State) => State;
export declare const op2Drop: <State extends AuthenticationProgramStateStack<Uint8Array>>() => (state: State) => State;
export declare const op2Dup: <State extends AuthenticationProgramStateStack<Uint8Array>>() => (state: State) => State;
export declare const op3Dup: <State extends AuthenticationProgramStateStack<Uint8Array>>() => (state: State) => State;
export declare const op2Over: <State extends AuthenticationProgramStateStack<Uint8Array>>() => (state: State) => State;
export declare const op2Rot: <State extends AuthenticationProgramStateStack<Uint8Array>>() => (state: State) => State;
export declare const op2Swap: <State extends AuthenticationProgramStateStack<Uint8Array>>() => (state: State) => State;
export declare const opIfDup: <State extends AuthenticationProgramStateStack<Uint8Array>>() => (state: State) => State;
export declare const opDepth: <State extends AuthenticationProgramStateStack<Uint8Array>>() => (state: State) => State;
export declare const opDrop: <State extends AuthenticationProgramStateStack<Uint8Array>>() => (state: State) => State;
export declare const opDup: <State extends AuthenticationProgramStateStack<Uint8Array>>() => (state: State) => State;
export declare const opNip: <State extends AuthenticationProgramStateStack<Uint8Array>>() => (state: State) => State;
export declare const opOver: <State extends AuthenticationProgramStateStack<Uint8Array>>() => (state: State) => State;
export declare const opPick: <State extends AuthenticationProgramStateStack<Uint8Array> & AuthenticationProgramStateError<Errors, AuthenticationErrorCommon>, Errors>({ requireMinimalEncoding, }: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opRoll: <State extends AuthenticationProgramStateStack<Uint8Array> & AuthenticationProgramStateError<Errors, AuthenticationErrorCommon>, Errors>({ requireMinimalEncoding, }: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opRot: <State extends AuthenticationProgramStateStack<Uint8Array>>() => (state: State) => State;
export declare const opSwap: <State extends AuthenticationProgramStateStack<Uint8Array>>() => (state: State) => State;
export declare const opTuck: <State extends AuthenticationProgramStateStack<Uint8Array>>() => (state: State) => State;
export declare const stackOperations: <State extends AuthenticationProgramStateStack<Uint8Array> & AuthenticationProgramStateAlternateStack<Uint8Array> & AuthenticationProgramStateError<Errors, AuthenticationErrorCommon>, Errors>(flags: {
    requireMinimalEncoding: boolean;
}) => {
    107: (state: State) => State;
    108: (state: State) => State;
    109: (state: State) => State;
    110: (state: State) => State;
    111: (state: State) => State;
    112: (state: State) => State;
    113: (state: State) => State;
    114: (state: State) => State;
    115: (state: State) => State;
    116: (state: State) => State;
    117: (state: State) => State;
    118: (state: State) => State;
    119: (state: State) => State;
    120: (state: State) => State;
    121: (state: State) => State;
    122: (state: State) => State;
    123: (state: State) => State;
    124: (state: State) => State;
    125: (state: State) => State;
};
//# sourceMappingURL=stack.d.ts.map