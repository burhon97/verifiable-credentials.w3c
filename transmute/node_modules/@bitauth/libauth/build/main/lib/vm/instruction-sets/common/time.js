"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.timeOperations = exports.opCheckSequenceVerify = exports.opCheckLockTimeVerify = exports.readLocktime = void 0;
const common_1 = require("./common");
const errors_1 = require("./errors");
const opcodes_1 = require("./opcodes");
var Bits;
(function (Bits) {
    Bits[Bits["sequenceLocktimeDisableFlag"] = 31] = "sequenceLocktimeDisableFlag";
    Bits[Bits["sequenceLocktimeTypeFlag"] = 22] = "sequenceLocktimeTypeFlag";
})(Bits || (Bits = {}));
var Constants;
(function (Constants) {
    Constants[Constants["locktimeScriptNumberByteLength"] = 5] = "locktimeScriptNumberByteLength";
    Constants[Constants["locktimeThreshold"] = 500000000] = "locktimeThreshold";
    Constants[Constants["locktimeDisablingSequenceNumber"] = 4294967295] = "locktimeDisablingSequenceNumber";
    Constants[Constants["sequenceLocktimeTransactionVersionMinimum"] = 2] = "sequenceLocktimeTransactionVersionMinimum";
    // eslint-disable-next-line no-bitwise
    Constants[Constants["sequenceLocktimeDisableFlag"] = 2147483648] = "sequenceLocktimeDisableFlag";
    // eslint-disable-next-line no-bitwise
    Constants[Constants["sequenceLocktimeTypeFlag"] = 4194304] = "sequenceLocktimeTypeFlag";
    Constants[Constants["sequenceGranularity"] = 9] = "sequenceGranularity";
    Constants[Constants["sequenceLocktimeMask"] = 65535] = "sequenceLocktimeMask";
})(Constants || (Constants = {}));
exports.readLocktime = (state, operation, flags) => {
    const item = state.stack[state.stack.length - 1];
    if (item === undefined) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.emptyStack, state);
    }
    const parsedLocktime = common_1.parseBytesAsScriptNumber(item, {
        maximumScriptNumberByteLength: Constants.locktimeScriptNumberByteLength,
        requireMinimalEncoding: flags.requireMinimalEncoding,
    });
    if (common_1.isScriptNumberError(parsedLocktime)) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.invalidScriptNumber, state);
    }
    const locktime = Number(parsedLocktime);
    if (locktime < 0) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.negativeLocktime, state);
    }
    return operation(state, locktime);
};
const locktimeTypesAreCompatible = (locktime, requiredLocktime) => (locktime < Constants.locktimeThreshold &&
    requiredLocktime < Constants.locktimeThreshold) ||
    (locktime >= Constants.locktimeThreshold &&
        requiredLocktime >= Constants.locktimeThreshold);
exports.opCheckLockTimeVerify = (flags) => (state) => exports.readLocktime(state, (nextState, requiredLocktime) => {
    if (!locktimeTypesAreCompatible(nextState.locktime, requiredLocktime)) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.incompatibleLocktimeType, nextState);
    }
    if (requiredLocktime > nextState.locktime) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.unsatisfiedLocktime, nextState);
    }
    if (nextState.sequenceNumber === Constants.locktimeDisablingSequenceNumber) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.locktimeDisabled, nextState);
    }
    return nextState;
}, flags);
// eslint-disable-next-line no-bitwise
const includesFlag = (value, flag) => (value & flag) !== 0;
exports.opCheckSequenceVerify = (flags) => (state) => exports.readLocktime(state, 
// eslint-disable-next-line complexity
(nextState, requiredSequence) => {
    const sequenceLocktimeDisabled = includesFlag(requiredSequence, Constants.sequenceLocktimeDisableFlag);
    if (sequenceLocktimeDisabled) {
        return nextState;
    }
    if (nextState.version < Constants.sequenceLocktimeTransactionVersionMinimum) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.checkSequenceUnavailable, nextState);
    }
    if (includesFlag(nextState.sequenceNumber, Constants.sequenceLocktimeDisableFlag)) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.unmatchedSequenceDisable, nextState);
    }
    if (includesFlag(requiredSequence, Constants.sequenceLocktimeTypeFlag) !==
        includesFlag(nextState.sequenceNumber, Constants.sequenceLocktimeTypeFlag)) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.incompatibleSequenceType, nextState);
    }
    if (
    // eslint-disable-next-line no-bitwise
    (requiredSequence & Constants.sequenceLocktimeMask) >
        // eslint-disable-next-line no-bitwise
        (nextState.sequenceNumber & Constants.sequenceLocktimeMask)) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.unsatisfiedSequenceNumber, nextState);
    }
    return nextState;
}, flags);
exports.timeOperations = (flags) => ({
    [opcodes_1.OpcodesCommon.OP_CHECKLOCKTIMEVERIFY]: exports.opCheckLockTimeVerify(flags),
    [opcodes_1.OpcodesCommon.OP_CHECKSEQUENCEVERIFY]: exports.opCheckSequenceVerify(flags),
});
//# sourceMappingURL=time.js.map