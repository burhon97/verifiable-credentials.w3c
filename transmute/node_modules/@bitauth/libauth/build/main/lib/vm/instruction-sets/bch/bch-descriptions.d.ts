import { OpcodeDescriptionsCommon } from '../common/descriptions';
export declare enum OpcodeDescriptionsUniqueBCH {
    OP_CAT = "Pop the top 2 items from the stack and concatenate them, pushing the result.",
    OP_SPLIT = "Pop the top item from the stack as an index (Script Number) and the next item as a byte array. Split the byte array into two stack items at the index (zero-based), pushing the results.",
    OP_NUM2BIN = "Pop the top item from the stack as an item length (Script Number) and the next item as a Script Number (without encoding restrictions). Re-encode the number using a byte array of the provided length, filling any unused bytes with zeros. (If the requested length is too short to encode the number, error.)",
    OP_BIN2NUM = "Pop the top item from the stack as a Script Number without encoding restrictions. Minimally-encode the number and push the result. (If the number can't be encoded in 4 bytes or less, error.)",
    OP_AND = "Pop the top 2 items from the stack and perform a bitwise AND on each byte, pushing the result. If the length of the items are not equal, error.",
    OP_OR = "Pop the top 2 items from the stack and perform a bitwise OR on each byte, pushing the result. If the length of the items are not equal, error.",
    OP_XOR = "Pop the top 2 items from the stack and perform a bitwise XOR on each byte, pushing the result. If the length of the items are not equal, error.",
    OP_DIV = "Pop the top item from the stack as a denominator (Script Number) and the next as a numerator (Script Number). Divide and push the result to the stack.",
    OP_MOD = "Pop the top item from the stack as a denominator (Script Number) and the next as a numerator (Script Number). Divide and push the remainder to the stack.",
    OP_CHECKDATASIG = "Pop the top 3 items from the stack. Treat the top as a public key, the second as a message, and the third as a signature. If the signature is valid, push a Script Number 1, otherwise push a Script Number 0.",
    OP_CHECKDATASIGVERIFY = "Pop the top 3 items from the stack. Treat the top as a public key, the second as a message, and the third as a signature. If the signature is not valid, error. (This operation is a combination of OP_CHECKDATASIG followed by OP_VERIFY.)",
    OP_REVERSEBYTES = "Pop the top item from the stack and reverse it, pushing the result."
}
/**
 * A map of descriptions for each Bitcoin Cash opcode.
 */
export declare const OpcodeDescriptionsBCH: {
    OP_CAT: OpcodeDescriptionsUniqueBCH.OP_CAT;
    OP_SPLIT: OpcodeDescriptionsUniqueBCH.OP_SPLIT;
    OP_NUM2BIN: OpcodeDescriptionsUniqueBCH.OP_NUM2BIN;
    OP_BIN2NUM: OpcodeDescriptionsUniqueBCH.OP_BIN2NUM;
    OP_AND: OpcodeDescriptionsUniqueBCH.OP_AND;
    OP_OR: OpcodeDescriptionsUniqueBCH.OP_OR;
    OP_XOR: OpcodeDescriptionsUniqueBCH.OP_XOR;
    OP_DIV: OpcodeDescriptionsUniqueBCH.OP_DIV;
    OP_MOD: OpcodeDescriptionsUniqueBCH.OP_MOD;
    OP_CHECKDATASIG: OpcodeDescriptionsUniqueBCH.OP_CHECKDATASIG;
    OP_CHECKDATASIGVERIFY: OpcodeDescriptionsUniqueBCH.OP_CHECKDATASIGVERIFY;
    OP_REVERSEBYTES: OpcodeDescriptionsUniqueBCH.OP_REVERSEBYTES;
    OP_0: OpcodeDescriptionsCommon.OP_0;
    OP_PUSHBYTES_1: OpcodeDescriptionsCommon.OP_PUSHBYTES_1;
    OP_PUSHBYTES_2: OpcodeDescriptionsCommon.OP_PUSHBYTES_2;
    OP_PUSHBYTES_3: OpcodeDescriptionsCommon.OP_PUSHBYTES_3;
    OP_PUSHBYTES_4: OpcodeDescriptionsCommon.OP_PUSHBYTES_4;
    OP_PUSHBYTES_5: OpcodeDescriptionsCommon.OP_PUSHBYTES_5;
    OP_PUSHBYTES_6: OpcodeDescriptionsCommon.OP_PUSHBYTES_6;
    OP_PUSHBYTES_7: OpcodeDescriptionsCommon.OP_PUSHBYTES_7;
    OP_PUSHBYTES_8: OpcodeDescriptionsCommon.OP_PUSHBYTES_8;
    OP_PUSHBYTES_9: OpcodeDescriptionsCommon.OP_PUSHBYTES_9;
    OP_PUSHBYTES_10: OpcodeDescriptionsCommon.OP_PUSHBYTES_10;
    OP_PUSHBYTES_11: OpcodeDescriptionsCommon.OP_PUSHBYTES_11;
    OP_PUSHBYTES_12: OpcodeDescriptionsCommon.OP_PUSHBYTES_12;
    OP_PUSHBYTES_13: OpcodeDescriptionsCommon.OP_PUSHBYTES_13;
    OP_PUSHBYTES_14: OpcodeDescriptionsCommon.OP_PUSHBYTES_14;
    OP_PUSHBYTES_15: OpcodeDescriptionsCommon.OP_PUSHBYTES_15;
    OP_PUSHBYTES_16: OpcodeDescriptionsCommon.OP_PUSHBYTES_16;
    OP_PUSHBYTES_17: OpcodeDescriptionsCommon.OP_PUSHBYTES_17;
    OP_PUSHBYTES_18: OpcodeDescriptionsCommon.OP_PUSHBYTES_18;
    OP_PUSHBYTES_19: OpcodeDescriptionsCommon.OP_PUSHBYTES_19;
    OP_PUSHBYTES_20: OpcodeDescriptionsCommon.OP_PUSHBYTES_20;
    OP_PUSHBYTES_21: OpcodeDescriptionsCommon.OP_PUSHBYTES_21;
    OP_PUSHBYTES_22: OpcodeDescriptionsCommon.OP_PUSHBYTES_22;
    OP_PUSHBYTES_23: OpcodeDescriptionsCommon.OP_PUSHBYTES_23;
    OP_PUSHBYTES_24: OpcodeDescriptionsCommon.OP_PUSHBYTES_24;
    OP_PUSHBYTES_25: OpcodeDescriptionsCommon.OP_PUSHBYTES_25;
    OP_PUSHBYTES_26: OpcodeDescriptionsCommon.OP_PUSHBYTES_26;
    OP_PUSHBYTES_27: OpcodeDescriptionsCommon.OP_PUSHBYTES_27;
    OP_PUSHBYTES_28: OpcodeDescriptionsCommon.OP_PUSHBYTES_28;
    OP_PUSHBYTES_29: OpcodeDescriptionsCommon.OP_PUSHBYTES_29;
    OP_PUSHBYTES_30: OpcodeDescriptionsCommon.OP_PUSHBYTES_30;
    OP_PUSHBYTES_31: OpcodeDescriptionsCommon.OP_PUSHBYTES_31;
    OP_PUSHBYTES_32: OpcodeDescriptionsCommon.OP_PUSHBYTES_32;
    OP_PUSHBYTES_33: OpcodeDescriptionsCommon.OP_PUSHBYTES_33;
    OP_PUSHBYTES_34: OpcodeDescriptionsCommon.OP_PUSHBYTES_34;
    OP_PUSHBYTES_35: OpcodeDescriptionsCommon.OP_PUSHBYTES_35;
    OP_PUSHBYTES_36: OpcodeDescriptionsCommon.OP_PUSHBYTES_36;
    OP_PUSHBYTES_37: OpcodeDescriptionsCommon.OP_PUSHBYTES_37;
    OP_PUSHBYTES_38: OpcodeDescriptionsCommon.OP_PUSHBYTES_38;
    OP_PUSHBYTES_39: OpcodeDescriptionsCommon.OP_PUSHBYTES_39;
    OP_PUSHBYTES_40: OpcodeDescriptionsCommon.OP_PUSHBYTES_40;
    OP_PUSHBYTES_41: OpcodeDescriptionsCommon.OP_PUSHBYTES_41;
    OP_PUSHBYTES_42: OpcodeDescriptionsCommon.OP_PUSHBYTES_42;
    OP_PUSHBYTES_43: OpcodeDescriptionsCommon.OP_PUSHBYTES_43;
    OP_PUSHBYTES_44: OpcodeDescriptionsCommon.OP_PUSHBYTES_44;
    OP_PUSHBYTES_45: OpcodeDescriptionsCommon.OP_PUSHBYTES_45;
    OP_PUSHBYTES_46: OpcodeDescriptionsCommon.OP_PUSHBYTES_46;
    OP_PUSHBYTES_47: OpcodeDescriptionsCommon.OP_PUSHBYTES_47;
    OP_PUSHBYTES_48: OpcodeDescriptionsCommon.OP_PUSHBYTES_48;
    OP_PUSHBYTES_49: OpcodeDescriptionsCommon.OP_PUSHBYTES_49;
    OP_PUSHBYTES_50: OpcodeDescriptionsCommon.OP_PUSHBYTES_50;
    OP_PUSHBYTES_51: OpcodeDescriptionsCommon.OP_PUSHBYTES_51;
    OP_PUSHBYTES_52: OpcodeDescriptionsCommon.OP_PUSHBYTES_52;
    OP_PUSHBYTES_53: OpcodeDescriptionsCommon.OP_PUSHBYTES_53;
    OP_PUSHBYTES_54: OpcodeDescriptionsCommon.OP_PUSHBYTES_54;
    OP_PUSHBYTES_55: OpcodeDescriptionsCommon.OP_PUSHBYTES_55;
    OP_PUSHBYTES_56: OpcodeDescriptionsCommon.OP_PUSHBYTES_56;
    OP_PUSHBYTES_57: OpcodeDescriptionsCommon.OP_PUSHBYTES_57;
    OP_PUSHBYTES_58: OpcodeDescriptionsCommon.OP_PUSHBYTES_58;
    OP_PUSHBYTES_59: OpcodeDescriptionsCommon.OP_PUSHBYTES_59;
    OP_PUSHBYTES_60: OpcodeDescriptionsCommon.OP_PUSHBYTES_60;
    OP_PUSHBYTES_61: OpcodeDescriptionsCommon.OP_PUSHBYTES_61;
    OP_PUSHBYTES_62: OpcodeDescriptionsCommon.OP_PUSHBYTES_62;
    OP_PUSHBYTES_63: OpcodeDescriptionsCommon.OP_PUSHBYTES_63;
    OP_PUSHBYTES_64: OpcodeDescriptionsCommon.OP_PUSHBYTES_64;
    OP_PUSHBYTES_65: OpcodeDescriptionsCommon.OP_PUSHBYTES_65;
    OP_PUSHBYTES_66: OpcodeDescriptionsCommon.OP_PUSHBYTES_66;
    OP_PUSHBYTES_67: OpcodeDescriptionsCommon.OP_PUSHBYTES_67;
    OP_PUSHBYTES_68: OpcodeDescriptionsCommon.OP_PUSHBYTES_68;
    OP_PUSHBYTES_69: OpcodeDescriptionsCommon.OP_PUSHBYTES_69;
    OP_PUSHBYTES_70: OpcodeDescriptionsCommon.OP_PUSHBYTES_70;
    OP_PUSHBYTES_71: OpcodeDescriptionsCommon.OP_PUSHBYTES_71;
    OP_PUSHBYTES_72: OpcodeDescriptionsCommon.OP_PUSHBYTES_72;
    OP_PUSHBYTES_73: OpcodeDescriptionsCommon.OP_PUSHBYTES_73;
    OP_PUSHBYTES_74: OpcodeDescriptionsCommon.OP_PUSHBYTES_74;
    OP_PUSHBYTES_75: OpcodeDescriptionsCommon.OP_PUSHBYTES_75;
    OP_PUSHDATA_1: OpcodeDescriptionsCommon.OP_PUSHDATA_1;
    OP_PUSHDATA_2: OpcodeDescriptionsCommon.OP_PUSHDATA_2;
    OP_PUSHDATA_4: OpcodeDescriptionsCommon.OP_PUSHDATA_4;
    OP_1NEGATE: OpcodeDescriptionsCommon.OP_1NEGATE;
    OP_RESERVED: OpcodeDescriptionsCommon.OP_RESERVED;
    OP_1: OpcodeDescriptionsCommon.OP_1;
    OP_2: OpcodeDescriptionsCommon.OP_2;
    OP_3: OpcodeDescriptionsCommon.OP_3;
    OP_4: OpcodeDescriptionsCommon.OP_4;
    OP_5: OpcodeDescriptionsCommon.OP_5;
    OP_6: OpcodeDescriptionsCommon.OP_6;
    OP_7: OpcodeDescriptionsCommon.OP_7;
    OP_8: OpcodeDescriptionsCommon.OP_8;
    OP_9: OpcodeDescriptionsCommon.OP_9;
    OP_10: OpcodeDescriptionsCommon.OP_10;
    OP_11: OpcodeDescriptionsCommon.OP_11;
    OP_12: OpcodeDescriptionsCommon.OP_12;
    OP_13: OpcodeDescriptionsCommon.OP_13;
    OP_14: OpcodeDescriptionsCommon.OP_14;
    OP_15: OpcodeDescriptionsCommon.OP_15;
    OP_16: OpcodeDescriptionsCommon.OP_16;
    OP_NOP: OpcodeDescriptionsCommon.OP_NOP;
    OP_VER: OpcodeDescriptionsCommon.OP_VER;
    OP_IF: OpcodeDescriptionsCommon.OP_IF;
    OP_NOTIF: OpcodeDescriptionsCommon.OP_NOTIF;
    OP_VERIF: OpcodeDescriptionsCommon.OP_VERIF;
    OP_VERNOTIF: OpcodeDescriptionsCommon.OP_VERNOTIF;
    OP_ELSE: OpcodeDescriptionsCommon.OP_ELSE;
    OP_ENDIF: OpcodeDescriptionsCommon.OP_ENDIF;
    OP_VERIFY: OpcodeDescriptionsCommon.OP_VERIFY;
    OP_RETURN: OpcodeDescriptionsCommon.OP_RETURN;
    OP_TOALTSTACK: OpcodeDescriptionsCommon.OP_TOALTSTACK;
    OP_FROMALTSTACK: OpcodeDescriptionsCommon.OP_FROMALTSTACK;
    OP_2DROP: OpcodeDescriptionsCommon.OP_2DROP;
    OP_2DUP: OpcodeDescriptionsCommon.OP_2DUP;
    OP_3DUP: OpcodeDescriptionsCommon.OP_3DUP;
    OP_2OVER: OpcodeDescriptionsCommon.OP_2OVER;
    OP_2ROT: OpcodeDescriptionsCommon.OP_2ROT;
    OP_2SWAP: OpcodeDescriptionsCommon.OP_2SWAP;
    OP_IFDUP: OpcodeDescriptionsCommon.OP_IFDUP;
    OP_DEPTH: OpcodeDescriptionsCommon.OP_DEPTH;
    OP_DROP: OpcodeDescriptionsCommon.OP_DROP;
    OP_DUP: OpcodeDescriptionsCommon.OP_DUP;
    OP_NIP: OpcodeDescriptionsCommon.OP_NIP;
    OP_OVER: OpcodeDescriptionsCommon.OP_OVER;
    OP_PICK: OpcodeDescriptionsCommon.OP_PICK;
    OP_ROLL: OpcodeDescriptionsCommon.OP_ROLL;
    OP_ROT: OpcodeDescriptionsCommon.OP_ROT;
    OP_SWAP: OpcodeDescriptionsCommon.OP_SWAP;
    OP_TUCK: OpcodeDescriptionsCommon.OP_TUCK;
    OP_SUBSTR: OpcodeDescriptionsCommon.OP_SUBSTR;
    OP_LEFT: OpcodeDescriptionsCommon.OP_LEFT;
    OP_RIGHT: OpcodeDescriptionsCommon.OP_RIGHT;
    OP_SIZE: OpcodeDescriptionsCommon.OP_SIZE;
    OP_INVERT: OpcodeDescriptionsCommon.OP_INVERT;
    OP_EQUAL: OpcodeDescriptionsCommon.OP_EQUAL;
    OP_EQUALVERIFY: OpcodeDescriptionsCommon.OP_EQUALVERIFY;
    OP_RESERVED1: OpcodeDescriptionsCommon.OP_RESERVED1;
    OP_RESERVED2: OpcodeDescriptionsCommon.OP_RESERVED2;
    OP_1ADD: OpcodeDescriptionsCommon.OP_1ADD;
    OP_1SUB: OpcodeDescriptionsCommon.OP_1SUB;
    OP_2MUL: OpcodeDescriptionsCommon.OP_2MUL;
    OP_2DIV: OpcodeDescriptionsCommon.OP_2DIV;
    OP_NEGATE: OpcodeDescriptionsCommon.OP_NEGATE;
    OP_ABS: OpcodeDescriptionsCommon.OP_ABS;
    OP_NOT: OpcodeDescriptionsCommon.OP_NOT;
    OP_0NOTEQUAL: OpcodeDescriptionsCommon.OP_0NOTEQUAL;
    OP_ADD: OpcodeDescriptionsCommon.OP_ADD;
    OP_SUB: OpcodeDescriptionsCommon.OP_SUB;
    OP_MUL: OpcodeDescriptionsCommon.OP_MUL;
    OP_LSHIFT: OpcodeDescriptionsCommon.OP_LSHIFT;
    OP_RSHIFT: OpcodeDescriptionsCommon.OP_RSHIFT;
    OP_BOOLAND: OpcodeDescriptionsCommon.OP_BOOLAND;
    OP_BOOLOR: OpcodeDescriptionsCommon.OP_BOOLOR;
    OP_NUMEQUAL: OpcodeDescriptionsCommon.OP_NUMEQUAL;
    OP_NUMEQUALVERIFY: OpcodeDescriptionsCommon.OP_NUMEQUALVERIFY;
    OP_NUMNOTEQUAL: OpcodeDescriptionsCommon.OP_NUMNOTEQUAL;
    OP_LESSTHAN: OpcodeDescriptionsCommon.OP_LESSTHAN;
    OP_GREATERTHAN: OpcodeDescriptionsCommon.OP_GREATERTHAN;
    OP_LESSTHANOREQUAL: OpcodeDescriptionsCommon.OP_LESSTHANOREQUAL;
    OP_GREATERTHANOREQUAL: OpcodeDescriptionsCommon.OP_GREATERTHANOREQUAL;
    OP_MIN: OpcodeDescriptionsCommon.OP_MIN;
    OP_MAX: OpcodeDescriptionsCommon.OP_MAX;
    OP_WITHIN: OpcodeDescriptionsCommon.OP_WITHIN;
    OP_RIPEMD160: OpcodeDescriptionsCommon.OP_RIPEMD160;
    OP_SHA1: OpcodeDescriptionsCommon.OP_SHA1;
    OP_SHA256: OpcodeDescriptionsCommon.OP_SHA256;
    OP_HASH160: OpcodeDescriptionsCommon.OP_HASH160;
    OP_HASH256: OpcodeDescriptionsCommon.OP_HASH256;
    OP_CODESEPARATOR: OpcodeDescriptionsCommon.OP_CODESEPARATOR;
    OP_CHECKSIG: OpcodeDescriptionsCommon.OP_CHECKSIG;
    OP_CHECKSIGVERIFY: OpcodeDescriptionsCommon.OP_CHECKSIGVERIFY;
    OP_CHECKMULTISIG: OpcodeDescriptionsCommon.OP_CHECKMULTISIG;
    OP_CHECKMULTISIGVERIFY: OpcodeDescriptionsCommon.OP_CHECKMULTISIGVERIFY;
    OP_NOP1: OpcodeDescriptionsCommon.OP_NOP1;
    OP_CHECKLOCKTIMEVERIFY: OpcodeDescriptionsCommon.OP_CHECKLOCKTIMEVERIFY;
    OP_CHECKSEQUENCEVERIFY: OpcodeDescriptionsCommon.OP_CHECKSEQUENCEVERIFY;
    OP_NOP4: OpcodeDescriptionsCommon.OP_NOP4;
    OP_NOP6: OpcodeDescriptionsCommon.OP_NOP6;
    OP_NOP5: OpcodeDescriptionsCommon.OP_NOP5;
    OP_NOP7: OpcodeDescriptionsCommon.OP_NOP7;
    OP_NOP8: OpcodeDescriptionsCommon.OP_NOP8;
    OP_NOP9: OpcodeDescriptionsCommon.OP_NOP9;
    OP_NOP10: OpcodeDescriptionsCommon.OP_NOP10;
};
//# sourceMappingURL=bch-descriptions.d.ts.map