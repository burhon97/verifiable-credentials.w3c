"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.unconditionalFlowControlOperations = exports.opElse = exports.opEndIf = exports.opNotIf = exports.opIf = exports.conditionalFlowControlOperations = exports.opReturn = exports.reservedOperation = exports.opVerify = void 0;
const arithmetic_1 = require("./arithmetic");
const combinators_1 = require("./combinators");
const common_1 = require("./common");
const errors_1 = require("./errors");
const opcodes_1 = require("./opcodes");
exports.opVerify = () => (state) => combinators_1.useOneStackItem(state, (nextState, [item]) => common_1.stackItemIsTruthy(item)
    ? nextState
    : errors_1.applyError(errors_1.AuthenticationErrorCommon.failedVerify, nextState));
exports.reservedOperation = () => (state) => errors_1.applyError(errors_1.AuthenticationErrorCommon.calledReserved, state);
exports.opReturn = () => (state) => errors_1.applyError(errors_1.AuthenticationErrorCommon.calledReturn, state);
exports.conditionalFlowControlOperations = () => ({
    [opcodes_1.OpcodesCommon.OP_RESERVED]: exports.reservedOperation(),
    [opcodes_1.OpcodesCommon.OP_VER]: exports.reservedOperation(),
    [opcodes_1.OpcodesCommon.OP_VERIFY]: exports.opVerify(),
    [opcodes_1.OpcodesCommon.OP_RETURN]: exports.opReturn(),
    [opcodes_1.OpcodesCommon.OP_RESERVED1]: exports.reservedOperation(),
    [opcodes_1.OpcodesCommon.OP_RESERVED2]: exports.reservedOperation(),
});
exports.opIf = () => (state) => {
    if (state.executionStack.every((item) => item)) {
        // eslint-disable-next-line functional/immutable-data
        const element = state.stack.pop();
        if (element === undefined) {
            return errors_1.applyError(errors_1.AuthenticationErrorCommon.emptyStack, state);
        }
        // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
        state.executionStack.push(common_1.stackItemIsTruthy(element));
        return state;
    }
    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
    state.executionStack.push(false);
    return state;
};
exports.opNotIf = (flags) => {
    const not = combinators_1.conditionallyEvaluate(arithmetic_1.opNot(flags));
    const ifOp = exports.opIf();
    return (state) => ifOp(not(state));
};
exports.opEndIf = () => (state) => {
    // eslint-disable-next-line functional/immutable-data
    const element = state.executionStack.pop();
    if (element === undefined) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.unexpectedEndIf, state);
    }
    return state;
};
exports.opElse = () => (state) => {
    const top = state.executionStack[state.executionStack.length - 1];
    if (top === undefined) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.unexpectedElse, state);
    }
    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
    state.executionStack[state.executionStack.length - 1] = !top;
    return state;
};
exports.unconditionalFlowControlOperations = (flags) => ({
    [opcodes_1.OpcodesCommon.OP_IF]: exports.opIf(),
    [opcodes_1.OpcodesCommon.OP_NOTIF]: exports.opNotIf(flags),
    [opcodes_1.OpcodesCommon.OP_VERIF]: exports.reservedOperation(),
    [opcodes_1.OpcodesCommon.OP_VERNOTIF]: exports.reservedOperation(),
    [opcodes_1.OpcodesCommon.OP_ELSE]: exports.opElse(),
    [opcodes_1.OpcodesCommon.OP_ENDIF]: exports.opEndIf(),
});
//# sourceMappingURL=flow-control.js.map