"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable functional/no-expression-statement */
const ava_1 = __importDefault(require("ava"));
const lib_1 = require("../../lib");
const compiler_bch_e2e_spec_helper_1 = require("./compiler-bch.e2e.spec.helper");
ava_1.default('[BCH compiler] language ‚Äì empty script', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '', {}, { bytecode: lib_1.hexToBin(''), success: true });
ava_1.default('[BCH compiler] language ‚Äì compile BigIntLiterals to script numbers', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '42 -42 2_147_483_647 -2_147_483_647', {}, { bytecode: lib_1.hexToBin('2aaaffffff7fffffffff'), success: true });
ava_1.default('[BCH compiler] language ‚Äì compile BinaryLiterals to script numbers', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '0b1 0b1111_1111 0b111 0b1111_1111__1111_1111__1111_1111__1111_1111____1111_1111__1111_1111__1111_1111__1111_1111_1', {}, { bytecode: lib_1.hexToBin('01ff0007ffffffffffffffff01'), success: true });
ava_1.default("[BCH compiler] language ‚Äì compile UTF8Literal (')", compiler_bch_e2e_spec_helper_1.expectCompilationResult, "'abc\"`üëç'", {}, { bytecode: lib_1.hexToBin('6162632260f09f918d'), success: true });
ava_1.default('[BCH compiler] language ‚Äì compile UTF8Literal (")', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '"abc\'`üëç"', {}, { bytecode: lib_1.hexToBin('6162632760f09f918d'), success: true });
ava_1.default('[BCH compiler] language ‚Äì compile HexLiteral', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '0xdead__beef', {}, { bytecode: lib_1.hexToBin('deadbeef'), success: true });
ava_1.default('[BCH compiler] language ‚Äì compile opcodes', compiler_bch_e2e_spec_helper_1.expectCompilationResult, 'OP_0 OP_1 OP_ADD', {}, { bytecode: lib_1.hexToBin('005193'), success: true });
ava_1.default('[BCH compiler] language ‚Äì comments', compiler_bch_e2e_spec_helper_1.expectCompilationResult, `// a comment
  0xab
  // another comment
  0xcd
  /**
   * A third, multi-line
   * comment
   */
  0xef
  `, {}, { bytecode: lib_1.hexToBin('abcdef'), success: true });
ava_1.default('[BCH compiler] language ‚Äì empty push (push an empty byte array, i.e. OP_0)', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<>', {}, { bytecode: lib_1.hexToBin('00'), success: true });
ava_1.default('[BCH compiler] language ‚Äì minimize BigIntLiteral pushes', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '< -1 > <0> <1> <2> <3> <4> <5> <6> <7> <8> <9> <10> <11> <12> <13> <14> <15> <16> <17>', {}, {
    bytecode: lib_1.hexToBin('4f005152535455565758595a5b5c5d5e5f600111'),
    success: true,
});
ava_1.default('[BCH compiler] language ‚Äì minimize HexLiteral pushes', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<0x81> <> <0x01> <0x02> <0x03> <0x04> <0x05> <0x06> <0x07> <0x08> <0x09> <0x0a> <0x0b> <0x0c> <0x0d> <0x0e> <0x0f> <0x10> <0x11>', {}, {
    bytecode: lib_1.hexToBin('4f005152535455565758595a5b5c5d5e5f600111'),
    success: true,
});
ava_1.default("[BCH compiler] language ‚Äì don't minimize <0x00>", compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<0x00>', {}, {
    bytecode: lib_1.hexToBin('0100'),
    success: true,
});
ava_1.default('[BCH compiler] language ‚Äì push UTF8Literal', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<"abc">', {}, {
    bytecode: lib_1.hexToBin('03616263'),
    success: true,
});
ava_1.default('[BCH compiler] language ‚Äì push opcodes', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<OP_0> <OP_1> <OP_2>', {}, {
    bytecode: lib_1.hexToBin('010001510152'),
    success: true,
});
ava_1.default('[BCH compiler] language ‚Äì nested pushes (center minimized to OP_1)', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<<<<1>>>>', {}, {
    bytecode: lib_1.hexToBin('03020151'),
    success: true,
});
ava_1.default('[BCH compiler] language ‚Äì complex script', compiler_bch_e2e_spec_helper_1.expectCompilationResult, `
// there are plenty of ways to push 0/call OP_0
<0> OP_0 0x00 <''> <$(OP_0)> <$(< -1 > < 1 > OP_ADD)>
/**
 * A multi-line comment üöÄ
 * Followed by some UTF8Literals
 */
'abc' "'üßô'"
// a comment at the end
`, {}, {
    bytecode: lib_1.hexToBin('00000000000061626327f09fa79927'),
    success: true,
});
ava_1.default('[BCH compiler] language ‚Äì compiles internal scripts', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '', {}, {
    bytecode: lib_1.hexToBin('123456'),
    success: true,
}, {}, {
    scripts: {
        a: 'b',
        b: 'c',
        c: '0x123456',
        test: 'a',
    },
});
ava_1.default('[BCH compiler] language ‚Äì error on cyclical compilations', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '', {}, {
    errorType: 'resolve',
    errors: [
        {
            error: 'Compilation error in resolved script "a": [2, 2] Compilation error in resolved script "b": [3, 3] Compilation error in resolved script "c": [2, 4] Compilation error in resolved script "a": [0, 0] A circular dependency was encountered: script "a" relies on itself to be generated. (Source scripts: test ‚Üí a ‚Üí b ‚Üí c); [2, 4] Compilation error in resolved script "c": [2, 4] Compilation error in resolved script "a": [0, 0] A circular dependency was encountered: script "a" relies on itself to be generated. (Source scripts: test ‚Üí a ‚Üí c)',
            range: {
                endColumn: 2,
                endLineNumber: 2,
                startColumn: 1,
                startLineNumber: 2,
            },
        },
    ],
    success: false,
}, {}, {
    scripts: {
        a: ' \n b c',
        b: '  \n\n  c',
        c: '   \n   a',
        test: '\na',
    },
});
//# sourceMappingURL=compiler-bch.e2e.langauge.spec.js.map