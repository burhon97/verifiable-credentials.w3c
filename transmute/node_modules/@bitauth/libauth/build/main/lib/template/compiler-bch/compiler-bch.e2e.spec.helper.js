"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.expectCompilationResult = exports.privkey = exports.hdPublicKey = exports.hdPrivateKey = void 0;
const lib_1 = require("../../lib");
/**
 * `m`
 */
exports.hdPrivateKey = 'xprv9s21ZrQH143K2PfMvkNViFc1fgumGqBew45JD8SxA59Jc5M66n3diqb92JjvaR61zT9P89Grys12kdtV4EFVo6tMwER7U2hcUmZ9VfMYPLC';
/**
 * `m`
 */
exports.hdPublicKey = 'xpub661MyMwAqRbcEsjq2muW5PYkDikFgHuWJGzu1WrZiQgHUsgEeKMtGducsZe1iRsGAGNGDzmWYDM69ya24LMyR7mDhtzqQsc286XEQfM2kkV';
/**
 * `m/0`
 */
// prettier-ignore
exports.privkey = new Uint8Array([0xf8, 0x5d, 0x4b, 0xd8, 0xa0, 0x3c, 0xa1, 0x06, 0xc9, 0xde, 0xb4, 0x7b, 0x79, 0x18, 0x03, 0xda, 0xc7, 0xf0, 0x33, 0x38, 0x09, 0xe3, 0xf1, 0xdd, 0x04, 0xd1, 0x82, 0xe0, 0xab, 0xa6, 0xe5, 0x53]);
const ripemd160Promise = lib_1.instantiateRipemd160();
const sha256Promise = lib_1.instantiateSha256();
const sha512Promise = lib_1.instantiateSha512();
const secp256k1Promise = lib_1.instantiateSecp256k1();
const vmPromise = lib_1.instantiateVirtualMachineBCH(lib_1.instructionSetBCHCurrentStrict);
/**
 * Uses `createCompiler` rather than `createCompilerBCH` for performance.
 */
exports.expectCompilationResult = async (t, testScript, otherData, expectedResult, variables, environmentOverrides
// eslint-disable-next-line max-params
) => {
    const ripemd160 = await ripemd160Promise;
    const sha256 = await sha256Promise;
    const sha512 = await sha512Promise;
    const secp256k1 = await secp256k1Promise;
    const vm = await vmPromise;
    const compiler = lib_1.createCompiler(Object.assign({ createAuthenticationProgram: lib_1.createAuthenticationProgramEvaluationCommon, entityOwnership: {
            one: 'ownerEntityOne',
            owner: 'ownerEntityId',
            two: 'ownerEntityTwo',
        }, opcodes: lib_1.generateBytecodeMap(lib_1.OpcodesBCH), operations: lib_1.compilerOperationsBCH, ripemd160, scripts: {
            another: '0xabcdef',
            broken: 'does_not_exist',
            lock: '',
            test: testScript,
        }, secp256k1,
        sha256,
        sha512, unlockingScripts: {
            test: 'lock',
        }, variables,
        vm }, environmentOverrides));
    const resultUnlock = compiler.generateBytecode('test', Object.assign({ transactionContext: lib_1.createTransactionContextCommonTesting() }, otherData));
    t.deepEqual(resultUnlock, expectedResult, `â€“ \nResult: ${lib_1.stringifyTestVector(resultUnlock)}\n\nExpected:\n ${lib_1.stringifyTestVector(expectedResult)}\n`);
};
//# sourceMappingURL=compiler-bch.e2e.spec.helper.js.map