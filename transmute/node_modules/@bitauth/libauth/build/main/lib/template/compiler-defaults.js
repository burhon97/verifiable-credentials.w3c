"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompilerDefaults = void 0;
var CompilerDefaults;
(function (CompilerDefaults) {
    /**
     * The `addressIndex` used by default scenarios.
     */
    CompilerDefaults[CompilerDefaults["defaultScenarioAddressIndex"] = 0] = "defaultScenarioAddressIndex";
    /**
     *
     * The value of `currentBlockHeight` in the default authentication template
     * scenario. This is the height of the second mined block after the genesis
     * block: `000000006a625f06636b8bb6ac7b960a8d03705d1ace08b1a19da3fdcc99ddbd`.
     *
     * This default value was chosen to be low enough to simplify the debugging of
     * block height offsets while remaining differentiated from `0` and `1` which
     * are used both as boolean return values and for control flow.
     */
    CompilerDefaults[CompilerDefaults["defaultScenarioCurrentBlockHeight"] = 2] = "defaultScenarioCurrentBlockHeight";
    /**
     * The value of `currentBlockTime` in the default authentication template
     * scenario. This is the Median Time-Past block time (BIP113) of block `2`
     * (the block used in `defaultScenarioCurrentBlockHeight`).
     */
    CompilerDefaults[CompilerDefaults["defaultScenarioCurrentBlockTime"] = 1231469665] = "defaultScenarioCurrentBlockTime";
    /**
     * The default `outpointIndex` of inputs in scenarios.
     */
    CompilerDefaults[CompilerDefaults["defaultScenarioInputOutpointIndex"] = 0] = "defaultScenarioInputOutpointIndex";
    /**
     * The default `outpointTransactionHash` of inputs in scenarios.
     */
    CompilerDefaults["defaultScenarioInputOutpointTransactionHash"] = "0000000000000000000000000000000000000000000000000000000000000000";
    /**
     * The default `sequenceNumber` of inputs in scenarios.
     */
    CompilerDefaults[CompilerDefaults["defaultScenarioInputSequenceNumber"] = 0] = "defaultScenarioInputSequenceNumber";
    /**
     * The default `unlockingBytecode` of untested inputs in scenarios.
     */
    CompilerDefaults["defaultScenarioInputUnlockingBytecodeHex"] = "";
    /**
     * The default `satoshis` of outputs in scenarios.
     */
    CompilerDefaults[CompilerDefaults["defaultScenarioOutputSatoshis"] = 0] = "defaultScenarioOutputSatoshis";
    /**
     * The hexadecimal-encoded value of the `lockingBytecode` in the single
     * default output (`transaction.outputs`) of the default authentication
     * template scenario.
     */
    CompilerDefaults["defaultScenarioTransactionOutputsLockingBytecodeHex"] = "";
    /**
     * The value of `transaction.locktime` in the default authentication template
     * scenario.
     */
    CompilerDefaults[CompilerDefaults["defaultScenarioTransactionLocktime"] = 0] = "defaultScenarioTransactionLocktime";
    /**
     * The value of `transaction.version` in the default authentication template
     * scenario. Transaction version `2` enables `OP_CHECKSEQUENCEVERIFY` as
     * described in BIP68, BIP112, and BIP113.
     */
    CompilerDefaults[CompilerDefaults["defaultScenarioTransactionVersion"] = 2] = "defaultScenarioTransactionVersion";
    /**
     * The default value of the hypothetical UTXO being spent by the input under
     * test in a scenario.
     */
    CompilerDefaults[CompilerDefaults["defaultScenarioValue"] = 0] = "defaultScenarioValue";
    /**
     * If unset, each `HdKey` uses this `addressOffset`.
     */
    CompilerDefaults[CompilerDefaults["hdKeyAddressOffset"] = 0] = "hdKeyAddressOffset";
    /**
     * If unset, each `HdKey` uses this `hdPublicKeyDerivationPath`.
     */
    CompilerDefaults["hdKeyHdPublicKeyDerivationPath"] = "m";
    /**
     * If unset, each `HdKey` uses this `privateDerivationPath`.
     */
    CompilerDefaults["hdKeyPrivateDerivationPath"] = "m/i";
    /**
     * The prefix used to refer to other scenario bytecode scripts from within a
     * bytecode script. See `AuthenticationTemplateScenarioData.bytecode` for
     * details.
     */
    CompilerDefaults["scenarioBytecodeScriptPrefix"] = "_scenario_";
    /**
     * The prefix used to identify the `check` script from a virtualized
     * `AuthenticationTemplateScriptTest`. For details, see
     * `authenticationTemplateToCompilationEnvironmentVirtualizedTests`.
     */
    CompilerDefaults["virtualizedTestCheckScriptPrefix"] = "__virtualized_test_check_";
    /**
     * The prefix used to identify the concatenated tested and `check` script from
     * a virtualized `AuthenticationTemplateScriptTest`. For details, see
     * `authenticationTemplateToCompilationEnvironmentVirtualizedTests`.
     */
    CompilerDefaults["virtualizedTestLockingScriptPrefix"] = "__virtualized_test_lock_";
    /**
     * The prefix used to identify the `setup` script from a virtualized
     * `AuthenticationTemplateScriptTest`. For details, see
     * `authenticationTemplateToCompilationEnvironmentVirtualizedTests`.
     */
    CompilerDefaults["virtualizedTestUnlockingScriptPrefix"] = "__virtualized_test_unlock_";
})(CompilerDefaults = exports.CompilerDefaults || (exports.CompilerDefaults = {}));
//# sourceMappingURL=compiler-defaults.js.map