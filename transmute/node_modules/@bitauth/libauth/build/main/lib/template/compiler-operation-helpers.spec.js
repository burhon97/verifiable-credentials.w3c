"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable functional/no-expression-statement */
const ava_1 = __importDefault(require("ava"));
const lib_1 = require("../lib");
ava_1.default('attemptCompilerOperations: can skip environment property check', (t) => {
    t.deepEqual(lib_1.compilerOperationRequires({
        canBeSkipped: true,
        dataProperties: [],
        environmentProperties: ['entityOwnership'],
        operation: () => ({ error: 'test failed', status: 'error' }),
    })('', {}, { scripts: {} }), { status: 'skip' });
});
ava_1.default('compilerOperationHelperGenerateCoveredBytecode: empty sourceScriptIds', (t) => {
    const result = lib_1.compilerOperationHelperGenerateCoveredBytecode({
        data: {},
        environment: { scripts: {} },
        identifier: 'test',
        sourceScriptIds: [],
        unlockingScripts: {},
    });
    t.deepEqual(result, {
        error: 'Identifier "test" requires a signing serialization, but "coveredBytecode" cannot be determined because the compilation environment\'s "sourceScriptIds" is empty.',
        status: 'error',
    }, lib_1.stringifyTestVector(result));
});
//# sourceMappingURL=compiler-operation-helpers.spec.js.map