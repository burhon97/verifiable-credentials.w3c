"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable functional/no-expression-statement */
const ava_1 = __importDefault(require("ava"));
const lib_1 = require("../../lib");
ava_1.default('compilerOperationSigningSerializationFullBCH: requires an algorithm', (t) => {
    t.deepEqual(lib_1.compilerOperationSigningSerializationFullBCH('', { transactionContext: {} }, {
        scripts: { lock: '' },
        sha256: { hash: () => Uint8Array.of() },
        sourceScriptIds: ['test'],
        unlockingScripts: { test: 'lock' },
    }), {
        error: 'Invalid signing serialization operation. Include the desired component or algorithm, e.g. "signing_serialization.version".',
        status: 'error',
    });
});
ava_1.default('compilerOperationSigningSerializationFullBCH: error on unknown algorithms', (t) => {
    t.deepEqual(lib_1.compilerOperationSigningSerializationFullBCH('signing_serialization.full_unknown_serialization', { transactionContext: {} }, {
        scripts: { lock: '' },
        sha256: { hash: () => Uint8Array.of() },
        sourceScriptIds: ['test'],
        unlockingScripts: { test: 'lock' },
    }), {
        error: 'Unknown signing serialization algorithm, "full_unknown_serialization".',
        status: 'error',
    });
});
//# sourceMappingURL=compiler-bch-operations.spec.js.map