import { AuthenticationVirtualMachine } from '../../vm/virtual-machine';
import { AuthenticationProgramStateExecutionStack, AuthenticationProgramStateMinimum, AuthenticationProgramStateStack } from '../../vm/vm-types';
import { CompilationData, CompilationEnvironment } from '../compiler-types';
import { CompilationResult, CompilationResultSuccess } from './language-types';
/**
 * A text-formatting method to pretty-print the list of expected inputs
 * (`Encountered unexpected input while parsing script. Expected ...`). If
 * present, the `EOF` expectation is always moved to the end of the list.
 * @param expectedArray - the alphabetized list of expected inputs produced by
 * `parseScript`
 */
export declare const describeExpectedInput: (expectedArray: string[]) => string;
/**
 * This method is generally for internal use. The `compileScript` method is the
 * recommended API for direct compilation.
 */
export declare const compileScriptContents: <ProgramState extends AuthenticationProgramStateStack<Uint8Array> & AuthenticationProgramStateExecutionStack = AuthenticationProgramStateStack<Uint8Array> & AuthenticationProgramStateExecutionStack, TransactionContext = unknown>({ data, environment, script, }: {
    script: string;
    data: CompilationData<TransactionContext>;
    environment: CompilationEnvironment<TransactionContext, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>;
}) => CompilationResult<ProgramState>;
/**
 * This method is generally for internal use. The `compileScript` method is the
 * recommended API for direct compilation.
 */
export declare const compileScriptRaw: <ProgramState extends AuthenticationProgramStateStack<Uint8Array> & AuthenticationProgramStateExecutionStack & AuthenticationProgramStateMinimum<number> = AuthenticationProgramStateStack<Uint8Array> & AuthenticationProgramStateExecutionStack & AuthenticationProgramStateMinimum<number>, TransactionContext = unknown>({ data, environment, scriptId, }: {
    data: CompilationData<TransactionContext>;
    environment: CompilationEnvironment<TransactionContext, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>;
    scriptId: string;
}) => CompilationResult<ProgramState>;
export declare const compileScriptP2shLocking: <AuthenticationProgram, ProgramState>({ lockingBytecode, vm, }: {
    lockingBytecode: Uint8Array;
    vm: AuthenticationVirtualMachine<AuthenticationProgram, ProgramState> | undefined;
}) => import("./language-types").CompilationResultParseError | import("./language-types").CompilationResultResolveError | {
    bytecode: Uint8Array;
    success: true;
} | import("./language-types").CompilationResultReduceError<import("../../vm/vm-types").AuthenticationProgramStateCommon<import("../../lib").OpcodesCommon, import("../../lib").AuthenticationErrorCommon>> | CompilationResultSuccess<import("../../vm/vm-types").AuthenticationProgramStateCommon<import("../../lib").OpcodesCommon, import("../../lib").AuthenticationErrorCommon>>;
export declare const compileScriptP2shUnlocking: <ProgramState>({ lockingBytecode, unlockingBytecode, }: {
    lockingBytecode: Uint8Array;
    unlockingBytecode: Uint8Array;
}) => CompilationResultSuccess<ProgramState>;
/**
 * Parse, resolve, and reduce the selected script using the provided `data` and
 * `environment`.
 *
 * Note, locktime validation only occurs if `transactionContext` is provided in
 * the environment.
 */
export declare const compileScript: <ProgramState extends AuthenticationProgramStateStack<Uint8Array> & AuthenticationProgramStateExecutionStack & AuthenticationProgramStateMinimum<number> = AuthenticationProgramStateStack<Uint8Array> & AuthenticationProgramStateExecutionStack & AuthenticationProgramStateMinimum<number>, TransactionContext extends {
    locktime: number;
    sequenceNumber: number;
} = {
    locktime: number;
    sequenceNumber: number;
}>(scriptId: string, data: CompilationData<TransactionContext>, environment: CompilationEnvironment<TransactionContext, import("../compiler-types").CompilerOperationsKeysCommon, import("../compiler-types").CompilerOperationsSigningSerializationCommon, false, false, false, false>) => CompilationResult<ProgramState>;
//# sourceMappingURL=compile.d.ts.map