"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable functional/no-expression-statement */
const ava_1 = __importDefault(require("ava"));
const lib_1 = require("../../lib");
ava_1.default('reduceScript: does not throw on empty array', (t) => {
    const reduced = lib_1.reduceScript([]);
    t.deepEqual(reduced, {
        bytecode: Uint8Array.of(),
        range: {
            endColumn: 0,
            endLineNumber: 0,
            startColumn: 0,
            startLineNumber: 0,
        },
        script: [],
    }, lib_1.stringify(reduced));
});
ava_1.default('reduceScript: resolution error', (t) => {
    const reduced = lib_1.reduceScript([
        {
            range: {
                endColumn: 8,
                endLineNumber: 1,
                startColumn: 1,
                startLineNumber: 1,
            },
            type: 'error',
            value: 'Unknown identifier "unknown".',
        },
    ]);
    t.deepEqual(reduced, {
        bytecode: Uint8Array.of(),
        errors: [
            {
                error: 'Tried to reduce a BTL script with resolution errors: Unknown identifier "unknown".',
                range: {
                    endColumn: 8,
                    endLineNumber: 1,
                    startColumn: 1,
                    startLineNumber: 1,
                },
            },
        ],
        range: {
            endColumn: 8,
            endLineNumber: 1,
            startColumn: 1,
            startLineNumber: 1,
        },
        script: [
            {
                bytecode: Uint8Array.of(),
                errors: [
                    {
                        error: 'Tried to reduce a BTL script with resolution errors: Unknown identifier "unknown".',
                        range: {
                            endColumn: 8,
                            endLineNumber: 1,
                            startColumn: 1,
                            startLineNumber: 1,
                        },
                    },
                ],
                range: {
                    endColumn: 8,
                    endLineNumber: 1,
                    startColumn: 1,
                    startLineNumber: 1,
                },
            },
        ],
    }, lib_1.stringify(reduced));
});
ava_1.default('reduceScript: invalid ResolvedScript', (t) => {
    t.throws(() => lib_1.reduceScript([
        {
            range: {
                endColumn: 2,
                endLineNumber: 1,
                startColumn: 1,
                startLineNumber: 1,
            },
            type: "uncaught because the consumer isn't using TypeScript",
            value: 'Another kind of value',
        },
    ]));
});
//# sourceMappingURL=reduce.spec.js.map