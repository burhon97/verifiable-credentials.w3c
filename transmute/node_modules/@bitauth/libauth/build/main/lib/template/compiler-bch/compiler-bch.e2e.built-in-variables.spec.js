"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable functional/no-expression-statement */
const ava_1 = __importDefault(require("ava"));
const lib_1 = require("../../lib");
const compiler_bch_e2e_spec_helper_1 = require("./compiler-bch.e2e.spec.helper");
ava_1.default('[BCH compiler] built-in variables – current_block_time - error', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<current_block_time>', {}, {
    errorType: 'resolve',
    errors: [
        {
            error: 'Cannot resolve "current_block_time" – the "currentBlockTime" property was not provided in the compilation data.',
            range: {
                endColumn: 20,
                endLineNumber: 1,
                startColumn: 2,
                startLineNumber: 1,
            },
        },
    ],
    success: false,
});
ava_1.default('[BCH compiler] built-in variables – current_block_time', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<current_block_time>', {
    currentBlockTime: lib_1.dateToLocktime(new Date('2019-10-13T00:00:00.000Z')),
}, { bytecode: lib_1.hexToBin('040069a25d'), success: true });
ava_1.default('[BCH compiler] built-in variables – current_block_height - error', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<current_block_height>', {}, {
    errorType: 'resolve',
    errors: [
        {
            error: 'Cannot resolve "current_block_height" – the "currentBlockHeight" property was not provided in the compilation data.',
            range: {
                endColumn: 22,
                endLineNumber: 1,
                startColumn: 2,
                startLineNumber: 1,
            },
        },
    ],
    success: false,
});
ava_1.default('[BCH compiler] built-in variables – current_block_height', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<current_block_height>', { currentBlockHeight: 1 }, { bytecode: lib_1.hexToBin('51'), success: true });
ava_1.default('[BCH compiler] timeLockType – requires a height-based locktime', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '', {
    transactionContext: Object.assign(Object.assign({}, lib_1.createTransactionContextCommonTesting()), { locktime: 500000000 }),
}, {
    errorType: 'parse',
    errors: [
        {
            error: 'The script "test" requires a height-based locktime (less than 500,000,000), but this transaction uses a timestamp-based locktime ("500000000").',
            range: {
                endColumn: 0,
                endLineNumber: 0,
                startColumn: 0,
                startLineNumber: 0,
            },
        },
    ],
    success: false,
}, {}, { unlockingScriptTimeLockTypes: { test: 'height' } });
ava_1.default('[BCH compiler] timeLockType – requires a timestamp-based locktime', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '', {
    transactionContext: Object.assign(Object.assign({}, lib_1.createTransactionContextCommonTesting()), { locktime: 0 }),
}, {
    errorType: 'parse',
    errors: [
        {
            error: 'The script "test" requires a timestamp-based locktime (greater than or equal to 500,000,000), but this transaction uses a height-based locktime ("0").',
            range: {
                endColumn: 0,
                endLineNumber: 0,
                startColumn: 0,
                startLineNumber: 0,
            },
        },
    ],
    success: false,
}, {}, { unlockingScriptTimeLockTypes: { test: 'timestamp' } });
ava_1.default('[BCH compiler] timeLockType – locktime disabled by sequenceNumber', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '', {
    transactionContext: Object.assign(Object.assign({}, lib_1.createTransactionContextCommonTesting()), { sequenceNumber: 0xffffffff }),
}, {
    errorType: 'parse',
    errors: [
        {
            error: 'The script "test" requires a locktime, but this input\'s sequence number is set to disable transaction locktime (0xffffffff). This will cause the OP_CHECKLOCKTIMEVERIFY operation to error when the transaction is verified. To be valid, this input must use a sequence number which does not disable locktime.',
            range: {
                endColumn: 0,
                endLineNumber: 0,
                startColumn: 0,
                startLineNumber: 0,
            },
        },
    ],
    success: false,
}, {}, { unlockingScriptTimeLockTypes: { test: 'height' } });
ava_1.default('[BCH compiler] built-in variables – signing_serialization.full_all_outputs - error', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<signing_serialization.full_all_outputs>', { transactionContext: undefined }, {
    errorType: 'resolve',
    errors: [
        {
            error: 'Cannot resolve "signing_serialization.full_all_outputs" – the "transactionContext" property was not provided in the compilation data.',
            range: {
                endColumn: 40,
                endLineNumber: 1,
                startColumn: 2,
                startLineNumber: 1,
            },
        },
    ],
    success: false,
});
ava_1.default('[BCH compiler] built-in variables – signing_serialization - no component or algorithm', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<signing_serialization>', { transactionContext: undefined }, {
    errorType: 'resolve',
    errors: [
        {
            error: 'This "signing_serialization" variable could not be resolved because this compiler\'s "signingSerialization" operations require an operation identifier, e.g. \'signing_serialization.version\'.',
            range: {
                endColumn: 23,
                endLineNumber: 1,
                startColumn: 2,
                startLineNumber: 1,
            },
        },
    ],
    success: false,
});
/**
 * While this can't work in a locking or unlocking script (a transaction may
 * have only one locktime value, and OP_CHECKLOCKTIMEVERIFY must test against
 * the same type), this must still be supported by the compiler for use cases
 * such as attestation (for data signatures).
 */
ava_1.default('[BCH compiler] built-in variables – current_block_height and current_block_time', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<current_block_height> <current_block_time>', {
    currentBlockHeight: 1,
    currentBlockTime: lib_1.dateToLocktime(new Date('2019-10-13T00:00:00.000Z')),
}, { bytecode: lib_1.hexToBin('51040069a25d'), success: true });
ava_1.default('[BCH compiler] errors – multiple reduction errors', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<current_block_height> <current_block_time>', {}, {
    errorType: 'resolve',
    errors: [
        {
            error: 'Cannot resolve "current_block_height" – the "currentBlockHeight" property was not provided in the compilation data.',
            range: {
                endColumn: 22,
                endLineNumber: 1,
                startColumn: 2,
                startLineNumber: 1,
            },
        },
        {
            error: 'Cannot resolve "current_block_time" – the "currentBlockTime" property was not provided in the compilation data.',
            range: {
                endColumn: 43,
                endLineNumber: 1,
                startColumn: 25,
                startLineNumber: 1,
            },
        },
    ],
    success: false,
});
ava_1.default('[BCH compiler] built-in variables – signing_serialization - error', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<signing_serialization>', { transactionContext: undefined }, {
    errorType: 'resolve',
    errors: [
        {
            error: 'This "signing_serialization" variable could not be resolved because this compiler\'s "signingSerialization" operations require an operation identifier, e.g. \'signing_serialization.version\'.',
            range: {
                endColumn: 23,
                endLineNumber: 1,
                startColumn: 2,
                startLineNumber: 1,
            },
        },
    ],
    success: false,
});
ava_1.default('[BCH compiler] built-in variables – signing_serialization.full_all_outputs', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<signing_serialization.full_all_outputs>', {}, {
    bytecode: lib_1.hexToBin('4c9d000000001cc3adea40ebfd94433ac004777d68150cce9db4c771bc7de1b297a7b795bbba214e63bf41490e67d34476778f6707aa6c8d2c8dccdf78ae11e40ee9f91e89a705050505050505050505050505050505050505050505050505050505050505050000000000000000000000000000000000c942a06c127c2c18022677e888020afb174208d299354f3ecfedb124a1f3fa450000000041000000'),
    success: true,
});
ava_1.default('[BCH compiler] built-in variables – signing_serialization.full_all_outputs_single_input', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<signing_serialization.full_all_outputs_single_input>', {}, {
    bytecode: lib_1.hexToBin('4c9d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005050505050505050505050505050505050505050505050505050505050505050000000000000000000000000000000000c942a06c127c2c18022677e888020afb174208d299354f3ecfedb124a1f3fa4500000000c1000000'),
    success: true,
});
ava_1.default('[BCH compiler] built-in variables – signing_serialization.full_corresponding_output', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<signing_serialization.full_corresponding_output>', {}, {
    bytecode: lib_1.hexToBin('4c9d000000001cc3adea40ebfd94433ac004777d68150cce9db4c771bc7de1b297a7b795bbba0000000000000000000000000000000000000000000000000000000000000000050505050505050505050505050505050505050505050505050505050505050500000000000000000000000000000000009c12cfdc04c74584d787ac3d23772132c18524bc7ab28dec4219b8fc5b425f700000000043000000'),
    success: true,
});
ava_1.default('[BCH compiler] built-in variables – signing_serialization.full_corresponding_output_single_input', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<signing_serialization.full_corresponding_output_single_input>', {}, {
    bytecode: lib_1.hexToBin('4c9d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050505050505050505050505050505050505050505050505050505050505050500000000000000000000000000000000009c12cfdc04c74584d787ac3d23772132c18524bc7ab28dec4219b8fc5b425f7000000000c3000000'),
    success: true,
});
ava_1.default('[BCH compiler] built-in variables – signing_serialization.full_no_outputs', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<signing_serialization.full_no_outputs>', {}, {
    bytecode: lib_1.hexToBin('4c9d000000001cc3adea40ebfd94433ac004777d68150cce9db4c771bc7de1b297a7b795bbba00000000000000000000000000000000000000000000000000000000000000000505050505050505050505050505050505050505050505050505050505050505000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000042000000'),
    success: true,
});
ava_1.default('[BCH compiler] built-in variables – signing_serialization.full_no_outputs_single_input', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<signing_serialization.full_no_outputs_single_input>', {}, {
    bytecode: lib_1.hexToBin('4c9d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005050505050505050505050505050505050505050505050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c2000000'),
    success: true,
});
ava_1.default('[BCH compiler] built-in variables – signing_serialization.corresponding_output', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<signing_serialization.corresponding_output>', {}, {
    bytecode: lib_1.hexToBin('51'),
    success: true,
});
ava_1.default('[BCH compiler] built-in variables – signing_serialization.corresponding_output_hash', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<signing_serialization.corresponding_output_hash>', {}, {
    bytecode: lib_1.hexToBin('209c12cfdc04c74584d787ac3d23772132c18524bc7ab28dec4219b8fc5b425f70'),
    success: true,
});
ava_1.default('[BCH compiler] built-in variables – signing_serialization.covered_bytecode_length', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<signing_serialization.covered_bytecode_length>', {}, {
    bytecode: lib_1.hexToBin('0100'),
    success: true,
});
ava_1.default('[BCH compiler] built-in variables – signing_serialization.covered_bytecode', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<signing_serialization.covered_bytecode>', {}, {
    bytecode: lib_1.hexToBin('00'),
    success: true,
});
ava_1.default('[BCH compiler] built-in variables – signing_serialization.locktime', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<signing_serialization.locktime>', {}, {
    bytecode: lib_1.hexToBin('0400000000'),
    success: true,
});
ava_1.default('[BCH compiler] built-in variables – signing_serialization.outpoint_index', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<signing_serialization.outpoint_index>', {}, {
    bytecode: lib_1.hexToBin('0400000000'),
    success: true,
});
ava_1.default('[BCH compiler] built-in variables – signing_serialization.outpoint_transaction_hash', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<signing_serialization.outpoint_transaction_hash>', {}, {
    bytecode: lib_1.hexToBin('200505050505050505050505050505050505050505050505050505050505050505'),
    success: true,
});
ava_1.default('[BCH compiler] built-in variables – signing_serialization.output_value', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<signing_serialization.output_value>', {}, {
    bytecode: lib_1.hexToBin('080000000000000000'),
    success: true,
});
ava_1.default('[BCH compiler] built-in variables – signing_serialization.sequence_number', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<signing_serialization.sequence_number>', {}, {
    bytecode: lib_1.hexToBin('0400000000'),
    success: true,
});
ava_1.default('[BCH compiler] built-in variables – signing_serialization.transaction_outpoints', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<signing_serialization.transaction_outpoints>', {}, {
    bytecode: lib_1.hexToBin('52'),
    success: true,
});
ava_1.default('[BCH compiler] built-in variables – signing_serialization.transaction_outpoints_hash', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<signing_serialization.transaction_outpoints_hash>', {}, {
    bytecode: lib_1.hexToBin('201cc3adea40ebfd94433ac004777d68150cce9db4c771bc7de1b297a7b795bbba'),
    success: true,
});
ava_1.default('[BCH compiler] built-in variables – signing_serialization.transaction_outputs', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<signing_serialization.transaction_outputs>', {}, {
    bytecode: lib_1.hexToBin('53'),
    success: true,
});
ava_1.default('[BCH compiler] built-in variables – signing_serialization.transaction_outputs_hash', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<signing_serialization.transaction_outputs_hash>', {}, {
    bytecode: lib_1.hexToBin('20c942a06c127c2c18022677e888020afb174208d299354f3ecfedb124a1f3fa45'),
    success: true,
});
ava_1.default('[BCH compiler] built-in variables – signing_serialization.transaction_sequence_numbers', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<signing_serialization.transaction_sequence_numbers>', {}, {
    bytecode: lib_1.hexToBin('54'),
    success: true,
});
ava_1.default('[BCH compiler] built-in variables – signing_serialization.transaction_sequence_numbers_hash', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<signing_serialization.transaction_sequence_numbers_hash>', {}, {
    bytecode: lib_1.hexToBin('20214e63bf41490e67d34476778f6707aa6c8d2c8dccdf78ae11e40ee9f91e89a7'),
    success: true,
});
ava_1.default('[BCH compiler] built-in variables – signing_serialization.version', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<signing_serialization.version>', {}, {
    bytecode: lib_1.hexToBin('0400000000'),
    success: true,
});
ava_1.default('[BCH compiler] built-in variables – signing_serialization.covered_bytecode - unlocking script not in unlockingScripts', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<signing_serialization.covered_bytecode>', {}, {
    errorType: 'resolve',
    errors: [
        {
            error: 'Identifier "signing_serialization.covered_bytecode" requires a signing serialization, but "coveredBytecode" cannot be determined because "test" is not present in the compilation environment "unlockingScripts".',
            range: {
                endColumn: 40,
                endLineNumber: 1,
                startColumn: 2,
                startLineNumber: 1,
            },
        },
    ],
    success: false,
}, {}, {
    unlockingScripts: {},
});
ava_1.default('[BCH compiler] built-in variables – signing_serialization.covered_bytecode - unknown covered script', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<signing_serialization.covered_bytecode>', {}, {
    errorType: 'resolve',
    errors: [
        {
            error: 'Identifier "signing_serialization.covered_bytecode" requires a signing serialization which covers an unknown locking script, "some_unknown_script".',
            range: {
                endColumn: 40,
                endLineNumber: 1,
                startColumn: 2,
                startLineNumber: 1,
            },
        },
    ],
    success: false,
}, {}, {
    unlockingScripts: {
        test: 'some_unknown_script',
    },
});
ava_1.default('[BCH compiler] built-in variables – signing_serialization.covered_bytecode - error in coveredBytecode compilation', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '', {}, {
    errorType: 'resolve',
    errors: [
        {
            error: 'Compilation error in resolved script "lock": [1, 1] Unknown identifier "invalid".',
            range: {
                endColumn: 40,
                endLineNumber: 1,
                startColumn: 2,
                startLineNumber: 1,
            },
        },
    ],
    success: false,
}, {}, {
    scripts: {
        lock: 'invalid',
        test: '<signing_serialization.full_all_outputs>',
    },
});
ava_1.default('[BCH compiler] built-in variables – signing_serialization.unknown', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<signing_serialization.unknown>', {}, {
    errorType: 'resolve',
    errors: [
        {
            error: 'The identifier "signing_serialization.unknown" could not be resolved because the "signing_serialization.unknown" operation is not available to this compiler.',
            range: {
                endColumn: 31,
                endLineNumber: 1,
                startColumn: 2,
                startLineNumber: 1,
            },
        },
    ],
    success: false,
});
ava_1.default('[BCH compiler] built-in variables – signing_serialization: unrecognized identifier fragment', compiler_bch_e2e_spec_helper_1.expectCompilationResult, '<signing_serialization.full_all_outputs.future_operation.with_more_levels>', {}, {
    errorType: 'resolve',
    errors: [
        {
            error: 'Unknown component in "signing_serialization.full_all_outputs.future_operation.with_more_levels" – the fragment "future_operation" is not recognized.',
            range: {
                endColumn: 74,
                endLineNumber: 1,
                startColumn: 2,
                startLineNumber: 1,
            },
        },
    ],
    success: false,
});
const sha256Promise = lib_1.instantiateSha256();
const vmPromise = lib_1.instantiateVirtualMachineBCH(lib_1.instructionSetBCHCurrentStrict);
ava_1.default('[BCH compiler] signing_serialization.corresponding_output and signing_serialization.corresponding_output_hash – returns empty bytecode if no corresponding output', async (t) => {
    const sha256 = await sha256Promise;
    const vm = await vmPromise;
    const compiler = lib_1.createCompiler({
        createAuthenticationProgram: lib_1.createAuthenticationProgramEvaluationCommon,
        opcodes: lib_1.generateBytecodeMap(lib_1.OpcodesBCH),
        operations: lib_1.compilerOperationsBCH,
        scripts: {
            // eslint-disable-next-line camelcase, @typescript-eslint/naming-convention
            corresponding_output: '<1> <signing_serialization.corresponding_output> <2>',
            // eslint-disable-next-line camelcase, @typescript-eslint/naming-convention
            corresponding_output_hash: '<1> <signing_serialization.corresponding_output_hash> <2>',
        },
        sha256,
        variables: {
            a: {
                type: 'Key',
            },
        },
        vm,
    });
    const data = {
        keys: { privateKeys: { a: compiler_bch_e2e_spec_helper_1.privkey } },
        transactionContext: Object.assign(Object.assign({}, lib_1.createTransactionContextCommonTesting()), {
            correspondingOutput: undefined,
        }),
    };
    t.deepEqual(compiler.generateBytecode('corresponding_output', data), {
        bytecode: lib_1.hexToBin('510052'),
        success: true,
    });
    t.deepEqual(compiler.generateBytecode('corresponding_output_hash', data), {
        bytecode: lib_1.hexToBin('510052'),
        success: true,
    });
});
//# sourceMappingURL=compiler-bch.e2e.built-in-variables.spec.js.map