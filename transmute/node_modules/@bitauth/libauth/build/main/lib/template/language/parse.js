"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseScript = void 0;
const parsimmon_1 = require("./parsimmon");
/* eslint-disable sort-keys, @typescript-eslint/naming-convention, @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access */
const authenticationScriptParser = parsimmon_1.P.createLanguage({
    script: (r) => parsimmon_1.P.seqMap(parsimmon_1.P.optWhitespace, r.expression.sepBy(parsimmon_1.P.optWhitespace), parsimmon_1.P.optWhitespace, (_, expressions) => expressions).node('Script'),
    expression: (r) => parsimmon_1.P.alt(r.comment, r.push, r.evaluation, r.utf8, r.binary, r.hex, r.bigint, r.identifier),
    comment: (r) => parsimmon_1.P.alt(r.singleLineComment, r.multiLineComment).node('Comment'),
    singleLineComment: () => parsimmon_1.P.seqMap(parsimmon_1.P.string('//').desc("the start of a single-line comment ('//')"), parsimmon_1.P.regexp(/[^\n]*/u), (__, comment) => comment.trim()),
    multiLineComment: () => parsimmon_1.P.seqMap(parsimmon_1.P.string('/*').desc("the start of a multi-line comment ('/*')"), parsimmon_1.P.regexp(/[\s\S]*?\*\//u).desc("the end of this multi-line comment ('*/')"), (__, comment) => comment.slice(0, -'*/'.length).trim()),
    push: (r) => parsimmon_1.P.seqMap(parsimmon_1.P.string('<').desc("the start of a push statement ('<')"), r.script, parsimmon_1.P.string('>').desc("the end of this push statement ('>')"), (_, push) => push).node('Push'),
    evaluation: (r) => parsimmon_1.P.seqMap(parsimmon_1.P.string('$').desc("the start of an evaluation ('$')"), parsimmon_1.P.string('(').desc("the opening parenthesis of this evaluation ('(')"), r.script, parsimmon_1.P.string(')').desc("the closing parenthesis of this evaluation (')')"), (_, __, evaluation) => evaluation).node('Evaluation'),
    identifier: () => parsimmon_1.P.regexp(/[a-zA-Z_][.a-zA-Z0-9_-]*/u)
        .desc('a valid identifier')
        .node('Identifier'),
    utf8: () => parsimmon_1.P.alt(parsimmon_1.P.seqMap(parsimmon_1.P.string('"').desc('a double quote (")'), parsimmon_1.P.regexp(/[^"]*/u), parsimmon_1.P.string('"').desc('a closing double quote (")'), (__, literal) => literal), parsimmon_1.P.seqMap(parsimmon_1.P.string("'").desc("a single quote (')"), parsimmon_1.P.regexp(/[^']*/u), parsimmon_1.P.string("'").desc("a closing single quote (')"), (__, literal) => literal)).node('UTF8Literal'),
    hex: () => parsimmon_1.P.seqMap(parsimmon_1.P.string('0x').desc("a hex literal ('0x...')"), parsimmon_1.P.regexp(/[0-9a-f]_*(?:_*[0-9a-f]_*[0-9a-f]_*)*[0-9a-f]/iu).desc('a valid hexadecimal string'), (__, literal) => literal).node('HexLiteral'),
    binary: () => parsimmon_1.P.seqMap(parsimmon_1.P.string('0b').desc("a binary literal ('0b...')"), parsimmon_1.P.regexp(/[01]+(?:[01_]*[01]+)*/iu).desc('a string of binary digits'), (__, literal) => literal).node('BinaryLiteral'),
    bigint: () => parsimmon_1.P.regexp(/-?[0-9]+(?:[0-9_]*[0-9]+)*/u)
        .desc('an integer literal')
        .node('BigIntLiteral'),
});
/* eslint-enable sort-keys, @typescript-eslint/naming-convention, @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access */
exports.parseScript = (script) => authenticationScriptParser.script.parse(script);
//# sourceMappingURL=parse.js.map