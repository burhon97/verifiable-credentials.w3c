"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable functional/no-expression-statement */
const ava_1 = __importDefault(require("ava"));
const lib_1 = require("../../lib");
ava_1.default('resolveScriptSegment: error on unrecognized parse results', (t) => {
    const segment = {
        end: {
            column: 24,
            line: 1,
            offset: 23,
        },
        name: 'Script',
        start: {
            column: 1,
            line: 1,
            offset: 0,
        },
        value: [
            {
                end: {
                    column: 24,
                    line: 1,
                    offset: 23,
                },
                name: 'Unknown',
                start: {
                    column: 1,
                    line: 1,
                    offset: 0,
                },
                value: 'unrecognized_expression',
            },
        ],
    };
    t.deepEqual(lib_1.resolveScriptSegment(segment, () => ({
        bytecode: Uint8Array.of(),
        status: true,
        type: lib_1.IdentifierResolutionType.variable,
    })), [
        {
            range: {
                endColumn: 24,
                endLineNumber: 1,
                startColumn: 1,
                startLineNumber: 1,
            },
            type: 'error',
            value: 'Unrecognized segment: Unknown',
        },
    ]);
});
ava_1.default('resolveScriptSegment: marks unknown identifier types', (t) => {
    const parseResult = lib_1.parseScript('some_identifier');
    if (!parseResult.status) {
        t.fail('Parse failed.');
        return;
    }
    const malformedResolver = () => ({
        bytecode: Uint8Array.of(),
        status: true,
        type: 'unknown-type',
    });
    const resolved = lib_1.resolveScriptSegment(parseResult.value, malformedResolver);
    t.deepEqual(resolved, [
        {
            range: {
                endColumn: 16,
                endLineNumber: 1,
                startColumn: 1,
                startLineNumber: 1,
            },
            type: 'bytecode',
            unknown: 'some_identifier',
            value: Uint8Array.of(),
        },
    ]);
});
//# sourceMappingURL=resolve.spec.js.map