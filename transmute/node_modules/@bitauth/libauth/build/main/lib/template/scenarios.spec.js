"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.expectScenarioGenerationResult = void 0;
/* eslint-disable functional/no-expression-statement, camelcase, max-lines, @typescript-eslint/naming-convention */
const ava_1 = __importDefault(require("ava"));
const lib_1 = require("../lib");
const transaction_e2e_spec_helper_1 = require("../transaction/transaction-e2e.spec.helper");
const sha256Promise = lib_1.instantiateSha256();
const sha512Promise = lib_1.instantiateSha512();
ava_1.default('generateDefaultScenarioDefinition: empty', (t) => {
    const scenario = lib_1.generateDefaultScenarioDefinition({ scripts: {} });
    t.deepEqual(scenario, {
        data: {
            currentBlockHeight: 2,
            currentBlockTime: 1231469665,
        },
        transaction: {
            inputs: [
                {
                    unlockingBytecode: null,
                },
            ],
            locktime: 0,
            outputs: [
                {
                    lockingBytecode: '',
                },
            ],
            version: 2,
        },
        value: 0,
    }, lib_1.stringifyTestVector(scenario));
});
ava_1.default('generateDefaultScenarioDefinition: missing sha256', async (t) => {
    const sha512 = await sha512Promise;
    const scenario = lib_1.generateDefaultScenarioDefinition({
        scripts: {},
        sha512,
        variables: {
            key: {
                description: 'The private key which controls this wallet.',
                name: 'Key',
                type: 'HdKey',
            },
        },
    });
    t.deepEqual(scenario, 'An implementations of "sha256" is required to generate defaults for HD keys, but the "sha256" property is not included in this compilation environment.', lib_1.stringifyTestVector(scenario));
});
ava_1.default('generateDefaultScenarioDefinition: missing sha512', async (t) => {
    const sha256 = await sha256Promise;
    const scenario = lib_1.generateDefaultScenarioDefinition({
        scripts: {},
        sha256,
        variables: {
            key: {
                description: 'The private key which controls this wallet.',
                name: 'Key',
                type: 'HdKey',
            },
        },
    });
    t.deepEqual(scenario, 'An implementations of "sha512" is required to generate defaults for HD keys, but the "sha512" property is not included in this compilation environment.', lib_1.stringifyTestVector(scenario));
});
ava_1.default('extendScenarioDefinitionData: empty', (t) => {
    const extended = lib_1.extendScenarioDefinitionData({}, {});
    t.deepEqual(extended, {}, lib_1.stringifyTestVector(extended));
});
ava_1.default('extendScenarioDefinitionData: 1', (t) => {
    const extended = lib_1.extendScenarioDefinitionData({ hdKeys: { hdPublicKeys: { b: '(hd public key)' } } }, { bytecode: { test: '<"abc">' } });
    t.deepEqual(extended, {
        bytecode: { test: '<"abc">' },
        hdKeys: { hdPublicKeys: { b: '(hd public key)' } },
    }, lib_1.stringifyTestVector(extended));
});
ava_1.default('extendScenarioDefinition: empty', (t) => {
    const extended = lib_1.extendScenarioDefinition({}, {});
    t.deepEqual(extended, {}, lib_1.stringifyTestVector(extended));
});
ava_1.default('extendScenarioDefinition: default', (t) => {
    const scenarioParent = lib_1.generateDefaultScenarioDefinition({
        scripts: {},
    });
    const extended = lib_1.extendScenarioDefinition(scenarioParent, {});
    t.deepEqual(extended, {
        data: {
            currentBlockHeight: 2,
            currentBlockTime: 1231469665,
        },
        transaction: {
            inputs: [
                {
                    unlockingBytecode: null,
                },
            ],
            locktime: 0,
            outputs: [
                {
                    lockingBytecode: '',
                },
            ],
            version: 2,
        },
        value: 0,
    }, lib_1.stringifyTestVector(extended));
});
ava_1.default('extendScenarioDefinition: complex extend', (t) => {
    const extended = lib_1.extendScenarioDefinition({
        transaction: {
            inputs: [
                {
                    unlockingBytecode: null,
                },
            ],
            locktime: 0,
            outputs: [
                {
                    lockingBytecode: '',
                },
            ],
            version: 2,
        },
        value: 'ffffffffffffffff',
    }, {
        data: {
            bytecode: {
                a: 'beef',
            },
            hdKeys: {
                addressIndex: 1,
                hdPrivateKeys: {
                    entity1: '(hd private key)',
                },
                hdPublicKeys: {
                    entity2: '(hd public key)',
                },
            },
            keys: {
                privateKeys: {
                    key: '(key)',
                },
            },
        },
        transaction: {},
    });
    t.deepEqual(extended, {
        data: {
            bytecode: {
                a: 'beef',
            },
            hdKeys: {
                addressIndex: 1,
                hdPrivateKeys: {
                    entity1: '(hd private key)',
                },
                hdPublicKeys: {
                    entity2: '(hd public key)',
                },
            },
            keys: {
                privateKeys: {
                    key: '(key)',
                },
            },
        },
        transaction: {
            inputs: [
                {
                    unlockingBytecode: null,
                },
            ],
            locktime: 0,
            outputs: [
                {
                    lockingBytecode: '',
                },
            ],
            version: 2,
        },
        value: 'ffffffffffffffff',
    }, lib_1.stringifyTestVector(extended));
});
ava_1.default('extendScenarioDefinition: complex extend (2)', (t) => {
    const extended = lib_1.extendScenarioDefinition({
        data: {
            bytecode: {
                a: 'beef',
            },
            hdKeys: {
                addressIndex: 1,
                hdPrivateKeys: {
                    entity1: '(hd private key)',
                },
                hdPublicKeys: {
                    entity2: '(hd public key)',
                },
            },
            keys: {
                privateKeys: {
                    key: '(key)',
                },
            },
        },
    }, {
        data: {
            currentBlockHeight: 2,
            currentBlockTime: 1231469665,
        },
        value: 'ffffffffffffffff',
    });
    t.deepEqual(extended, {
        data: {
            bytecode: {
                a: 'beef',
            },
            currentBlockHeight: 2,
            currentBlockTime: 1231469665,
            hdKeys: {
                addressIndex: 1,
                hdPrivateKeys: {
                    entity1: '(hd private key)',
                },
                hdPublicKeys: {
                    entity2: '(hd public key)',
                },
            },
            keys: {
                privateKeys: {
                    key: '(key)',
                },
            },
        },
        value: 'ffffffffffffffff',
    }, lib_1.stringifyTestVector(extended));
});
ava_1.default('generateExtendedScenario: unknown scenario identifier', (t) => {
    const extended = lib_1.generateExtendedScenario({
        environment: { scripts: {} },
        scenarioId: 'unknown',
    });
    t.deepEqual(extended, 'Cannot extend scenario "unknown": a scenario with the identifier unknown is not included in this compilation environment.', lib_1.stringifyTestVector(extended));
});
ava_1.default('extendedScenarioDefinitionToCompilationData: empty', (t) => {
    const extended = lib_1.extendedScenarioDefinitionToCompilationData({ data: {} });
    t.deepEqual(extended, {}, lib_1.stringifyTestVector(extended));
});
ava_1.default('extendedScenarioDefinitionToCompilationData: empty hdKeys', (t) => {
    const extended = lib_1.extendedScenarioDefinitionToCompilationData({
        data: { hdKeys: {} },
    });
    t.deepEqual(extended, { hdKeys: {} }, lib_1.stringifyTestVector(extended));
});
ava_1.default('generateDefaultScenarioDefinition: authenticationTemplateP2pkhNonHd', (t) => {
    const environment = lib_1.authenticationTemplateToCompilationEnvironment(lib_1.authenticationTemplateP2pkhNonHd);
    const scenario = lib_1.generateDefaultScenarioDefinition(environment);
    t.deepEqual(scenario, {
        data: {
            currentBlockHeight: 2,
            currentBlockTime: 1231469665,
            keys: {
                privateKeys: {
                    key: '0000000000000000000000000000000000000000000000000000000000000001',
                },
            },
        },
        transaction: {
            inputs: [
                {
                    unlockingBytecode: null,
                },
            ],
            locktime: 0,
            outputs: [
                {
                    lockingBytecode: '',
                },
            ],
            version: 2,
        },
        value: 0,
    }, lib_1.stringifyTestVector(scenario));
});
ava_1.default('generateDefaultScenarioDefinition: authenticationTemplateP2pkh', async (t) => {
    const sha256 = await sha256Promise;
    const sha512 = await sha512Promise;
    const environment = Object.assign(Object.assign({}, lib_1.authenticationTemplateToCompilationEnvironment(lib_1.authenticationTemplateP2pkh)), { sha256,
        sha512 });
    const scenario = lib_1.generateDefaultScenarioDefinition(environment);
    t.deepEqual(scenario, {
        data: {
            currentBlockHeight: 2,
            currentBlockTime: 1231469665,
            hdKeys: {
                addressIndex: 0,
                hdPrivateKeys: {
                    owner: 'xprv9s21ZrQH143K3w1RdaeDYJjQpiA1vmm3MBNbpFyRGCP8wf7CvY3rgfLGGpw8YBgb7PitSoXBnRRyAYo8fm24T5to52JAv9mgbvXc82Z3EH3',
                },
            },
        },
        transaction: {
            inputs: [
                {
                    unlockingBytecode: null,
                },
            ],
            locktime: 0,
            outputs: [
                {
                    lockingBytecode: '',
                },
            ],
            version: 2,
        },
        value: 0,
    }, lib_1.stringifyTestVector(scenario));
});
const ripemd160Promise = lib_1.instantiateRipemd160();
const secp256k1Promise = lib_1.instantiateSecp256k1();
const vmPromise = lib_1.instantiateVirtualMachineBCH(lib_1.instructionSetBCHCurrentStrict);
/**
 * Uses `createCompiler` rather than `createCompilerBCH` for performance.
 */
exports.expectScenarioGenerationResult = async (t, scenarioId, unlockingScriptId, templateOverrides, expectedResult, environmentOverrides
// eslint-disable-next-line max-params
) => {
    const ripemd160 = await ripemd160Promise;
    const sha256 = await sha256Promise;
    const sha512 = await sha512Promise;
    const secp256k1 = await secp256k1Promise;
    const vm = await vmPromise;
    const environment = lib_1.authenticationTemplateToCompilationEnvironment(Object.assign({
        entities: {
            owner: {
                variables: {
                    another: { type: 'Key' },
                    key1: { type: 'HdKey' },
                    var1: { type: 'AddressData' },
                },
            },
        },
        scripts: {
            lock: {
                lockingType: 'standard',
                script: '<var1> OP_DROP OP_DROP OP_1',
            },
            unlock: {
                script: '<key1.schnorr_signature.all_outputs>',
                unlocks: 'lock',
            },
        },
        supported: ['BCH_2020_05'],
        version: 0,
    }, templateOverrides));
    const compiler = lib_1.createCompiler(Object.assign(Object.assign({
        createAuthenticationProgram: lib_1.createAuthenticationProgramEvaluationCommon,
        opcodes: lib_1.generateBytecodeMap(lib_1.OpcodesBCH),
        operations: lib_1.compilerOperationsBCH,
        ripemd160,
        secp256k1,
        sha256,
        sha512,
        vm,
    }, environment), environmentOverrides));
    const scenario = compiler.generateScenario({ scenarioId, unlockingScriptId });
    t.deepEqual(scenario, expectedResult, `– \nResult: ${lib_1.stringifyTestVector(scenario)}\n\nExpected:\n ${lib_1.stringifyTestVector(expectedResult)}\n`);
};
ava_1.default('generateScenario: deep extend', exports.expectScenarioGenerationResult, 'c', 'unlock', {
    scenarios: {
        a: {
            data: {
                bytecode: {
                    var1: '0x010203',
                },
            },
        },
        b: {
            data: {
                keys: {
                    privateKeys: {
                        another: '00000000000000000000000000000000000000000000000000000000000000ff',
                    },
                },
            },
            extends: 'a',
        },
        c: { extends: 'b' },
    },
}, {
    data: {
        bytecode: {
            var1: lib_1.hexToBin('010203'),
        },
        currentBlockHeight: 2,
        currentBlockTime: 1231469665,
        hdKeys: {
            addressIndex: 0,
            hdPrivateKeys: {
                owner: 'xprv9s21ZrQH143K3Dfym3ZPsqraXhUokyNALDNHuaDZo14vDW86EpWxTq7ypGDgHCsZNCzsMtJb6xSDWEKmGYfGUZ1edNXGmfxNVaK5aNpBVMJ',
            },
        },
        keys: {
            privateKeys: {
                another: lib_1.hexToBin('00000000000000000000000000000000000000000000000000000000000000ff'),
            },
        },
    },
    program: {
        inputIndex: 0,
        sourceOutput: {
            satoshis: lib_1.hexToBin('0000000000000000'),
        },
        spendingTransaction: {
            inputs: [
                {
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    sequenceNumber: 0,
                    unlockingBytecode: undefined,
                },
            ],
            locktime: 0,
            outputs: [
                {
                    lockingBytecode: lib_1.hexToBin(''),
                    satoshis: lib_1.hexToBin('0000000000000000'),
                },
            ],
            version: 2,
        },
    },
});
ava_1.default('generateScenario: cyclical extend', exports.expectScenarioGenerationResult, 'c', 'unlock', {
    scenarios: {
        a: { extends: 'c' },
        b: { extends: 'a' },
        c: { extends: 'b' },
    },
}, 'Cannot generate scenario "c": Cannot extend scenario "c": scenario "c" extends itself. Scenario inheritance path: c → b → a');
ava_1.default('generateScenario: no scenarios', exports.expectScenarioGenerationResult, 'does_not_exist', 'unlock', { scenarios: undefined }, 'Cannot generate scenario "does_not_exist": a scenario with the identifier does_not_exist is not included in this compilation environment.');
ava_1.default('generateScenario: unknown scenario ID', exports.expectScenarioGenerationResult, 'does_not_exist', 'unlock', {
    scenarios: { another: {} },
}, 'Cannot generate scenario "does_not_exist": a scenario with the identifier does_not_exist is not included in this compilation environment.');
ava_1.default('generateScenario: invalid bytecode value', exports.expectScenarioGenerationResult, 'a', 'unlock', {
    scenarios: {
        a: { data: { bytecode: { var1: 'invalid' } } },
    },
}, 'Cannot generate scenario "a": Compilation error while generating bytecode for "var1": [1, 1] Unknown identifier "invalid".');
ava_1.default('generateScenario: no scenario ID', exports.expectScenarioGenerationResult, undefined, 'unlock', {
    scenarios: {
        a: {},
    },
}, {
    data: {
        currentBlockHeight: 2,
        currentBlockTime: 1231469665,
        hdKeys: {
            addressIndex: 0,
            hdPrivateKeys: {
                owner: 'xprv9s21ZrQH143K3Dfym3ZPsqraXhUokyNALDNHuaDZo14vDW86EpWxTq7ypGDgHCsZNCzsMtJb6xSDWEKmGYfGUZ1edNXGmfxNVaK5aNpBVMJ',
            },
        },
        keys: {
            privateKeys: {
                another: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000001'),
            },
        },
    },
    program: {
        inputIndex: 0,
        sourceOutput: {
            satoshis: lib_1.hexToBin('0000000000000000'),
        },
        spendingTransaction: {
            inputs: [
                {
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    sequenceNumber: 0,
                    unlockingBytecode: undefined,
                },
            ],
            locktime: 0,
            outputs: [
                {
                    lockingBytecode: lib_1.hexToBin(''),
                    satoshis: lib_1.hexToBin('0000000000000000'),
                },
            ],
            version: 2,
        },
    },
});
ava_1.default('generateScenario: no unlocking script ID, no scenario ID', exports.expectScenarioGenerationResult, undefined, undefined, { scenarios: { a: {} } }, {
    data: {
        currentBlockHeight: 2,
        currentBlockTime: 1231469665,
        hdKeys: {
            addressIndex: 0,
            hdPrivateKeys: {
                owner: 'xprv9s21ZrQH143K3Dfym3ZPsqraXhUokyNALDNHuaDZo14vDW86EpWxTq7ypGDgHCsZNCzsMtJb6xSDWEKmGYfGUZ1edNXGmfxNVaK5aNpBVMJ',
            },
        },
        keys: {
            privateKeys: {
                another: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000001'),
            },
        },
    },
    program: {
        inputIndex: 0,
        sourceOutput: {
            satoshis: lib_1.hexToBin('0000000000000000'),
        },
        spendingTransaction: {
            inputs: [
                {
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    sequenceNumber: 0,
                    unlockingBytecode: undefined,
                },
            ],
            locktime: 0,
            outputs: [
                {
                    lockingBytecode: lib_1.hexToBin(''),
                    satoshis: lib_1.hexToBin('0000000000000000'),
                },
            ],
            version: 2,
        },
    },
});
ava_1.default('generateScenario: unknown locking bytecode script', exports.expectScenarioGenerationResult, 'a', 'unlock', {
    scenarios: {
        a: { transaction: { inputs: [{}, {}] } },
    },
}, 'Cannot generate scenario "a": the specific input under test in this scenario is ambiguous – "transaction.inputs" must include exactly one input which has "unlockingBytecode" set to "null".');
ava_1.default('generateScenario: ambiguous input under test', exports.expectScenarioGenerationResult, 'a', 'unlock', {
    scenarios: {
        a: {
            transaction: { outputs: [{ lockingBytecode: { script: 'unknown' } }] },
        },
    },
}, 'Cannot generate scenario "a": Cannot generate locking bytecode for output 0: [0, 0] No script with an ID of "unknown" was provided in the compilation environment.');
ava_1.default('generateScenario: no locking script', exports.expectScenarioGenerationResult, 'a', 'unlock', {
    scenarios: {
        a: {
            transaction: { outputs: [{ lockingBytecode: {} }] },
        },
    },
}, 'Cannot generate scenario "a": Cannot generate locking bytecode for output 0: the locking script unlocked by "unlock" is not provided in this compilation environment.', {
    unlockingScripts: undefined,
});
ava_1.default('generateScenario: no locking script, no specified unlocking script', exports.expectScenarioGenerationResult, 'a', undefined, {
    scenarios: {
        a: {
            transaction: { outputs: [{ lockingBytecode: {} }] },
        },
    },
}, 'Cannot generate scenario "a": Cannot generate locking bytecode for output 0: this output is set to use the script unlocked by the unlocking script under test, but an unlocking script ID was not provided for scenario generation.', {
    unlockingScripts: undefined,
});
ava_1.default('generateScenario: simple transaction, locking bytecode override', exports.expectScenarioGenerationResult, 'a', 'unlock', {
    scenarios: {
        a: {
            data: {
                currentBlockHeight: 5,
                hdKeys: { hdPublicKeys: {} },
                keys: {
                    privateKeys: {
                        another: '00000000000000000000000000000000000000000000000000000000000000ff',
                    },
                },
            },
            transaction: {
                outputs: [
                    {
                        lockingBytecode: { overrides: { currentBlockHeight: 9 } },
                        satoshis: 'ffffffffffffffff',
                    },
                    {
                        lockingBytecode: { overrides: {} },
                        satoshis: 'ffffffffffffffff',
                    },
                ],
                version: 3,
            },
            value: 'ffffffffffffffff',
        },
    },
    scripts: {
        lock: {
            lockingType: 'standard',
            script: 'OP_DROP <current_block_height> OP_DROP OP_1',
        },
        unlock: {
            script: '<key1.schnorr_signature.all_outputs>',
            unlocks: 'lock',
        },
    },
}, {
    data: {
        currentBlockHeight: 5,
        currentBlockTime: 1231469665,
        hdKeys: {
            addressIndex: 0,
            hdPrivateKeys: {
                owner: 'xprv9s21ZrQH143K3Dfym3ZPsqraXhUokyNALDNHuaDZo14vDW86EpWxTq7ypGDgHCsZNCzsMtJb6xSDWEKmGYfGUZ1edNXGmfxNVaK5aNpBVMJ',
            },
            hdPublicKeys: {},
        },
        keys: {
            privateKeys: {
                another: lib_1.hexToBin('00000000000000000000000000000000000000000000000000000000000000ff'),
            },
        },
    },
    program: {
        inputIndex: 0,
        sourceOutput: {
            satoshis: lib_1.hexToBin('ffffffffffffffff'),
        },
        spendingTransaction: {
            inputs: [
                {
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    sequenceNumber: 0,
                    unlockingBytecode: undefined,
                },
            ],
            locktime: 0,
            outputs: [
                {
                    lockingBytecode: lib_1.hexToBin('75597551'),
                    satoshis: lib_1.hexToBin('ffffffffffffffff'),
                },
                {
                    lockingBytecode: lib_1.hexToBin('75557551'),
                    satoshis: lib_1.hexToBin('ffffffffffffffff'),
                },
            ],
            version: 3,
        },
    },
});
ava_1.default('generateScenario: complex transaction, locking bytecode variable override', exports.expectScenarioGenerationResult, 'a', 'unlock', {
    scenarios: {
        a: {
            data: { bytecode: { var1: '0x010203' } },
            transaction: {
                inputs: [
                    {
                        outpointIndex: 1,
                        outpointTransactionHash: '0000000000000000000000000000000000000000000000000000000000000001',
                        sequenceNumber: 1,
                        unlockingBytecode: 'beef',
                    },
                    { unlockingBytecode: null },
                ],
                locktime: 4294967295,
                outputs: [
                    {
                        lockingBytecode: {},
                        satoshis: 1000,
                    },
                    {
                        lockingBytecode: {
                            overrides: { currentBlockHeight: 0 },
                        },
                    },
                    {
                        lockingBytecode: {
                            overrides: { bytecode: { var1: '0x030405' } },
                        },
                        satoshis: 'ffffffffffffffff',
                    },
                ],
                version: 3,
            },
        },
    },
}, {
    data: {
        bytecode: {
            var1: lib_1.hexToBin('010203'),
        },
        currentBlockHeight: 2,
        currentBlockTime: 1231469665,
        hdKeys: {
            addressIndex: 0,
            hdPrivateKeys: {
                owner: 'xprv9s21ZrQH143K3Dfym3ZPsqraXhUokyNALDNHuaDZo14vDW86EpWxTq7ypGDgHCsZNCzsMtJb6xSDWEKmGYfGUZ1edNXGmfxNVaK5aNpBVMJ',
            },
        },
        keys: {
            privateKeys: {
                another: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000001'),
            },
        },
    },
    program: {
        inputIndex: 1,
        sourceOutput: {
            satoshis: lib_1.hexToBin('0000000000000000'),
        },
        spendingTransaction: {
            inputs: [
                {
                    outpointIndex: 1,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000001'),
                    sequenceNumber: 1,
                    unlockingBytecode: lib_1.hexToBin('beef'),
                },
                {
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    sequenceNumber: 0,
                    unlockingBytecode: undefined,
                },
            ],
            locktime: 4294967295,
            outputs: [
                {
                    lockingBytecode: lib_1.hexToBin('03010203757551'),
                    satoshis: lib_1.hexToBin('e803000000000000'),
                },
                {
                    lockingBytecode: lib_1.hexToBin('03010203757551'),
                    satoshis: lib_1.hexToBin('0000000000000000'),
                },
                {
                    lockingBytecode: lib_1.hexToBin('03030405757551'),
                    satoshis: lib_1.hexToBin('ffffffffffffffff'),
                },
            ],
            version: 3,
        },
    },
});
ava_1.default('generateScenario: locking bytecode generation failure', exports.expectScenarioGenerationResult, 'a', 'unlock', {
    scenarios: {
        a: {
            transaction: {
                outputs: [
                    {
                        lockingBytecode: { overrides: { bytecode: { var1: 'broken' } } },
                    },
                ],
            },
        },
    },
}, 'Cannot generate scenario "a": Cannot generate locking bytecode for output 0: Compilation error while generating bytecode for "var1": [1, 1] Unknown identifier "broken".');
ava_1.default('generateScenario: cash-channels – after_payment_time', async (t) => {
    const template = lib_1.validateAuthenticationTemplate(transaction_e2e_spec_helper_1.cashChannelsJson);
    if (typeof template === 'string') {
        t.fail(template);
        return;
    }
    const compiler = await lib_1.authenticationTemplateToCompilerBCH(template);
    const scenario = compiler.generateScenario({
        scenarioId: 'after_payment_time',
        unlockingScriptId: 'execute_authorization',
    });
    t.deepEqual(scenario, {
        data: {
            bytecode: {
                authorized_amount: lib_1.hexToBin('e803'),
                denominating_asset: lib_1.hexToBin('555344'),
                maximum_authorized_satoshis: lib_1.hexToBin('0429'),
                payment_number: lib_1.hexToBin('02'),
                payment_satoshis: lib_1.hexToBin('1027'),
                payment_time: lib_1.hexToBin('80bf345e'),
            },
            currentBlockHeight: 2,
            currentBlockTime: 1231469665,
            hdKeys: {
                addressIndex: 0,
            },
            keys: {
                privateKeys: {
                    owner: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000001'),
                    rate_oracle: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000003'),
                    receiver: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000004'),
                },
            },
        },
        program: {
            inputIndex: 0,
            sourceOutput: {
                satoshis: lib_1.hexToBin('204e000000000000'),
            },
            spendingTransaction: {
                inputs: [
                    {
                        outpointIndex: 0,
                        outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                        sequenceNumber: 0,
                        unlockingBytecode: undefined,
                    },
                ],
                locktime: 1580515200,
                outputs: [
                    {
                        lockingBytecode: lib_1.hexToBin('a9149a97dc2531b9b9af6319aab57ea369284289998987'),
                        satoshis: lib_1.hexToBin('1027000000000000'),
                    },
                ],
                version: 2,
            },
        },
    }, lib_1.stringifyTestVector(scenario));
});
//# sourceMappingURL=scenarios.spec.js.map