"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable functional/no-expression-statement, max-lines */
const ava_1 = __importDefault(require("ava"));
const lib_1 = require("../../lib");
ava_1.default('mergeRanges', (t) => {
    t.deepEqual(lib_1.mergeRanges([
        { endColumn: 3, endLineNumber: 1, startColumn: 0, startLineNumber: 1 },
        { endColumn: 1, endLineNumber: 3, startColumn: 6, startLineNumber: 0 },
    ]), { endColumn: 1, endLineNumber: 3, startColumn: 6, startLineNumber: 0 });
    t.deepEqual(lib_1.mergeRanges([
        { endColumn: 4, endLineNumber: 0, startColumn: 0, startLineNumber: 0 },
        { endColumn: 8, endLineNumber: 1, startColumn: 6, startLineNumber: 1 },
    ]), { endColumn: 8, endLineNumber: 1, startColumn: 0, startLineNumber: 0 });
    t.deepEqual(lib_1.mergeRanges([
        { endColumn: 1, endLineNumber: 1, startColumn: 5, startLineNumber: 0 },
        { endColumn: 8, endLineNumber: 1, startColumn: 0, startLineNumber: 0 },
    ]), { endColumn: 8, endLineNumber: 1, startColumn: 0, startLineNumber: 0 });
});
ava_1.default('containsRange', (t) => {
    t.deepEqual(lib_1.containsRange({ endColumn: 1, endLineNumber: 3, startColumn: 6, startLineNumber: 0 }, { endColumn: 3, endLineNumber: 1, startColumn: 0, startLineNumber: 1 }), true);
    t.deepEqual(lib_1.containsRange({ endColumn: 4, endLineNumber: 0, startColumn: 0, startLineNumber: 0 }, { endColumn: 8, endLineNumber: 1, startColumn: 6, startLineNumber: 1 }), false);
    t.deepEqual(lib_1.containsRange({ endColumn: 8, endLineNumber: 1, startColumn: 0, startLineNumber: 0 }, { endColumn: 1, endLineNumber: 1, startColumn: 5, startLineNumber: 0 }), true);
    t.deepEqual(lib_1.containsRange({ endColumn: 5, endLineNumber: 1, startColumn: 1, startLineNumber: 1 }, { endColumn: 5, endLineNumber: 1, startColumn: 1, startLineNumber: 1 }, false), true);
});
ava_1.default('compileBtl', (t) => {
    const successful = lib_1.compileBtl('<0x010203>');
    t.deepEqual(successful, lib_1.hexToBin('03010203'), lib_1.stringifyTestVector(successful));
    const failed = lib_1.compileBtl('<bad>');
    t.deepEqual(failed, 'BTL compilation error: [1, 2]: Unknown identifier "bad".', lib_1.stringifyTestVector(failed));
});
ava_1.default('extractBytecodeResolutions', (t) => {
    const compiler = lib_1.createCompilerCommonSynchronous({
        scripts: {
            pushNumbers: '<1> var',
            t: 'pushNumbers OP_ADD <0x03> OP_EQUAL <"abc"> OP_DROP <0b11> OP_EQUAL var2',
        },
        variables: { var: { type: 'AddressData' }, var2: { type: 'AddressData' } },
    });
    const compiled = compiler.generateBytecode('t', { bytecode: { var: Uint8Array.of(0) } }, true);
    if (!('resolve' in compiled)) {
        t.fail(lib_1.stringifyTestVector(compiled));
        return;
    }
    const result = lib_1.extractBytecodeResolutions(compiled.resolve);
    t.deepEqual(result, [
        {
            bytecode: lib_1.hexToBin('01'),
            text: '1',
            type: 'BigIntLiteral',
        },
        {
            bytecode: lib_1.hexToBin('00'),
            text: 'var',
            type: 'variable',
        },
        {
            bytecode: lib_1.hexToBin('5100'),
            text: 'pushNumbers',
            type: 'script',
        },
        {
            bytecode: lib_1.hexToBin('93'),
            text: 'OP_ADD',
            type: 'opcode',
        },
        {
            bytecode: lib_1.hexToBin('03'),
            text: '03',
            type: 'HexLiteral',
        },
        {
            bytecode: lib_1.hexToBin('87'),
            text: 'OP_EQUAL',
            type: 'opcode',
        },
        {
            bytecode: lib_1.hexToBin('616263'),
            text: 'abc',
            type: 'UTF8Literal',
        },
        {
            bytecode: lib_1.hexToBin('75'),
            text: 'OP_DROP',
            type: 'opcode',
        },
        {
            bytecode: lib_1.hexToBin('03'),
            text: '11',
            type: 'BinaryLiteral',
        },
        {
            bytecode: lib_1.hexToBin('87'),
            text: 'OP_EQUAL',
            type: 'opcode',
        },
    ], lib_1.stringifyTestVector(result));
});
ava_1.default('extractEvaluationSamples: empty trace', (t) => {
    const result = lib_1.extractEvaluationSamples({
        evaluationRange: {
            endColumn: 0,
            endLineNumber: 0,
            startColumn: 0,
            startLineNumber: 0,
        },
        nodes: [],
        trace: [],
    });
    t.deepEqual(result, {
        samples: [],
        unmatchedStates: [],
    }, lib_1.stringifyTestVector(result));
});
const unexecutedLock = `OP_TOALTSTACK
OP_IF
    <2>
    OP_FROMALTSTACK
    OP_IF
        <3>
        $(
            <1>
            OP_IF
                <<4>>
            OP_ELSE
                <<5>>
            OP_ENDIF
        )
    0x675667 // OP_ELSE OP_6 OP_ELSE
    OP_ENDIF
OP_ELSE
    <7>
    OP_FROMALTSTACK
    OP_IF
        <$(
            <7> <1> OP_ADD
        )>
    OP_ENDIF
OP_ENDIF`;
const vmPromise = lib_1.instantiateVirtualMachineBCH();
const compilerPromise = lib_1.createCompilerBCH({
    scripts: {
        docs: '0x00 0x01 0xab01 0xcd9300 $(OP_3 <0x00> OP_SWAP OP_CAT) 0x010203',
        /**
         * Second node closes an open sample, then fails during an internal state.
         * The sample should use the error state and the instruction which caused
         * it, ignoring any later (unexecuted) instructions.
         */
        error1: '0x01 $(<0xab OP_RETURN OP_0>)',
        /**
         * `OP_0 OP_PUSHDATA_2 600 0x62[600 times]` - fails as first instruction of
         * second node: `Push exceeds the push size limit of 520 bytes.`
         */
        error2: '0x004d5802 "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"',
        /**
         * The second node causes an error, so only two samples and no unmatched
         * states are returned.
         */
        error3: 'OP_0 OP_RETURN OP_0 OP_0',
        nested: `OP_0

<
  $(
  0x0000
    $($(<OP_1>)

      OP_2
      OP_ADD

    )
    $( <"abc">
    )
  OP_CAT
  OP_CAT
  )
  $(
    <0>
    <0>
  $(<OP_CAT>))
>`,
        nonPushingOpcodeUnlock: 'OP_1 OP_DUP',
        unexecuted00: `<0> <0> ${unexecutedLock}`,
        unexecuted01: `<0> <1> ${unexecutedLock}`,
        unexecuted10: `<1> <0> ${unexecutedLock}`,
        unexecuted11: `<1> <1> ${unexecutedLock}`,
        unexecutedEmpty: ``,
    },
});
ava_1.default('extractEvaluationSamples: documentation example', async (t) => {
    const compiler = await compilerPromise;
    const vm = await vmPromise;
    const result = compiler.generateBytecode('docs', {}, true);
    if (!result.success) {
        t.fail(lib_1.stringifyErrors(result.errors));
        return;
    }
    const testProgram = lib_1.createAuthenticationProgramEvaluationCommon(result.bytecode);
    const nodes = result.reduce.script;
    const evaluationRange = result.reduce.range;
    const traceWithUnlockingPhaseAndFinalState = vm.debug(testProgram);
    const actualTrace = traceWithUnlockingPhaseAndFinalState.slice(1, -1);
    /**
     * We double the debugging trace just to test that the extra states are
     * returned in `unmatchedStates`.
     */
    const trace = [...actualTrace, ...actualTrace];
    const extracted = lib_1.extractEvaluationSamples({
        evaluationRange,
        nodes,
        trace,
    });
    t.deepEqual(nodes, [
        {
            bytecode: Uint8Array.of(0),
            range: {
                endColumn: 5,
                endLineNumber: 1,
                startColumn: 1,
                startLineNumber: 1,
            },
        },
        {
            bytecode: Uint8Array.of(0x01),
            range: {
                endColumn: 10,
                endLineNumber: 1,
                startColumn: 6,
                startLineNumber: 1,
            },
        },
        {
            bytecode: lib_1.hexToBin('ab01'),
            range: {
                endColumn: 17,
                endLineNumber: 1,
                startColumn: 11,
                startLineNumber: 1,
            },
        },
        {
            bytecode: lib_1.hexToBin('cd9300'),
            range: {
                endColumn: 26,
                endLineNumber: 1,
                startColumn: 18,
                startLineNumber: 1,
            },
        },
        {
            bytecode: lib_1.hexToBin('0003'),
            range: {
                endColumn: 56,
                endLineNumber: 1,
                startColumn: 27,
                startLineNumber: 1,
            },
            source: {
                bytecode: lib_1.hexToBin('5301007c7e'),
                range: {
                    endColumn: 55,
                    endLineNumber: 1,
                    startColumn: 29,
                    startLineNumber: 1,
                },
                script: [
                    {
                        bytecode: lib_1.hexToBin('53'),
                        range: {
                            endColumn: 33,
                            endLineNumber: 1,
                            startColumn: 29,
                            startLineNumber: 1,
                        },
                    },
                    {
                        bytecode: lib_1.hexToBin('0100'),
                        push: {
                            bytecode: lib_1.hexToBin('00'),
                            range: {
                                endColumn: 39,
                                endLineNumber: 1,
                                startColumn: 35,
                                startLineNumber: 1,
                            },
                            script: [
                                {
                                    bytecode: lib_1.hexToBin('00'),
                                    range: {
                                        endColumn: 39,
                                        endLineNumber: 1,
                                        startColumn: 35,
                                        startLineNumber: 1,
                                    },
                                },
                            ],
                        },
                        range: {
                            endColumn: 40,
                            endLineNumber: 1,
                            startColumn: 34,
                            startLineNumber: 1,
                        },
                    },
                    {
                        bytecode: lib_1.hexToBin('7c'),
                        range: {
                            endColumn: 48,
                            endLineNumber: 1,
                            startColumn: 41,
                            startLineNumber: 1,
                        },
                    },
                    {
                        bytecode: lib_1.hexToBin('7e'),
                        range: {
                            endColumn: 55,
                            endLineNumber: 1,
                            startColumn: 49,
                            startLineNumber: 1,
                        },
                    },
                ],
            },
            trace: [
                {
                    alternateStack: [],
                    correspondingOutput: lib_1.hexToBin('000000000000000000'),
                    executionStack: [],
                    instructions: [],
                    ip: 0,
                    lastCodeSeparator: -1,
                    locktime: 0,
                    operationCount: 0,
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    outputValue: lib_1.hexToBin('0000000000000000'),
                    sequenceNumber: 0,
                    signatureOperationsCount: 0,
                    signedMessages: [],
                    stack: [],
                    transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                    transactionOutputs: lib_1.hexToBin('000000000000000000'),
                    transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                    version: 0,
                },
                {
                    alternateStack: [],
                    correspondingOutput: lib_1.hexToBin('000000000000000000'),
                    executionStack: [],
                    instructions: [
                        {
                            opcode: 83,
                        },
                        {
                            data: Uint8Array.of(0),
                            opcode: 1,
                        },
                        {
                            opcode: 124,
                        },
                        {
                            opcode: 126,
                        },
                    ],
                    ip: 0,
                    lastCodeSeparator: -1,
                    locktime: 0,
                    operationCount: 0,
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    outputValue: lib_1.hexToBin('0000000000000000'),
                    sequenceNumber: 0,
                    signatureOperationsCount: 0,
                    signedMessages: [],
                    stack: [],
                    transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                    transactionOutputs: lib_1.hexToBin('000000000000000000'),
                    transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                    version: 0,
                },
                {
                    alternateStack: [],
                    correspondingOutput: lib_1.hexToBin('000000000000000000'),
                    executionStack: [],
                    instructions: [
                        {
                            opcode: 83,
                        },
                        {
                            data: Uint8Array.of(0),
                            opcode: 1,
                        },
                        {
                            opcode: 124,
                        },
                        {
                            opcode: 126,
                        },
                    ],
                    ip: 1,
                    lastCodeSeparator: -1,
                    locktime: 0,
                    operationCount: 0,
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    outputValue: lib_1.hexToBin('0000000000000000'),
                    sequenceNumber: 0,
                    signatureOperationsCount: 0,
                    signedMessages: [],
                    stack: [lib_1.hexToBin('03')],
                    transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                    transactionOutputs: lib_1.hexToBin('000000000000000000'),
                    transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                    version: 0,
                },
                {
                    alternateStack: [],
                    correspondingOutput: lib_1.hexToBin('000000000000000000'),
                    executionStack: [],
                    instructions: [
                        {
                            opcode: 83,
                        },
                        {
                            data: Uint8Array.of(0),
                            opcode: 1,
                        },
                        {
                            opcode: 124,
                        },
                        {
                            opcode: 126,
                        },
                    ],
                    ip: 2,
                    lastCodeSeparator: -1,
                    locktime: 0,
                    operationCount: 0,
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    outputValue: lib_1.hexToBin('0000000000000000'),
                    sequenceNumber: 0,
                    signatureOperationsCount: 0,
                    signedMessages: [],
                    stack: [lib_1.hexToBin('03'), Uint8Array.of(0)],
                    transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                    transactionOutputs: lib_1.hexToBin('000000000000000000'),
                    transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                    version: 0,
                },
                {
                    alternateStack: [],
                    correspondingOutput: lib_1.hexToBin('000000000000000000'),
                    executionStack: [],
                    instructions: [
                        {
                            opcode: 83,
                        },
                        {
                            data: Uint8Array.of(0),
                            opcode: 1,
                        },
                        {
                            opcode: 124,
                        },
                        {
                            opcode: 126,
                        },
                    ],
                    ip: 3,
                    lastCodeSeparator: -1,
                    locktime: 0,
                    operationCount: 1,
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    outputValue: lib_1.hexToBin('0000000000000000'),
                    sequenceNumber: 0,
                    signatureOperationsCount: 0,
                    signedMessages: [],
                    stack: [Uint8Array.of(0), lib_1.hexToBin('03')],
                    transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                    transactionOutputs: lib_1.hexToBin('000000000000000000'),
                    transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                    version: 0,
                },
                {
                    alternateStack: [],
                    correspondingOutput: lib_1.hexToBin('000000000000000000'),
                    executionStack: [],
                    instructions: [
                        {
                            opcode: 83,
                        },
                        {
                            data: Uint8Array.of(0),
                            opcode: 1,
                        },
                        {
                            opcode: 124,
                        },
                        {
                            opcode: 126,
                        },
                    ],
                    ip: 4,
                    lastCodeSeparator: -1,
                    locktime: 0,
                    operationCount: 2,
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    outputValue: lib_1.hexToBin('0000000000000000'),
                    sequenceNumber: 0,
                    signatureOperationsCount: 0,
                    signedMessages: [],
                    stack: [lib_1.hexToBin('0003')],
                    transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                    transactionOutputs: lib_1.hexToBin('000000000000000000'),
                    transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                    version: 0,
                },
                {
                    alternateStack: [],
                    correspondingOutput: lib_1.hexToBin('000000000000000000'),
                    executionStack: [],
                    instructions: [
                        {
                            opcode: 83,
                        },
                        {
                            data: Uint8Array.of(0),
                            opcode: 1,
                        },
                        {
                            opcode: 124,
                        },
                        {
                            opcode: 126,
                        },
                    ],
                    ip: 4,
                    lastCodeSeparator: -1,
                    locktime: 0,
                    operationCount: 2,
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    outputValue: lib_1.hexToBin('0000000000000000'),
                    sequenceNumber: 0,
                    signatureOperationsCount: 0,
                    signedMessages: [],
                    stack: [lib_1.hexToBin('0003')],
                    transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                    transactionOutputs: lib_1.hexToBin('000000000000000000'),
                    transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                    version: 0,
                },
            ],
        },
        {
            bytecode: lib_1.hexToBin('010203'),
            range: {
                endColumn: 65,
                endLineNumber: 1,
                startColumn: 57,
                startLineNumber: 1,
            },
        },
    ], lib_1.stringifyTestVector(nodes));
    t.deepEqual(traceWithUnlockingPhaseAndFinalState, [
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            executionStack: [],
            instructions: [],
            ip: 0,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 0,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [],
            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
            version: 0,
        },
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            executionStack: [],
            instructions: [
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin('ab'),
                    opcode: 1,
                },
                {
                    data: lib_1.hexToBin('cd'),
                    opcode: 1,
                },
                {
                    opcode: 147,
                },
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin('010203'),
                    opcode: 3,
                },
            ],
            ip: 0,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 0,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [],
            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
            version: 0,
        },
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            executionStack: [],
            instructions: [
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin('ab'),
                    opcode: 1,
                },
                {
                    data: lib_1.hexToBin('cd'),
                    opcode: 1,
                },
                {
                    opcode: 147,
                },
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin('010203'),
                    opcode: 3,
                },
            ],
            ip: 1,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 0,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [lib_1.hexToBin('')],
            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
            version: 0,
        },
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            executionStack: [],
            instructions: [
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin('ab'),
                    opcode: 1,
                },
                {
                    data: lib_1.hexToBin('cd'),
                    opcode: 1,
                },
                {
                    opcode: 147,
                },
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin('010203'),
                    opcode: 3,
                },
            ],
            ip: 2,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 0,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [lib_1.hexToBin(''), lib_1.hexToBin('ab')],
            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
            version: 0,
        },
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            executionStack: [],
            instructions: [
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin('ab'),
                    opcode: 1,
                },
                {
                    data: lib_1.hexToBin('cd'),
                    opcode: 1,
                },
                {
                    opcode: 147,
                },
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin('010203'),
                    opcode: 3,
                },
            ],
            ip: 3,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 0,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [lib_1.hexToBin(''), lib_1.hexToBin('ab'), lib_1.hexToBin('cd')],
            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
            version: 0,
        },
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            executionStack: [],
            instructions: [
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin('ab'),
                    opcode: 1,
                },
                {
                    data: lib_1.hexToBin('cd'),
                    opcode: 1,
                },
                {
                    opcode: 147,
                },
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin('010203'),
                    opcode: 3,
                },
            ],
            ip: 4,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 1,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [lib_1.hexToBin(''), lib_1.hexToBin('f8')],
            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
            version: 0,
        },
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            executionStack: [],
            instructions: [
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin('ab'),
                    opcode: 1,
                },
                {
                    data: lib_1.hexToBin('cd'),
                    opcode: 1,
                },
                {
                    opcode: 147,
                },
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin('010203'),
                    opcode: 3,
                },
            ],
            ip: 5,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 1,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [lib_1.hexToBin(''), lib_1.hexToBin('f8'), lib_1.hexToBin('')],
            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
            version: 0,
        },
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            executionStack: [],
            instructions: [
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin('ab'),
                    opcode: 1,
                },
                {
                    data: lib_1.hexToBin('cd'),
                    opcode: 1,
                },
                {
                    opcode: 147,
                },
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin('010203'),
                    opcode: 3,
                },
            ],
            ip: 6,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 1,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [lib_1.hexToBin(''), lib_1.hexToBin('f8'), lib_1.hexToBin(''), lib_1.hexToBin('')],
            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
            version: 0,
        },
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            executionStack: [],
            instructions: [
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin('ab'),
                    opcode: 1,
                },
                {
                    data: lib_1.hexToBin('cd'),
                    opcode: 1,
                },
                {
                    opcode: 147,
                },
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin('010203'),
                    opcode: 3,
                },
            ],
            ip: 7,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 1,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [
                lib_1.hexToBin(''),
                lib_1.hexToBin('f8'),
                lib_1.hexToBin(''),
                lib_1.hexToBin(''),
                lib_1.hexToBin('010203'),
            ],
            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
            version: 0,
        },
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            executionStack: [],
            instructions: [
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin('ab'),
                    opcode: 1,
                },
                {
                    data: lib_1.hexToBin('cd'),
                    opcode: 1,
                },
                {
                    opcode: 147,
                },
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin('010203'),
                    opcode: 3,
                },
            ],
            ip: 7,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 1,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [
                lib_1.hexToBin(''),
                lib_1.hexToBin('f8'),
                lib_1.hexToBin(''),
                lib_1.hexToBin(''),
                lib_1.hexToBin('010203'),
            ],
            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
            version: 0,
        },
    ], lib_1.stringifyTestVector(traceWithUnlockingPhaseAndFinalState));
    t.deepEqual(extracted, {
        samples: [
            {
                evaluationRange,
                internalStates: [],
                range: {
                    endColumn: 1,
                    endLineNumber: 1,
                    startColumn: 1,
                    startLineNumber: 1,
                },
                state: trace[0],
            },
            {
                evaluationRange,
                instruction: { data: Uint8Array.of(), opcode: 0 },
                internalStates: [],
                range: nodes[0].range,
                state: trace[1],
            },
            {
                evaluationRange,
                instruction: { data: lib_1.hexToBin('ab'), opcode: 1 },
                internalStates: [],
                range: lib_1.mergeRanges([nodes[1].range, nodes[2].range]),
                state: trace[2],
            },
            {
                evaluationRange,
                instruction: { data: lib_1.hexToBin('cd'), opcode: 1 },
                internalStates: [],
                range: lib_1.mergeRanges([nodes[2].range, nodes[3].range]),
                state: trace[3],
            },
            {
                evaluationRange,
                instruction: { data: Uint8Array.of(), opcode: 0 },
                internalStates: [
                    {
                        instruction: { opcode: 0x93 },
                        state: trace[4],
                    },
                ],
                range: nodes[3].range,
                state: trace[5],
            },
            {
                evaluationRange,
                instruction: { data: Uint8Array.of(), opcode: 0 },
                internalStates: [],
                range: nodes[4].range,
                state: trace[6],
            },
            {
                evaluationRange,
                instruction: { data: lib_1.hexToBin('010203'), opcode: 3 },
                internalStates: [],
                range: lib_1.mergeRanges([nodes[4].range, nodes[5].range]),
                state: trace[7],
            },
        ],
        unmatchedStates: actualTrace,
    });
});
ava_1.default('extractEvaluationSamples: error in initial validation', async (t) => {
    const compiler = await compilerPromise;
    const vm = await vmPromise;
    const result = compiler.generateBytecode('nonPushingOpcodeUnlock', {}, true);
    if (!result.success) {
        t.fail(lib_1.stringifyErrors(result.errors));
        return;
    }
    const nullHashLength = 32;
    const testProgram = {
        inputIndex: 0,
        sourceOutput: {
            lockingBytecode: Uint8Array.of(lib_1.OpcodesCommon.OP_1),
            satoshis: Uint8Array.from([0, 0, 0, 0, 0, 0, 0, 0]),
        },
        spendingTransaction: {
            inputs: [
                {
                    outpointIndex: 0,
                    outpointTransactionHash: new Uint8Array(nullHashLength),
                    sequenceNumber: 0,
                    unlockingBytecode: result.bytecode,
                },
            ],
            locktime: 0,
            outputs: [
                {
                    lockingBytecode: Uint8Array.of(),
                    satoshis: Uint8Array.from([0, 0, 0, 0, 0, 0, 0, 0]),
                },
            ],
            version: 0,
        },
    };
    const nodes = result.reduce.script;
    const evaluationRange = result.reduce.range;
    const trace = vm.debug(testProgram);
    const extracted = lib_1.extractEvaluationSamples({
        evaluationRange,
        nodes,
        trace,
    });
    t.deepEqual(nodes, [
        {
            bytecode: lib_1.hexToBin('51'),
            range: {
                endColumn: 5,
                endLineNumber: 1,
                startColumn: 1,
                startLineNumber: 1,
            },
        },
        {
            bytecode: lib_1.hexToBin('76'),
            range: {
                endColumn: 12,
                endLineNumber: 1,
                startColumn: 6,
                startLineNumber: 1,
            },
        },
    ], lib_1.stringifyTestVector(nodes));
    t.deepEqual(trace, [
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            error: 'Unlocking bytecode may contain only push operations.',
            executionStack: [],
            instructions: [
                {
                    opcode: 81,
                },
                {
                    opcode: 118,
                },
            ],
            ip: 0,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 0,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [],
            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
            version: 0,
        },
    ], lib_1.stringifyTestVector(trace));
    t.deepEqual(extracted, {
        samples: [
            {
                evaluationRange,
                internalStates: [],
                range: {
                    endColumn: 1,
                    endLineNumber: 1,
                    startColumn: 1,
                    startLineNumber: 1,
                },
                state: trace[0],
            },
        ],
        unmatchedStates: [],
    });
});
ava_1.default("extractEvaluationSamples: node closes an open sample, then errors before the node's last instruction", async (t) => {
    const compiler = await compilerPromise;
    const vm = await vmPromise;
    const result = compiler.generateBytecode('error1', {}, true);
    if (!result.success) {
        t.fail(lib_1.stringifyErrors(result.errors));
        return;
    }
    const testProgram = lib_1.createAuthenticationProgramEvaluationCommon(result.bytecode);
    const nodes = result.reduce.script;
    const evaluationRange = result.reduce.range;
    const traceWithUnlockingPhaseAndFinalState = vm.debug(testProgram);
    const trace = traceWithUnlockingPhaseAndFinalState.slice(1);
    const extracted = lib_1.extractEvaluationSamples({
        evaluationRange,
        nodes,
        trace,
    });
    t.deepEqual(nodes, [
        {
            bytecode: lib_1.hexToBin('01'),
            range: {
                endColumn: 5,
                endLineNumber: 1,
                startColumn: 1,
                startLineNumber: 1,
            },
        },
        {
            bytecode: lib_1.hexToBin('ab6a00'),
            range: {
                endColumn: 30,
                endLineNumber: 1,
                startColumn: 6,
                startLineNumber: 1,
            },
            source: {
                bytecode: lib_1.hexToBin('03ab6a00'),
                range: {
                    endColumn: 29,
                    endLineNumber: 1,
                    startColumn: 8,
                    startLineNumber: 1,
                },
                script: [
                    {
                        bytecode: lib_1.hexToBin('03ab6a00'),
                        push: {
                            bytecode: lib_1.hexToBin('ab6a00'),
                            range: {
                                endColumn: 28,
                                endLineNumber: 1,
                                startColumn: 9,
                                startLineNumber: 1,
                            },
                            script: [
                                {
                                    bytecode: lib_1.hexToBin('ab'),
                                    range: {
                                        endColumn: 13,
                                        endLineNumber: 1,
                                        startColumn: 9,
                                        startLineNumber: 1,
                                    },
                                },
                                {
                                    bytecode: lib_1.hexToBin('6a'),
                                    range: {
                                        endColumn: 23,
                                        endLineNumber: 1,
                                        startColumn: 14,
                                        startLineNumber: 1,
                                    },
                                },
                                {
                                    bytecode: lib_1.hexToBin('00'),
                                    range: {
                                        endColumn: 28,
                                        endLineNumber: 1,
                                        startColumn: 24,
                                        startLineNumber: 1,
                                    },
                                },
                            ],
                        },
                        range: {
                            endColumn: 29,
                            endLineNumber: 1,
                            startColumn: 8,
                            startLineNumber: 1,
                        },
                    },
                ],
            },
            trace: [
                {
                    alternateStack: [],
                    correspondingOutput: lib_1.hexToBin('000000000000000000'),
                    executionStack: [],
                    instructions: [],
                    ip: 0,
                    lastCodeSeparator: -1,
                    locktime: 0,
                    operationCount: 0,
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    outputValue: lib_1.hexToBin('0000000000000000'),
                    sequenceNumber: 0,
                    signatureOperationsCount: 0,
                    signedMessages: [],
                    stack: [],
                    transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                    transactionOutputs: lib_1.hexToBin('000000000000000000'),
                    transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                    version: 0,
                },
                {
                    alternateStack: [],
                    correspondingOutput: lib_1.hexToBin('000000000000000000'),
                    executionStack: [],
                    instructions: [
                        {
                            data: lib_1.hexToBin('ab6a00'),
                            opcode: 3,
                        },
                    ],
                    ip: 0,
                    lastCodeSeparator: -1,
                    locktime: 0,
                    operationCount: 0,
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    outputValue: lib_1.hexToBin('0000000000000000'),
                    sequenceNumber: 0,
                    signatureOperationsCount: 0,
                    signedMessages: [],
                    stack: [],
                    transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                    transactionOutputs: lib_1.hexToBin('000000000000000000'),
                    transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                    version: 0,
                },
                {
                    alternateStack: [],
                    correspondingOutput: lib_1.hexToBin('000000000000000000'),
                    executionStack: [],
                    instructions: [
                        {
                            data: lib_1.hexToBin('ab6a00'),
                            opcode: 3,
                        },
                    ],
                    ip: 1,
                    lastCodeSeparator: -1,
                    locktime: 0,
                    operationCount: 0,
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    outputValue: lib_1.hexToBin('0000000000000000'),
                    sequenceNumber: 0,
                    signatureOperationsCount: 0,
                    signedMessages: [],
                    stack: [lib_1.hexToBin('ab6a00')],
                    transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                    transactionOutputs: lib_1.hexToBin('000000000000000000'),
                    transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                    version: 0,
                },
                {
                    alternateStack: [],
                    correspondingOutput: lib_1.hexToBin('000000000000000000'),
                    executionStack: [],
                    instructions: [
                        {
                            data: lib_1.hexToBin('ab6a00'),
                            opcode: 3,
                        },
                    ],
                    ip: 1,
                    lastCodeSeparator: -1,
                    locktime: 0,
                    operationCount: 0,
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    outputValue: lib_1.hexToBin('0000000000000000'),
                    sequenceNumber: 0,
                    signatureOperationsCount: 0,
                    signedMessages: [],
                    stack: [lib_1.hexToBin('ab6a00')],
                    transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                    transactionOutputs: lib_1.hexToBin('000000000000000000'),
                    transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                    version: 0,
                },
            ],
        },
    ], lib_1.stringifyTestVector(nodes));
    t.deepEqual(traceWithUnlockingPhaseAndFinalState, [
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            executionStack: [],
            instructions: [],
            ip: 0,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 0,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [],
            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
            version: 0,
        },
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            executionStack: [],
            instructions: [
                {
                    data: lib_1.hexToBin('ab'),
                    opcode: 1,
                },
                {
                    opcode: 106,
                },
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
            ],
            ip: 0,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 0,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [],
            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
            version: 0,
        },
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            executionStack: [],
            instructions: [
                {
                    data: lib_1.hexToBin('ab'),
                    opcode: 1,
                },
                {
                    opcode: 106,
                },
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
            ],
            ip: 1,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 0,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [lib_1.hexToBin('ab')],
            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
            version: 0,
        },
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            error: lib_1.AuthenticationErrorCommon.calledReturn,
            executionStack: [],
            instructions: [
                {
                    data: lib_1.hexToBin('ab'),
                    opcode: 1,
                },
                {
                    opcode: 106,
                },
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
            ],
            ip: 2,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 1,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [lib_1.hexToBin('ab')],
            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
            version: 0,
        },
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            error: lib_1.AuthenticationErrorCommon.calledReturn,
            executionStack: [],
            instructions: [
                {
                    data: lib_1.hexToBin('ab'),
                    opcode: 1,
                },
                {
                    opcode: 106,
                },
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
            ],
            ip: 2,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 1,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [lib_1.hexToBin('ab')],
            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
            version: 0,
        },
    ], lib_1.stringifyTestVector(traceWithUnlockingPhaseAndFinalState));
    t.deepEqual(extracted, {
        samples: [
            {
                evaluationRange,
                internalStates: [],
                range: {
                    endColumn: 1,
                    endLineNumber: 1,
                    startColumn: 1,
                    startLineNumber: 1,
                },
                state: trace[0],
            },
            {
                evaluationRange,
                instruction: { data: lib_1.hexToBin('ab'), opcode: 1 },
                internalStates: [],
                range: lib_1.mergeRanges([nodes[0].range, nodes[1].range]),
                state: trace[1],
            },
            {
                evaluationRange,
                instruction: { opcode: lib_1.OpcodesCommon.OP_RETURN },
                internalStates: [],
                range: nodes[1].range,
                state: trace[2],
            },
        ],
        unmatchedStates: [],
    }, lib_1.stringifyTestVector(extracted));
});
ava_1.default('extractEvaluationSamples: node which closes an open sample with an error', async (t) => {
    const compiler = await compilerPromise;
    const vm = await vmPromise;
    const result = compiler.generateBytecode('error2', {}, true);
    if (!result.success) {
        t.fail(lib_1.stringifyErrors(result.errors));
        return;
    }
    const testProgram = lib_1.createAuthenticationProgramEvaluationCommon(result.bytecode);
    const nodes = result.reduce.script;
    const evaluationRange = result.reduce.range;
    const traceWithUnlockingPhaseAndFinalState = vm.debug(testProgram);
    const trace = traceWithUnlockingPhaseAndFinalState.slice(1);
    const extracted = lib_1.extractEvaluationSamples({
        evaluationRange,
        nodes,
        trace,
    });
    t.deepEqual(nodes, [
        {
            bytecode: lib_1.hexToBin('004d5802'),
            range: {
                endColumn: 11,
                endLineNumber: 1,
                startColumn: 1,
                startLineNumber: 1,
            },
        },
        {
            bytecode: lib_1.hexToBin
            range: {
                endColumn: 614,
                endLineNumber: 1,
                startColumn: 12,
                startLineNumber: 1,
            },
        },
    ], lib_1.stringifyTestVector(nodes));
    t.deepEqual(traceWithUnlockingPhaseAndFinalState, [
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            executionStack: [],
            instructions: [],
            ip: 0,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 0,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [],
            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
            version: 0,
        },
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            executionStack: [],
            instructions: [
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin
                    opcode: 77,
                },
            ],
            ip: 0,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 0,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [],
            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
            version: 0,
        },
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            executionStack: [],
            instructions: [
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin('626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262'),
                    opcode: 77,
                },
            ],
            ip: 1,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 0,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [lib_1.hexToBin('')],
            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
            version: 0,
        },
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            error: lib_1.AuthenticationErrorCommon.exceedsMaximumPush,
            executionStack: [],
            instructions: [
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin('626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262'),
                    opcode: 77,
                },
            ],
            ip: 2,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 0,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [lib_1.hexToBin('')],
            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
            version: 0,
        },
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            error: lib_1.AuthenticationErrorCommon.exceedsMaximumPush,
            executionStack: [],
            instructions: [
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin
                    opcode: 77,
                },
            ],
            ip: 2,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 0,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [lib_1.hexToBin('')],
            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
            version: 0,
        },
    ], lib_1.stringifyTestVector(traceWithUnlockingPhaseAndFinalState));
    t.deepEqual(extracted, {
        samples: [
            {
                evaluationRange,
                internalStates: [],
                range: {
                    endColumn: 1,
                    endLineNumber: 1,
                    startColumn: 1,
                    startLineNumber: 1,
                },
                state: trace[0],
            },
            {
                evaluationRange,
                instruction: { data: Uint8Array.of(), opcode: 0 },
                internalStates: [],
                range: nodes[0].range,
                state: trace[1],
            },
            {
                evaluationRange,
                instruction: {
                    data: lib_1.hexToBin
                    opcode: 77,
                },
                internalStates: [],
                range: lib_1.mergeRanges([nodes[0].range, nodes[1].range]),
                state: trace[2],
            },
        ],
        unmatchedStates: [trace[3]],
    });
});
ava_1.default('extractEvaluationSamples: error3 – error occurs, so final state is dropped', async (t) => {
    const compiler = await compilerPromise;
    const vm = await vmPromise;
    const result = compiler.generateBytecode('error3', {}, true);
    if (!result.success) {
        t.fail(lib_1.stringifyErrors(result.errors));
        return;
    }
    const testProgram = lib_1.createAuthenticationProgramEvaluationCommon(result.bytecode);
    const nodes = result.reduce.script;
    const evaluationRange = result.reduce.range;
    const traceWithUnlockingPhaseAndFinalState = vm.debug(testProgram);
    const trace = traceWithUnlockingPhaseAndFinalState.slice(1, -1);
    const extracted = lib_1.extractEvaluationSamples({
        evaluationRange,
        nodes,
        trace,
    });
    t.deepEqual(nodes, [
        {
            bytecode: lib_1.hexToBin('00'),
            range: {
                endColumn: 5,
                endLineNumber: 1,
                startColumn: 1,
                startLineNumber: 1,
            },
        },
        {
            bytecode: lib_1.hexToBin('6a'),
            range: {
                endColumn: 15,
                endLineNumber: 1,
                startColumn: 6,
                startLineNumber: 1,
            },
        },
        {
            bytecode: lib_1.hexToBin('00'),
            range: {
                endColumn: 20,
                endLineNumber: 1,
                startColumn: 16,
                startLineNumber: 1,
            },
        },
        {
            bytecode: lib_1.hexToBin('00'),
            range: {
                endColumn: 25,
                endLineNumber: 1,
                startColumn: 21,
                startLineNumber: 1,
            },
        },
    ], lib_1.stringifyTestVector(nodes));
    t.deepEqual(traceWithUnlockingPhaseAndFinalState, [
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            executionStack: [],
            instructions: [],
            ip: 0,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 0,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [],
            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
            version: 0,
        },
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            executionStack: [],
            instructions: [
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    opcode: 106,
                },
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
            ],
            ip: 0,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 0,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [],
            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
            version: 0,
        },
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            executionStack: [],
            instructions: [
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    opcode: 106,
                },
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
            ],
            ip: 1,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 0,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [lib_1.hexToBin('')],
            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
            version: 0,
        },
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            error: 'Program called an OP_RETURN operation.',
            executionStack: [],
            instructions: [
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    opcode: 106,
                },
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
            ],
            ip: 2,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 1,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [lib_1.hexToBin('')],
            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
            version: 0,
        },
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            error: 'Program called an OP_RETURN operation.',
            executionStack: [],
            instructions: [
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    opcode: 106,
                },
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
            ],
            ip: 2,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 1,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [lib_1.hexToBin('')],
            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
            version: 0,
        },
    ], lib_1.stringifyTestVector(traceWithUnlockingPhaseAndFinalState));
    t.deepEqual(extracted, {
        samples: [
            {
                evaluationRange,
                internalStates: [],
                range: {
                    endColumn: 1,
                    endLineNumber: 1,
                    startColumn: 1,
                    startLineNumber: 1,
                },
                state: trace[0],
            },
            {
                evaluationRange,
                instruction: { data: Uint8Array.of(), opcode: 0 },
                internalStates: [],
                range: nodes[0].range,
                state: trace[1],
            },
        ],
        unmatchedStates: [],
    }, lib_1.stringifyTestVector(extracted));
});
ava_1.default('extractEvaluationSamplesRecursive: complex, deeply-nested script with irregular spacing', async (t) => {
    const compiler = await compilerPromise;
    const vm = await vmPromise;
    const result = compiler.generateBytecode('nested', {}, true);
    if (!result.success) {
        t.fail(lib_1.stringifyErrors(result.errors));
        return;
    }
    const testProgram = lib_1.createAuthenticationProgramEvaluationCommon(result.bytecode);
    const nodes = result.reduce.script;
    const evaluationRange = result.reduce.range;
    const traceWithUnlockingPhaseAndFinalState = vm.debug(testProgram);
    const trace = traceWithUnlockingPhaseAndFinalState.slice(1);
    const sampleResult = lib_1.extractEvaluationSamplesRecursive({
        evaluationRange,
        nodes,
        trace,
    });
    t.deepEqual(nodes, [
        {
            bytecode: lib_1.hexToBin('00'),
            range: {
                endColumn: 5,
                endLineNumber: 1,
                startColumn: 1,
                startLineNumber: 1,
            },
        },
        {
            bytecode: lib_1.hexToBin('03616263'),
            push: {
                bytecode: lib_1.hexToBin('616263'),
                range: {
                    endColumn: 15,
                    endLineNumber: 20,
                    startColumn: 3,
                    startLineNumber: 4,
                },
                script: [
                    {
                        bytecode: lib_1.hexToBin('616263'),
                        range: {
                            endColumn: 4,
                            endLineNumber: 16,
                            startColumn: 3,
                            startLineNumber: 4,
                        },
                        source: {
                            bytecode: lib_1.hexToBin('0000036162637e7e'),
                            range: {
                                endColumn: 9,
                                endLineNumber: 15,
                                startColumn: 3,
                                startLineNumber: 5,
                            },
                            script: [
                                {
                                    bytecode: lib_1.hexToBin('0000'),
                                    range: {
                                        endColumn: 9,
                                        endLineNumber: 5,
                                        startColumn: 3,
                                        startLineNumber: 5,
                                    },
                                },
                                {
                                    bytecode: lib_1.hexToBin('03'),
                                    range: {
                                        endColumn: 6,
                                        endLineNumber: 11,
                                        startColumn: 5,
                                        startLineNumber: 6,
                                    },
                                    source: {
                                        bytecode: lib_1.hexToBin('515293'),
                                        range: {
                                            endColumn: 13,
                                            endLineNumber: 9,
                                            startColumn: 7,
                                            startLineNumber: 6,
                                        },
                                        script: [
                                            {
                                                bytecode: lib_1.hexToBin('51'),
                                                range: {
                                                    endColumn: 16,
                                                    endLineNumber: 6,
                                                    startColumn: 7,
                                                    startLineNumber: 6,
                                                },
                                                source: {
                                                    bytecode: lib_1.hexToBin('0151'),
                                                    range: {
                                                        endColumn: 15,
                                                        endLineNumber: 6,
                                                        startColumn: 9,
                                                        startLineNumber: 6,
                                                    },
                                                    script: [
                                                        {
                                                            bytecode: lib_1.hexToBin('0151'),
                                                            push: {
                                                                bytecode: lib_1.hexToBin('51'),
                                                                range: {
                                                                    endColumn: 14,
                                                                    endLineNumber: 6,
                                                                    startColumn: 10,
                                                                    startLineNumber: 6,
                                                                },
                                                                script: [
                                                                    {
                                                                        bytecode: lib_1.hexToBin('51'),
                                                                        range: {
                                                                            endColumn: 14,
                                                                            endLineNumber: 6,
                                                                            startColumn: 10,
                                                                            startLineNumber: 6,
                                                                        },
                                                                    },
                                                                ],
                                                            },
                                                            range: {
                                                                endColumn: 15,
                                                                endLineNumber: 6,
                                                                startColumn: 9,
                                                                startLineNumber: 6,
                                                            },
                                                        },
                                                    ],
                                                },
                                                trace: [
                                                    {
                                                        alternateStack: [],
                                                        correspondingOutput: lib_1.hexToBin('000000000000000000'),
                                                        executionStack: [],
                                                        instructions: [],
                                                        ip: 0,
                                                        lastCodeSeparator: -1,
                                                        locktime: 0,
                                                        operationCount: 0,
                                                        outpointIndex: 0,
                                                        outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                                                        outputValue: lib_1.hexToBin('0000000000000000'),
                                                        sequenceNumber: 0,
                                                        signatureOperationsCount: 0,
                                                        signedMessages: [],
                                                        stack: [],
                                                        transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                                                        transactionOutputs: lib_1.hexToBin('000000000000000000'),
                                                        transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                                                        version: 0,
                                                    },
                                                    {
                                                        alternateStack: [],
                                                        correspondingOutput: lib_1.hexToBin('000000000000000000'),
                                                        executionStack: [],
                                                        instructions: [
                                                            {
                                                                data: lib_1.hexToBin('51'),
                                                                opcode: 1,
                                                            },
                                                        ],
                                                        ip: 0,
                                                        lastCodeSeparator: -1,
                                                        locktime: 0,
                                                        operationCount: 0,
                                                        outpointIndex: 0,
                                                        outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                                                        outputValue: lib_1.hexToBin('0000000000000000'),
                                                        sequenceNumber: 0,
                                                        signatureOperationsCount: 0,
                                                        signedMessages: [],
                                                        stack: [],
                                                        transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                                                        transactionOutputs: lib_1.hexToBin('000000000000000000'),
                                                        transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                                                        version: 0,
                                                    },
                                                    {
                                                        alternateStack: [],
                                                        correspondingOutput: lib_1.hexToBin('000000000000000000'),
                                                        executionStack: [],
                                                        instructions: [
                                                            {
                                                                data: lib_1.hexToBin('51'),
                                                                opcode: 1,
                                                            },
                                                        ],
                                                        ip: 1,
                                                        lastCodeSeparator: -1,
                                                        locktime: 0,
                                                        operationCount: 0,
                                                        outpointIndex: 0,
                                                        outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                                                        outputValue: lib_1.hexToBin('0000000000000000'),
                                                        sequenceNumber: 0,
                                                        signatureOperationsCount: 0,
                                                        signedMessages: [],
                                                        stack: [lib_1.hexToBin('51')],
                                                        transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                                                        transactionOutputs: lib_1.hexToBin('000000000000000000'),
                                                        transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                                                        version: 0,
                                                    },
                                                    {
                                                        alternateStack: [],
                                                        correspondingOutput: lib_1.hexToBin('000000000000000000'),
                                                        executionStack: [],
                                                        instructions: [
                                                            {
                                                                data: lib_1.hexToBin('51'),
                                                                opcode: 1,
                                                            },
                                                        ],
                                                        ip: 1,
                                                        lastCodeSeparator: -1,
                                                        locktime: 0,
                                                        operationCount: 0,
                                                        outpointIndex: 0,
                                                        outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                                                        outputValue: lib_1.hexToBin('0000000000000000'),
                                                        sequenceNumber: 0,
                                                        signatureOperationsCount: 0,
                                                        signedMessages: [],
                                                        stack: [lib_1.hexToBin('51')],
                                                        transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                                                        transactionOutputs: lib_1.hexToBin('000000000000000000'),
                                                        transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                                                        version: 0,
                                                    },
                                                ],
                                            },
                                            {
                                                bytecode: lib_1.hexToBin('52'),
                                                range: {
                                                    endColumn: 11,
                                                    endLineNumber: 8,
                                                    startColumn: 7,
                                                    startLineNumber: 8,
                                                },
                                            },
                                            {
                                                bytecode: lib_1.hexToBin('93'),
                                                range: {
                                                    endColumn: 13,
                                                    endLineNumber: 9,
                                                    startColumn: 7,
                                                    startLineNumber: 9,
                                                },
                                            },
                                        ],
                                    },
                                    trace: [
                                        {
                                            alternateStack: [],
                                            correspondingOutput: lib_1.hexToBin('000000000000000000'),
                                            executionStack: [],
                                            instructions: [],
                                            ip: 0,
                                            lastCodeSeparator: -1,
                                            locktime: 0,
                                            operationCount: 0,
                                            outpointIndex: 0,
                                            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                                            outputValue: lib_1.hexToBin('0000000000000000'),
                                            sequenceNumber: 0,
                                            signatureOperationsCount: 0,
                                            signedMessages: [],
                                            stack: [],
                                            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                                            transactionOutputs: lib_1.hexToBin('000000000000000000'),
                                            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                                            version: 0,
                                        },
                                        {
                                            alternateStack: [],
                                            correspondingOutput: lib_1.hexToBin('000000000000000000'),
                                            executionStack: [],
                                            instructions: [
                                                {
                                                    opcode: 81,
                                                },
                                                {
                                                    opcode: 82,
                                                },
                                                {
                                                    opcode: 147,
                                                },
                                            ],
                                            ip: 0,
                                            lastCodeSeparator: -1,
                                            locktime: 0,
                                            operationCount: 0,
                                            outpointIndex: 0,
                                            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                                            outputValue: lib_1.hexToBin('0000000000000000'),
                                            sequenceNumber: 0,
                                            signatureOperationsCount: 0,
                                            signedMessages: [],
                                            stack: [],
                                            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                                            transactionOutputs: lib_1.hexToBin('000000000000000000'),
                                            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                                            version: 0,
                                        },
                                        {
                                            alternateStack: [],
                                            correspondingOutput: lib_1.hexToBin('000000000000000000'),
                                            executionStack: [],
                                            instructions: [
                                                {
                                                    opcode: 81,
                                                },
                                                {
                                                    opcode: 82,
                                                },
                                                {
                                                    opcode: 147,
                                                },
                                            ],
                                            ip: 1,
                                            lastCodeSeparator: -1,
                                            locktime: 0,
                                            operationCount: 0,
                                            outpointIndex: 0,
                                            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                                            outputValue: lib_1.hexToBin('0000000000000000'),
                                            sequenceNumber: 0,
                                            signatureOperationsCount: 0,
                                            signedMessages: [],
                                            stack: [lib_1.hexToBin('01')],
                                            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                                            transactionOutputs: lib_1.hexToBin('000000000000000000'),
                                            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                                            version: 0,
                                        },
                                        {
                                            alternateStack: [],
                                            correspondingOutput: lib_1.hexToBin('000000000000000000'),
                                            executionStack: [],
                                            instructions: [
                                                {
                                                    opcode: 81,
                                                },
                                                {
                                                    opcode: 82,
                                                },
                                                {
                                                    opcode: 147,
                                                },
                                            ],
                                            ip: 2,
                                            lastCodeSeparator: -1,
                                            locktime: 0,
                                            operationCount: 0,
                                            outpointIndex: 0,
                                            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                                            outputValue: lib_1.hexToBin('0000000000000000'),
                                            sequenceNumber: 0,
                                            signatureOperationsCount: 0,
                                            signedMessages: [],
                                            stack: [lib_1.hexToBin('01'), lib_1.hexToBin('02')],
                                            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                                            transactionOutputs: lib_1.hexToBin('000000000000000000'),
                                            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                                            version: 0,
                                        },
                                        {
                                            alternateStack: [],
                                            correspondingOutput: lib_1.hexToBin('000000000000000000'),
                                            executionStack: [],
                                            instructions: [
                                                {
                                                    opcode: 81,
                                                },
                                                {
                                                    opcode: 82,
                                                },
                                                {
                                                    opcode: 147,
                                                },
                                            ],
                                            ip: 3,
                                            lastCodeSeparator: -1,
                                            locktime: 0,
                                            operationCount: 1,
                                            outpointIndex: 0,
                                            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                                            outputValue: lib_1.hexToBin('0000000000000000'),
                                            sequenceNumber: 0,
                                            signatureOperationsCount: 0,
                                            signedMessages: [],
                                            stack: [lib_1.hexToBin('03')],
                                            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                                            transactionOutputs: lib_1.hexToBin('000000000000000000'),
                                            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                                            version: 0,
                                        },
                                        {
                                            alternateStack: [],
                                            correspondingOutput: lib_1.hexToBin('000000000000000000'),
                                            executionStack: [],
                                            instructions: [
                                                {
                                                    opcode: 81,
                                                },
                                                {
                                                    opcode: 82,
                                                },
                                                {
                                                    opcode: 147,
                                                },
                                            ],
                                            ip: 3,
                                            lastCodeSeparator: -1,
                                            locktime: 0,
                                            operationCount: 1,
                                            outpointIndex: 0,
                                            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                                            outputValue: lib_1.hexToBin('0000000000000000'),
                                            sequenceNumber: 0,
                                            signatureOperationsCount: 0,
                                            signedMessages: [],
                                            stack: [lib_1.hexToBin('03')],
                                            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                                            transactionOutputs: lib_1.hexToBin('000000000000000000'),
                                            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                                            version: 0,
                                        },
                                    ],
                                },
                                {
                                    bytecode: lib_1.hexToBin('616263'),
                                    range: {
                                        endColumn: 6,
                                        endLineNumber: 13,
                                        startColumn: 5,
                                        startLineNumber: 12,
                                    },
                                    source: {
                                        bytecode: lib_1.hexToBin('03616263'),
                                        range: {
                                            endColumn: 15,
                                            endLineNumber: 12,
                                            startColumn: 8,
                                            startLineNumber: 12,
                                        },
                                        script: [
                                            {
                                                bytecode: lib_1.hexToBin('03616263'),
                                                push: {
                                                    bytecode: lib_1.hexToBin('616263'),
                                                    range: {
                                                        endColumn: 14,
                                                        endLineNumber: 12,
                                                        startColumn: 9,
                                                        startLineNumber: 12,
                                                    },
                                                    script: [
                                                        {
                                                            bytecode: lib_1.hexToBin('616263'),
                                                            range: {
                                                                endColumn: 14,
                                                                endLineNumber: 12,
                                                                startColumn: 9,
                                                                startLineNumber: 12,
                                                            },
                                                        },
                                                    ],
                                                },
                                                range: {
                                                    endColumn: 15,
                                                    endLineNumber: 12,
                                                    startColumn: 8,
                                                    startLineNumber: 12,
                                                },
                                            },
                                        ],
                                    },
                                    trace: [
                                        {
                                            alternateStack: [],
                                            correspondingOutput: lib_1.hexToBin('000000000000000000'),
                                            executionStack: [],
                                            instructions: [],
                                            ip: 0,
                                            lastCodeSeparator: -1,
                                            locktime: 0,
                                            operationCount: 0,
                                            outpointIndex: 0,
                                            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                                            outputValue: lib_1.hexToBin('0000000000000000'),
                                            sequenceNumber: 0,
                                            signatureOperationsCount: 0,
                                            signedMessages: [],
                                            stack: [],
                                            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                                            transactionOutputs: lib_1.hexToBin('000000000000000000'),
                                            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                                            version: 0,
                                        },
                                        {
                                            alternateStack: [],
                                            correspondingOutput: lib_1.hexToBin('000000000000000000'),
                                            executionStack: [],
                                            instructions: [
                                                {
                                                    data: lib_1.hexToBin('616263'),
                                                    opcode: 3,
                                                },
                                            ],
                                            ip: 0,
                                            lastCodeSeparator: -1,
                                            locktime: 0,
                                            operationCount: 0,
                                            outpointIndex: 0,
                                            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                                            outputValue: lib_1.hexToBin('0000000000000000'),
                                            sequenceNumber: 0,
                                            signatureOperationsCount: 0,
                                            signedMessages: [],
                                            stack: [],
                                            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                                            transactionOutputs: lib_1.hexToBin('000000000000000000'),
                                            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                                            version: 0,
                                        },
                                        {
                                            alternateStack: [],
                                            correspondingOutput: lib_1.hexToBin('000000000000000000'),
                                            executionStack: [],
                                            instructions: [
                                                {
                                                    data: lib_1.hexToBin('616263'),
                                                    opcode: 3,
                                                },
                                            ],
                                            ip: 1,
                                            lastCodeSeparator: -1,
                                            locktime: 0,
                                            operationCount: 0,
                                            outpointIndex: 0,
                                            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                                            outputValue: lib_1.hexToBin('0000000000000000'),
                                            sequenceNumber: 0,
                                            signatureOperationsCount: 0,
                                            signedMessages: [],
                                            stack: [lib_1.hexToBin('616263')],
                                            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                                            transactionOutputs: lib_1.hexToBin('000000000000000000'),
                                            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                                            version: 0,
                                        },
                                        {
                                            alternateStack: [],
                                            correspondingOutput: lib_1.hexToBin('000000000000000000'),
                                            executionStack: [],
                                            instructions: [
                                                {
                                                    data: lib_1.hexToBin('616263'),
                                                    opcode: 3,
                                                },
                                            ],
                                            ip: 1,
                                            lastCodeSeparator: -1,
                                            locktime: 0,
                                            operationCount: 0,
                                            outpointIndex: 0,
                                            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                                            outputValue: lib_1.hexToBin('0000000000000000'),
                                            sequenceNumber: 0,
                                            signatureOperationsCount: 0,
                                            signedMessages: [],
                                            stack: [lib_1.hexToBin('616263')],
                                            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                                            transactionOutputs: lib_1.hexToBin('000000000000000000'),
                                            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                                            version: 0,
                                        },
                                    ],
                                },
                                {
                                    bytecode: lib_1.hexToBin('7e'),
                                    range: {
                                        endColumn: 9,
                                        endLineNumber: 14,
                                        startColumn: 3,
                                        startLineNumber: 14,
                                    },
                                },
                                {
                                    bytecode: lib_1.hexToBin('7e'),
                                    range: {
                                        endColumn: 9,
                                        endLineNumber: 15,
                                        startColumn: 3,
                                        startLineNumber: 15,
                                    },
                                },
                            ],
                        },
                        trace: [
                            {
                                alternateStack: [],
                                correspondingOutput: lib_1.hexToBin('000000000000000000'),
                                executionStack: [],
                                instructions: [],
                                ip: 0,
                                lastCodeSeparator: -1,
                                locktime: 0,
                                operationCount: 0,
                                outpointIndex: 0,
                                outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                                outputValue: lib_1.hexToBin('0000000000000000'),
                                sequenceNumber: 0,
                                signatureOperationsCount: 0,
                                signedMessages: [],
                                stack: [],
                                transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                                transactionOutputs: lib_1.hexToBin('000000000000000000'),
                                transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                                version: 0,
                            },
                            {
                                alternateStack: [],
                                correspondingOutput: lib_1.hexToBin('000000000000000000'),
                                executionStack: [],
                                instructions: [
                                    {
                                        data: lib_1.hexToBin(''),
                                        opcode: 0,
                                    },
                                    {
                                        data: lib_1.hexToBin(''),
                                        opcode: 0,
                                    },
                                    {
                                        data: lib_1.hexToBin('616263'),
                                        opcode: 3,
                                    },
                                    {
                                        opcode: 126,
                                    },
                                    {
                                        opcode: 126,
                                    },
                                ],
                                ip: 0,
                                lastCodeSeparator: -1,
                                locktime: 0,
                                operationCount: 0,
                                outpointIndex: 0,
                                outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                                outputValue: lib_1.hexToBin('0000000000000000'),
                                sequenceNumber: 0,
                                signatureOperationsCount: 0,
                                signedMessages: [],
                                stack: [],
                                transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                                transactionOutputs: lib_1.hexToBin('000000000000000000'),
                                transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                                version: 0,
                            },
                            {
                                alternateStack: [],
                                correspondingOutput: lib_1.hexToBin('000000000000000000'),
                                executionStack: [],
                                instructions: [
                                    {
                                        data: lib_1.hexToBin(''),
                                        opcode: 0,
                                    },
                                    {
                                        data: lib_1.hexToBin(''),
                                        opcode: 0,
                                    },
                                    {
                                        data: lib_1.hexToBin('616263'),
                                        opcode: 3,
                                    },
                                    {
                                        opcode: 126,
                                    },
                                    {
                                        opcode: 126,
                                    },
                                ],
                                ip: 1,
                                lastCodeSeparator: -1,
                                locktime: 0,
                                operationCount: 0,
                                outpointIndex: 0,
                                outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                                outputValue: lib_1.hexToBin('0000000000000000'),
                                sequenceNumber: 0,
                                signatureOperationsCount: 0,
                                signedMessages: [],
                                stack: [lib_1.hexToBin('')],
                                transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                                transactionOutputs: lib_1.hexToBin('000000000000000000'),
                                transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                                version: 0,
                            },
                            {
                                alternateStack: [],
                                correspondingOutput: lib_1.hexToBin('000000000000000000'),
                                executionStack: [],
                                instructions: [
                                    {
                                        data: lib_1.hexToBin(''),
                                        opcode: 0,
                                    },
                                    {
                                        data: lib_1.hexToBin(''),
                                        opcode: 0,
                                    },
                                    {
                                        data: lib_1.hexToBin('616263'),
                                        opcode: 3,
                                    },
                                    {
                                        opcode: 126,
                                    },
                                    {
                                        opcode: 126,
                                    },
                                ],
                                ip: 2,
                                lastCodeSeparator: -1,
                                locktime: 0,
                                operationCount: 0,
                                outpointIndex: 0,
                                outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                                outputValue: lib_1.hexToBin('0000000000000000'),
                                sequenceNumber: 0,
                                signatureOperationsCount: 0,
                                signedMessages: [],
                                stack: [lib_1.hexToBin(''), lib_1.hexToBin('')],
                                transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                                transactionOutputs: lib_1.hexToBin('000000000000000000'),
                                transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                                version: 0,
                            },
                            {
                                alternateStack: [],
                                correspondingOutput: lib_1.hexToBin('000000000000000000'),
                                executionStack: [],
                                instructions: [
                                    {
                                        data: lib_1.hexToBin(''),
                                        opcode: 0,
                                    },
                                    {
                                        data: lib_1.hexToBin(''),
                                        opcode: 0,
                                    },
                                    {
                                        data: lib_1.hexToBin('616263'),
                                        opcode: 3,
                                    },
                                    {
                                        opcode: 126,
                                    },
                                    {
                                        opcode: 126,
                                    },
                                ],
                                ip: 3,
                                lastCodeSeparator: -1,
                                locktime: 0,
                                operationCount: 0,
                                outpointIndex: 0,
                                outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                                outputValue: lib_1.hexToBin('0000000000000000'),
                                sequenceNumber: 0,
                                signatureOperationsCount: 0,
                                signedMessages: [],
                                stack: [lib_1.hexToBin(''), lib_1.hexToBin(''), lib_1.hexToBin('616263')],
                                transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                                transactionOutputs: lib_1.hexToBin('000000000000000000'),
                                transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                                version: 0,
                            },
                            {
                                alternateStack: [],
                                correspondingOutput: lib_1.hexToBin('000000000000000000'),
                                executionStack: [],
                                instructions: [
                                    {
                                        data: lib_1.hexToBin(''),
                                        opcode: 0,
                                    },
                                    {
                                        data: lib_1.hexToBin(''),
                                        opcode: 0,
                                    },
                                    {
                                        data: lib_1.hexToBin('616263'),
                                        opcode: 3,
                                    },
                                    {
                                        opcode: 126,
                                    },
                                    {
                                        opcode: 126,
                                    },
                                ],
                                ip: 4,
                                lastCodeSeparator: -1,
                                locktime: 0,
                                operationCount: 1,
                                outpointIndex: 0,
                                outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                                outputValue: lib_1.hexToBin('0000000000000000'),
                                sequenceNumber: 0,
                                signatureOperationsCount: 0,
                                signedMessages: [],
                                stack: [lib_1.hexToBin(''), lib_1.hexToBin('616263')],
                                transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                                transactionOutputs: lib_1.hexToBin('000000000000000000'),
                                transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                                version: 0,
                            },
                            {
                                alternateStack: [],
                                correspondingOutput: lib_1.hexToBin('000000000000000000'),
                                executionStack: [],
                                instructions: [
                                    {
                                        data: lib_1.hexToBin(''),
                                        opcode: 0,
                                    },
                                    {
                                        data: lib_1.hexToBin(''),
                                        opcode: 0,
                                    },
                                    {
                                        data: lib_1.hexToBin('616263'),
                                        opcode: 3,
                                    },
                                    {
                                        opcode: 126,
                                    },
                                    {
                                        opcode: 126,
                                    },
                                ],
                                ip: 5,
                                lastCodeSeparator: -1,
                                locktime: 0,
                                operationCount: 2,
                                outpointIndex: 0,
                                outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                                outputValue: lib_1.hexToBin('0000000000000000'),
                                sequenceNumber: 0,
                                signatureOperationsCount: 0,
                                signedMessages: [],
                                stack: [lib_1.hexToBin('616263')],
                                transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                                transactionOutputs: lib_1.hexToBin('000000000000000000'),
                                transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                                version: 0,
                            },
                            {
                                alternateStack: [],
                                correspondingOutput: lib_1.hexToBin('000000000000000000'),
                                executionStack: [],
                                instructions: [
                                    {
                                        data: lib_1.hexToBin(''),
                                        opcode: 0,
                                    },
                                    {
                                        data: lib_1.hexToBin(''),
                                        opcode: 0,
                                    },
                                    {
                                        data: lib_1.hexToBin('616263'),
                                        opcode: 3,
                                    },
                                    {
                                        opcode: 126,
                                    },
                                    {
                                        opcode: 126,
                                    },
                                ],
                                ip: 5,
                                lastCodeSeparator: -1,
                                locktime: 0,
                                operationCount: 2,
                                outpointIndex: 0,
                                outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                                outputValue: lib_1.hexToBin('0000000000000000'),
                                sequenceNumber: 0,
                                signatureOperationsCount: 0,
                                signedMessages: [],
                                stack: [lib_1.hexToBin('616263')],
                                transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                                transactionOutputs: lib_1.hexToBin('000000000000000000'),
                                transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                                version: 0,
                            },
                        ],
                    },
                    {
                        bytecode: lib_1.hexToBin(''),
                        range: {
                            endColumn: 15,
                            endLineNumber: 20,
                            startColumn: 3,
                            startLineNumber: 17,
                        },
                        source: {
                            bytecode: lib_1.hexToBin('00007e'),
                            range: {
                                endColumn: 14,
                                endLineNumber: 20,
                                startColumn: 5,
                                startLineNumber: 18,
                            },
                            script: [
                                {
                                    bytecode: lib_1.hexToBin('00'),
                                    push: {
                                        bytecode: lib_1.hexToBin(''),
                                        range: {
                                            endColumn: 7,
                                            endLineNumber: 18,
                                            startColumn: 6,
                                            startLineNumber: 18,
                                        },
                                        script: [
                                            {
                                                bytecode: lib_1.hexToBin(''),
                                                range: {
                                                    endColumn: 7,
                                                    endLineNumber: 18,
                                                    startColumn: 6,
                                                    startLineNumber: 18,
                                                },
                                            },
                                        ],
                                    },
                                    range: {
                                        endColumn: 8,
                                        endLineNumber: 18,
                                        startColumn: 5,
                                        startLineNumber: 18,
                                    },
                                },
                                {
                                    bytecode: lib_1.hexToBin('00'),
                                    push: {
                                        bytecode: lib_1.hexToBin(''),
                                        range: {
                                            endColumn: 7,
                                            endLineNumber: 19,
                                            startColumn: 6,
                                            startLineNumber: 19,
                                        },
                                        script: [
                                            {
                                                bytecode: lib_1.hexToBin(''),
                                                range: {
                                                    endColumn: 7,
                                                    endLineNumber: 19,
                                                    startColumn: 6,
                                                    startLineNumber: 19,
                                                },
                                            },
                                        ],
                                    },
                                    range: {
                                        endColumn: 8,
                                        endLineNumber: 19,
                                        startColumn: 5,
                                        startLineNumber: 19,
                                    },
                                },
                                {
                                    bytecode: lib_1.hexToBin('7e'),
                                    range: {
                                        endColumn: 14,
                                        endLineNumber: 20,
                                        startColumn: 3,
                                        startLineNumber: 20,
                                    },
                                    source: {
                                        bytecode: lib_1.hexToBin('017e'),
                                        range: {
                                            endColumn: 13,
                                            endLineNumber: 20,
                                            startColumn: 5,
                                            startLineNumber: 20,
                                        },
                                        script: [
                                            {
                                                bytecode: lib_1.hexToBin('017e'),
                                                push: {
                                                    bytecode: lib_1.hexToBin('7e'),
                                                    range: {
                                                        endColumn: 12,
                                                        endLineNumber: 20,
                                                        startColumn: 6,
                                                        startLineNumber: 20,
                                                    },
                                                    script: [
                                                        {
                                                            bytecode: lib_1.hexToBin('7e'),
                                                            range: {
                                                                endColumn: 12,
                                                                endLineNumber: 20,
                                                                startColumn: 6,
                                                                startLineNumber: 20,
                                                            },
                                                        },
                                                    ],
                                                },
                                                range: {
                                                    endColumn: 13,
                                                    endLineNumber: 20,
                                                    startColumn: 5,
                                                    startLineNumber: 20,
                                                },
                                            },
                                        ],
                                    },
                                    trace: [
                                        {
                                            alternateStack: [],
                                            correspondingOutput: lib_1.hexToBin('000000000000000000'),
                                            executionStack: [],
                                            instructions: [],
                                            ip: 0,
                                            lastCodeSeparator: -1,
                                            locktime: 0,
                                            operationCount: 0,
                                            outpointIndex: 0,
                                            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                                            outputValue: lib_1.hexToBin('0000000000000000'),
                                            sequenceNumber: 0,
                                            signatureOperationsCount: 0,
                                            signedMessages: [],
                                            stack: [],
                                            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                                            transactionOutputs: lib_1.hexToBin('000000000000000000'),
                                            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                                            version: 0,
                                        },
                                        {
                                            alternateStack: [],
                                            correspondingOutput: lib_1.hexToBin('000000000000000000'),
                                            executionStack: [],
                                            instructions: [
                                                {
                                                    data: lib_1.hexToBin('7e'),
                                                    opcode: 1,
                                                },
                                            ],
                                            ip: 0,
                                            lastCodeSeparator: -1,
                                            locktime: 0,
                                            operationCount: 0,
                                            outpointIndex: 0,
                                            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                                            outputValue: lib_1.hexToBin('0000000000000000'),
                                            sequenceNumber: 0,
                                            signatureOperationsCount: 0,
                                            signedMessages: [],
                                            stack: [],
                                            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                                            transactionOutputs: lib_1.hexToBin('000000000000000000'),
                                            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                                            version: 0,
                                        },
                                        {
                                            alternateStack: [],
                                            correspondingOutput: lib_1.hexToBin('000000000000000000'),
                                            executionStack: [],
                                            instructions: [
                                                {
                                                    data: lib_1.hexToBin('7e'),
                                                    opcode: 1,
                                                },
                                            ],
                                            ip: 1,
                                            lastCodeSeparator: -1,
                                            locktime: 0,
                                            operationCount: 0,
                                            outpointIndex: 0,
                                            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                                            outputValue: lib_1.hexToBin('0000000000000000'),
                                            sequenceNumber: 0,
                                            signatureOperationsCount: 0,
                                            signedMessages: [],
                                            stack: [lib_1.hexToBin('7e')],
                                            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                                            transactionOutputs: lib_1.hexToBin('000000000000000000'),
                                            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                                            version: 0,
                                        },
                                        {
                                            alternateStack: [],
                                            correspondingOutput: lib_1.hexToBin('000000000000000000'),
                                            executionStack: [],
                                            instructions: [
                                                {
                                                    data: lib_1.hexToBin('7e'),
                                                    opcode: 1,
                                                },
                                            ],
                                            ip: 1,
                                            lastCodeSeparator: -1,
                                            locktime: 0,
                                            operationCount: 0,
                                            outpointIndex: 0,
                                            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                                            outputValue: lib_1.hexToBin('0000000000000000'),
                                            sequenceNumber: 0,
                                            signatureOperationsCount: 0,
                                            signedMessages: [],
                                            stack: [lib_1.hexToBin('7e')],
                                            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                                            transactionOutputs: lib_1.hexToBin('000000000000000000'),
                                            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                                            version: 0,
                                        },
                                    ],
                                },
                            ],
                        },
                        trace: [
                            {
                                alternateStack: [],
                                correspondingOutput: lib_1.hexToBin('000000000000000000'),
                                executionStack: [],
                                instructions: [],
                                ip: 0,
                                lastCodeSeparator: -1,
                                locktime: 0,
                                operationCount: 0,
                                outpointIndex: 0,
                                outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                                outputValue: lib_1.hexToBin('0000000000000000'),
                                sequenceNumber: 0,
                                signatureOperationsCount: 0,
                                signedMessages: [],
                                stack: [],
                                transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                                transactionOutputs: lib_1.hexToBin('000000000000000000'),
                                transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                                version: 0,
                            },
                            {
                                alternateStack: [],
                                correspondingOutput: lib_1.hexToBin('000000000000000000'),
                                executionStack: [],
                                instructions: [
                                    {
                                        data: lib_1.hexToBin(''),
                                        opcode: 0,
                                    },
                                    {
                                        data: lib_1.hexToBin(''),
                                        opcode: 0,
                                    },
                                    {
                                        opcode: 126,
                                    },
                                ],
                                ip: 0,
                                lastCodeSeparator: -1,
                                locktime: 0,
                                operationCount: 0,
                                outpointIndex: 0,
                                outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                                outputValue: lib_1.hexToBin('0000000000000000'),
                                sequenceNumber: 0,
                                signatureOperationsCount: 0,
                                signedMessages: [],
                                stack: [],
                                transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                                transactionOutputs: lib_1.hexToBin('000000000000000000'),
                                transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                                version: 0,
                            },
                            {
                                alternateStack: [],
                                correspondingOutput: lib_1.hexToBin('000000000000000000'),
                                executionStack: [],
                                instructions: [
                                    {
                                        data: lib_1.hexToBin(''),
                                        opcode: 0,
                                    },
                                    {
                                        data: lib_1.hexToBin(''),
                                        opcode: 0,
                                    },
                                    {
                                        opcode: 126,
                                    },
                                ],
                                ip: 1,
                                lastCodeSeparator: -1,
                                locktime: 0,
                                operationCount: 0,
                                outpointIndex: 0,
                                outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                                outputValue: lib_1.hexToBin('0000000000000000'),
                                sequenceNumber: 0,
                                signatureOperationsCount: 0,
                                signedMessages: [],
                                stack: [lib_1.hexToBin('')],
                                transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                                transactionOutputs: lib_1.hexToBin('000000000000000000'),
                                transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                                version: 0,
                            },
                            {
                                alternateStack: [],
                                correspondingOutput: lib_1.hexToBin('000000000000000000'),
                                executionStack: [],
                                instructions: [
                                    {
                                        data: lib_1.hexToBin(''),
                                        opcode: 0,
                                    },
                                    {
                                        data: lib_1.hexToBin(''),
                                        opcode: 0,
                                    },
                                    {
                                        opcode: 126,
                                    },
                                ],
                                ip: 2,
                                lastCodeSeparator: -1,
                                locktime: 0,
                                operationCount: 0,
                                outpointIndex: 0,
                                outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                                outputValue: lib_1.hexToBin('0000000000000000'),
                                sequenceNumber: 0,
                                signatureOperationsCount: 0,
                                signedMessages: [],
                                stack: [lib_1.hexToBin(''), lib_1.hexToBin('')],
                                transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                                transactionOutputs: lib_1.hexToBin('000000000000000000'),
                                transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                                version: 0,
                            },
                            {
                                alternateStack: [],
                                correspondingOutput: lib_1.hexToBin('000000000000000000'),
                                executionStack: [],
                                instructions: [
                                    {
                                        data: lib_1.hexToBin(''),
                                        opcode: 0,
                                    },
                                    {
                                        data: lib_1.hexToBin(''),
                                        opcode: 0,
                                    },
                                    {
                                        opcode: 126,
                                    },
                                ],
                                ip: 3,
                                lastCodeSeparator: -1,
                                locktime: 0,
                                operationCount: 1,
                                outpointIndex: 0,
                                outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                                outputValue: lib_1.hexToBin('0000000000000000'),
                                sequenceNumber: 0,
                                signatureOperationsCount: 0,
                                signedMessages: [],
                                stack: [lib_1.hexToBin('')],
                                transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                                transactionOutputs: lib_1.hexToBin('000000000000000000'),
                                transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                                version: 0,
                            },
                            {
                                alternateStack: [],
                                correspondingOutput: lib_1.hexToBin('000000000000000000'),
                                executionStack: [],
                                instructions: [
                                    {
                                        data: lib_1.hexToBin(''),
                                        opcode: 0,
                                    },
                                    {
                                        data: lib_1.hexToBin(''),
                                        opcode: 0,
                                    },
                                    {
                                        opcode: 126,
                                    },
                                ],
                                ip: 3,
                                lastCodeSeparator: -1,
                                locktime: 0,
                                operationCount: 1,
                                outpointIndex: 0,
                                outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                                outputValue: lib_1.hexToBin('0000000000000000'),
                                sequenceNumber: 0,
                                signatureOperationsCount: 0,
                                signedMessages: [],
                                stack: [lib_1.hexToBin('')],
                                transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                                transactionOutputs: lib_1.hexToBin('000000000000000000'),
                                transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                                version: 0,
                            },
                        ],
                    },
                ],
            },
            range: {
                endColumn: 2,
                endLineNumber: 21,
                startColumn: 1,
                startLineNumber: 3,
            },
        },
    ], lib_1.stringifyTestVector(nodes));
    t.deepEqual(traceWithUnlockingPhaseAndFinalState, [
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            executionStack: [],
            instructions: [],
            ip: 0,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 0,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [],
            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
            version: 0,
        },
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            executionStack: [],
            instructions: [
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin('616263'),
                    opcode: 3,
                },
            ],
            ip: 0,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 0,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [],
            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
            version: 0,
        },
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            executionStack: [],
            instructions: [
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin('616263'),
                    opcode: 3,
                },
            ],
            ip: 1,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 0,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [lib_1.hexToBin('')],
            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
            version: 0,
        },
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            executionStack: [],
            instructions: [
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin('616263'),
                    opcode: 3,
                },
            ],
            ip: 2,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 0,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [lib_1.hexToBin(''), lib_1.hexToBin('616263')],
            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
            version: 0,
        },
        {
            alternateStack: [],
            correspondingOutput: lib_1.hexToBin('000000000000000000'),
            executionStack: [],
            instructions: [
                {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                {
                    data: lib_1.hexToBin('616263'),
                    opcode: 3,
                },
            ],
            ip: 2,
            lastCodeSeparator: -1,
            locktime: 0,
            operationCount: 0,
            outpointIndex: 0,
            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
            outputValue: lib_1.hexToBin('0000000000000000'),
            sequenceNumber: 0,
            signatureOperationsCount: 0,
            signedMessages: [],
            stack: [lib_1.hexToBin(''), lib_1.hexToBin('616263')],
            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
            transactionOutputs: lib_1.hexToBin('000000000000000000'),
            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
            version: 0,
        },
    ], lib_1.stringifyTestVector(traceWithUnlockingPhaseAndFinalState));
    t.deepEqual(sampleResult, {
        samples: [
            {
                evaluationRange: {
                    endColumn: 2,
                    endLineNumber: 21,
                    startColumn: 1,
                    startLineNumber: 1,
                },
                internalStates: [],
                range: {
                    endColumn: 1,
                    endLineNumber: 1,
                    startColumn: 1,
                    startLineNumber: 1,
                },
                state: {
                    alternateStack: [],
                    correspondingOutput: lib_1.hexToBin('000000000000000000'),
                    executionStack: [],
                    instructions: [
                        {
                            data: lib_1.hexToBin(''),
                            opcode: 0,
                        },
                        {
                            data: lib_1.hexToBin('616263'),
                            opcode: 3,
                        },
                    ],
                    ip: 0,
                    lastCodeSeparator: -1,
                    locktime: 0,
                    operationCount: 0,
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    outputValue: lib_1.hexToBin('0000000000000000'),
                    sequenceNumber: 0,
                    signatureOperationsCount: 0,
                    signedMessages: [],
                    stack: [],
                    transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                    transactionOutputs: lib_1.hexToBin('000000000000000000'),
                    transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                    version: 0,
                },
            },
            {
                evaluationRange: {
                    endColumn: 2,
                    endLineNumber: 21,
                    startColumn: 1,
                    startLineNumber: 1,
                },
                instruction: {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                internalStates: [],
                range: {
                    endColumn: 5,
                    endLineNumber: 1,
                    startColumn: 1,
                    startLineNumber: 1,
                },
                state: {
                    alternateStack: [],
                    correspondingOutput: lib_1.hexToBin('000000000000000000'),
                    executionStack: [],
                    instructions: [
                        {
                            data: lib_1.hexToBin(''),
                            opcode: 0,
                        },
                        {
                            data: lib_1.hexToBin('616263'),
                            opcode: 3,
                        },
                    ],
                    ip: 1,
                    lastCodeSeparator: -1,
                    locktime: 0,
                    operationCount: 0,
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    outputValue: lib_1.hexToBin('0000000000000000'),
                    sequenceNumber: 0,
                    signatureOperationsCount: 0,
                    signedMessages: [],
                    stack: [lib_1.hexToBin('')],
                    transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                    transactionOutputs: lib_1.hexToBin('000000000000000000'),
                    transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                    version: 0,
                },
            },
            {
                evaluationRange: {
                    endColumn: 3,
                    endLineNumber: 16,
                    startColumn: 5,
                    startLineNumber: 4,
                },
                internalStates: [],
                range: {
                    endColumn: 5,
                    endLineNumber: 4,
                    startColumn: 5,
                    startLineNumber: 4,
                },
                state: {
                    alternateStack: [],
                    correspondingOutput: lib_1.hexToBin('000000000000000000'),
                    executionStack: [],
                    instructions: [
                        {
                            data: lib_1.hexToBin(''),
                            opcode: 0,
                        },
                        {
                            data: lib_1.hexToBin(''),
                            opcode: 0,
                        },
                        {
                            data: lib_1.hexToBin('616263'),
                            opcode: 3,
                        },
                        {
                            opcode: 126,
                        },
                        {
                            opcode: 126,
                        },
                    ],
                    ip: 0,
                    lastCodeSeparator: -1,
                    locktime: 0,
                    operationCount: 0,
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    outputValue: lib_1.hexToBin('0000000000000000'),
                    sequenceNumber: 0,
                    signatureOperationsCount: 0,
                    signedMessages: [],
                    stack: [],
                    transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                    transactionOutputs: lib_1.hexToBin('000000000000000000'),
                    transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                    version: 0,
                },
            },
            {
                evaluationRange: {
                    endColumn: 3,
                    endLineNumber: 16,
                    startColumn: 5,
                    startLineNumber: 4,
                },
                instruction: {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                internalStates: [
                    {
                        instruction: {
                            data: lib_1.hexToBin(''),
                            opcode: 0,
                        },
                        state: {
                            alternateStack: [],
                            correspondingOutput: lib_1.hexToBin('000000000000000000'),
                            executionStack: [],
                            instructions: [
                                {
                                    data: lib_1.hexToBin(''),
                                    opcode: 0,
                                },
                                {
                                    data: lib_1.hexToBin(''),
                                    opcode: 0,
                                },
                                {
                                    data: lib_1.hexToBin('616263'),
                                    opcode: 3,
                                },
                                {
                                    opcode: 126,
                                },
                                {
                                    opcode: 126,
                                },
                            ],
                            ip: 1,
                            lastCodeSeparator: -1,
                            locktime: 0,
                            operationCount: 0,
                            outpointIndex: 0,
                            outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                            outputValue: lib_1.hexToBin('0000000000000000'),
                            sequenceNumber: 0,
                            signatureOperationsCount: 0,
                            signedMessages: [],
                            stack: [lib_1.hexToBin('')],
                            transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                            transactionOutputs: lib_1.hexToBin('000000000000000000'),
                            transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                            version: 0,
                        },
                    },
                ],
                range: {
                    endColumn: 9,
                    endLineNumber: 5,
                    startColumn: 3,
                    startLineNumber: 5,
                },
                state: {
                    alternateStack: [],
                    correspondingOutput: lib_1.hexToBin('000000000000000000'),
                    executionStack: [],
                    instructions: [
                        {
                            data: lib_1.hexToBin(''),
                            opcode: 0,
                        },
                        {
                            data: lib_1.hexToBin(''),
                            opcode: 0,
                        },
                        {
                            data: lib_1.hexToBin('616263'),
                            opcode: 3,
                        },
                        {
                            opcode: 126,
                        },
                        {
                            opcode: 126,
                        },
                    ],
                    ip: 2,
                    lastCodeSeparator: -1,
                    locktime: 0,
                    operationCount: 0,
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    outputValue: lib_1.hexToBin('0000000000000000'),
                    sequenceNumber: 0,
                    signatureOperationsCount: 0,
                    signedMessages: [],
                    stack: [lib_1.hexToBin(''), lib_1.hexToBin('')],
                    transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                    transactionOutputs: lib_1.hexToBin('000000000000000000'),
                    transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                    version: 0,
                },
            },
            {
                evaluationRange: {
                    endColumn: 5,
                    endLineNumber: 11,
                    startColumn: 7,
                    startLineNumber: 6,
                },
                internalStates: [],
                range: {
                    endColumn: 7,
                    endLineNumber: 6,
                    startColumn: 7,
                    startLineNumber: 6,
                },
                state: {
                    alternateStack: [],
                    correspondingOutput: lib_1.hexToBin('000000000000000000'),
                    executionStack: [],
                    instructions: [
                        {
                            opcode: 81,
                        },
                        {
                            opcode: 82,
                        },
                        {
                            opcode: 147,
                        },
                    ],
                    ip: 0,
                    lastCodeSeparator: -1,
                    locktime: 0,
                    operationCount: 0,
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    outputValue: lib_1.hexToBin('0000000000000000'),
                    sequenceNumber: 0,
                    signatureOperationsCount: 0,
                    signedMessages: [],
                    stack: [],
                    transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                    transactionOutputs: lib_1.hexToBin('000000000000000000'),
                    transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                    version: 0,
                },
            },
            {
                evaluationRange: {
                    endColumn: 15,
                    endLineNumber: 6,
                    startColumn: 9,
                    startLineNumber: 6,
                },
                internalStates: [],
                range: {
                    endColumn: 9,
                    endLineNumber: 6,
                    startColumn: 9,
                    startLineNumber: 6,
                },
                state: {
                    alternateStack: [],
                    correspondingOutput: lib_1.hexToBin('000000000000000000'),
                    executionStack: [],
                    instructions: [
                        {
                            data: lib_1.hexToBin('51'),
                            opcode: 1,
                        },
                    ],
                    ip: 0,
                    lastCodeSeparator: -1,
                    locktime: 0,
                    operationCount: 0,
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    outputValue: lib_1.hexToBin('0000000000000000'),
                    sequenceNumber: 0,
                    signatureOperationsCount: 0,
                    signedMessages: [],
                    stack: [],
                    transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                    transactionOutputs: lib_1.hexToBin('000000000000000000'),
                    transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                    version: 0,
                },
            },
            {
                evaluationRange: {
                    endColumn: 15,
                    endLineNumber: 6,
                    startColumn: 9,
                    startLineNumber: 6,
                },
                instruction: {
                    data: lib_1.hexToBin('51'),
                    opcode: 1,
                },
                internalStates: [],
                range: {
                    endColumn: 15,
                    endLineNumber: 6,
                    startColumn: 9,
                    startLineNumber: 6,
                },
                state: {
                    alternateStack: [],
                    correspondingOutput: lib_1.hexToBin('000000000000000000'),
                    executionStack: [],
                    instructions: [
                        {
                            data: lib_1.hexToBin('51'),
                            opcode: 1,
                        },
                    ],
                    ip: 1,
                    lastCodeSeparator: -1,
                    locktime: 0,
                    operationCount: 0,
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    outputValue: lib_1.hexToBin('0000000000000000'),
                    sequenceNumber: 0,
                    signatureOperationsCount: 0,
                    signedMessages: [],
                    stack: [lib_1.hexToBin('51')],
                    transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                    transactionOutputs: lib_1.hexToBin('000000000000000000'),
                    transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                    version: 0,
                },
            },
            {
                evaluationRange: {
                    endColumn: 5,
                    endLineNumber: 11,
                    startColumn: 7,
                    startLineNumber: 6,
                },
                instruction: {
                    opcode: 81,
                },
                internalStates: [],
                range: {
                    endColumn: 16,
                    endLineNumber: 6,
                    startColumn: 7,
                    startLineNumber: 6,
                },
                state: {
                    alternateStack: [],
                    correspondingOutput: lib_1.hexToBin('000000000000000000'),
                    executionStack: [],
                    instructions: [
                        {
                            opcode: 81,
                        },
                        {
                            opcode: 82,
                        },
                        {
                            opcode: 147,
                        },
                    ],
                    ip: 1,
                    lastCodeSeparator: -1,
                    locktime: 0,
                    operationCount: 0,
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    outputValue: lib_1.hexToBin('0000000000000000'),
                    sequenceNumber: 0,
                    signatureOperationsCount: 0,
                    signedMessages: [],
                    stack: [lib_1.hexToBin('01')],
                    transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                    transactionOutputs: lib_1.hexToBin('000000000000000000'),
                    transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                    version: 0,
                },
            },
            {
                evaluationRange: {
                    endColumn: 5,
                    endLineNumber: 11,
                    startColumn: 7,
                    startLineNumber: 6,
                },
                instruction: {
                    opcode: 82,
                },
                internalStates: [],
                range: {
                    endColumn: 11,
                    endLineNumber: 8,
                    startColumn: 7,
                    startLineNumber: 8,
                },
                state: {
                    alternateStack: [],
                    correspondingOutput: lib_1.hexToBin('000000000000000000'),
                    executionStack: [],
                    instructions: [
                        {
                            opcode: 81,
                        },
                        {
                            opcode: 82,
                        },
                        {
                            opcode: 147,
                        },
                    ],
                    ip: 2,
                    lastCodeSeparator: -1,
                    locktime: 0,
                    operationCount: 0,
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    outputValue: lib_1.hexToBin('0000000000000000'),
                    sequenceNumber: 0,
                    signatureOperationsCount: 0,
                    signedMessages: [],
                    stack: [lib_1.hexToBin('01'), lib_1.hexToBin('02')],
                    transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                    transactionOutputs: lib_1.hexToBin('000000000000000000'),
                    transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                    version: 0,
                },
            },
            {
                evaluationRange: {
                    endColumn: 5,
                    endLineNumber: 11,
                    startColumn: 7,
                    startLineNumber: 6,
                },
                instruction: {
                    opcode: 147,
                },
                internalStates: [],
                range: {
                    endColumn: 13,
                    endLineNumber: 9,
                    startColumn: 7,
                    startLineNumber: 9,
                },
                state: {
                    alternateStack: [],
                    correspondingOutput: lib_1.hexToBin('000000000000000000'),
                    executionStack: [],
                    instructions: [
                        {
                            opcode: 81,
                        },
                        {
                            opcode: 82,
                        },
                        {
                            opcode: 147,
                        },
                    ],
                    ip: 3,
                    lastCodeSeparator: -1,
                    locktime: 0,
                    operationCount: 1,
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    outputValue: lib_1.hexToBin('0000000000000000'),
                    sequenceNumber: 0,
                    signatureOperationsCount: 0,
                    signedMessages: [],
                    stack: [lib_1.hexToBin('03')],
                    transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                    transactionOutputs: lib_1.hexToBin('000000000000000000'),
                    transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                    version: 0,
                },
            },
            {
                evaluationRange: {
                    endColumn: 5,
                    endLineNumber: 13,
                    startColumn: 7,
                    startLineNumber: 12,
                },
                internalStates: [],
                range: {
                    endColumn: 7,
                    endLineNumber: 12,
                    startColumn: 7,
                    startLineNumber: 12,
                },
                state: {
                    alternateStack: [],
                    correspondingOutput: lib_1.hexToBin('000000000000000000'),
                    executionStack: [],
                    instructions: [
                        {
                            data: lib_1.hexToBin('616263'),
                            opcode: 3,
                        },
                    ],
                    ip: 0,
                    lastCodeSeparator: -1,
                    locktime: 0,
                    operationCount: 0,
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    outputValue: lib_1.hexToBin('0000000000000000'),
                    sequenceNumber: 0,
                    signatureOperationsCount: 0,
                    signedMessages: [],
                    stack: [],
                    transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                    transactionOutputs: lib_1.hexToBin('000000000000000000'),
                    transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                    version: 0,
                },
            },
            {
                evaluationRange: {
                    endColumn: 5,
                    endLineNumber: 13,
                    startColumn: 7,
                    startLineNumber: 12,
                },
                instruction: {
                    data: lib_1.hexToBin('616263'),
                    opcode: 3,
                },
                internalStates: [],
                range: {
                    endColumn: 15,
                    endLineNumber: 12,
                    startColumn: 8,
                    startLineNumber: 12,
                },
                state: {
                    alternateStack: [],
                    correspondingOutput: lib_1.hexToBin('000000000000000000'),
                    executionStack: [],
                    instructions: [
                        {
                            data: lib_1.hexToBin('616263'),
                            opcode: 3,
                        },
                    ],
                    ip: 1,
                    lastCodeSeparator: -1,
                    locktime: 0,
                    operationCount: 0,
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    outputValue: lib_1.hexToBin('0000000000000000'),
                    sequenceNumber: 0,
                    signatureOperationsCount: 0,
                    signedMessages: [],
                    stack: [lib_1.hexToBin('616263')],
                    transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                    transactionOutputs: lib_1.hexToBin('000000000000000000'),
                    transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                    version: 0,
                },
            },
            {
                evaluationRange: {
                    endColumn: 3,
                    endLineNumber: 16,
                    startColumn: 5,
                    startLineNumber: 4,
                },
                instruction: {
                    data: lib_1.hexToBin('616263'),
                    opcode: 3,
                },
                internalStates: [],
                range: {
                    endColumn: 6,
                    endLineNumber: 13,
                    startColumn: 5,
                    startLineNumber: 6,
                },
                state: {
                    alternateStack: [],
                    correspondingOutput: lib_1.hexToBin('000000000000000000'),
                    executionStack: [],
                    instructions: [
                        {
                            data: lib_1.hexToBin(''),
                            opcode: 0,
                        },
                        {
                            data: lib_1.hexToBin(''),
                            opcode: 0,
                        },
                        {
                            data: lib_1.hexToBin('616263'),
                            opcode: 3,
                        },
                        {
                            opcode: 126,
                        },
                        {
                            opcode: 126,
                        },
                    ],
                    ip: 3,
                    lastCodeSeparator: -1,
                    locktime: 0,
                    operationCount: 0,
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    outputValue: lib_1.hexToBin('0000000000000000'),
                    sequenceNumber: 0,
                    signatureOperationsCount: 0,
                    signedMessages: [],
                    stack: [lib_1.hexToBin(''), lib_1.hexToBin(''), lib_1.hexToBin('616263')],
                    transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                    transactionOutputs: lib_1.hexToBin('000000000000000000'),
                    transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                    version: 0,
                },
            },
            {
                evaluationRange: {
                    endColumn: 3,
                    endLineNumber: 16,
                    startColumn: 5,
                    startLineNumber: 4,
                },
                instruction: {
                    opcode: 126,
                },
                internalStates: [],
                range: {
                    endColumn: 9,
                    endLineNumber: 14,
                    startColumn: 3,
                    startLineNumber: 14,
                },
                state: {
                    alternateStack: [],
                    correspondingOutput: lib_1.hexToBin('000000000000000000'),
                    executionStack: [],
                    instructions: [
                        {
                            data: lib_1.hexToBin(''),
                            opcode: 0,
                        },
                        {
                            data: lib_1.hexToBin(''),
                            opcode: 0,
                        },
                        {
                            data: lib_1.hexToBin('616263'),
                            opcode: 3,
                        },
                        {
                            opcode: 126,
                        },
                        {
                            opcode: 126,
                        },
                    ],
                    ip: 4,
                    lastCodeSeparator: -1,
                    locktime: 0,
                    operationCount: 1,
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    outputValue: lib_1.hexToBin('0000000000000000'),
                    sequenceNumber: 0,
                    signatureOperationsCount: 0,
                    signedMessages: [],
                    stack: [lib_1.hexToBin(''), lib_1.hexToBin('616263')],
                    transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                    transactionOutputs: lib_1.hexToBin('000000000000000000'),
                    transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                    version: 0,
                },
            },
            {
                evaluationRange: {
                    endColumn: 3,
                    endLineNumber: 16,
                    startColumn: 5,
                    startLineNumber: 4,
                },
                instruction: {
                    opcode: 126,
                },
                internalStates: [],
                range: {
                    endColumn: 9,
                    endLineNumber: 15,
                    startColumn: 3,
                    startLineNumber: 15,
                },
                state: {
                    alternateStack: [],
                    correspondingOutput: lib_1.hexToBin('000000000000000000'),
                    executionStack: [],
                    instructions: [
                        {
                            data: lib_1.hexToBin(''),
                            opcode: 0,
                        },
                        {
                            data: lib_1.hexToBin(''),
                            opcode: 0,
                        },
                        {
                            data: lib_1.hexToBin('616263'),
                            opcode: 3,
                        },
                        {
                            opcode: 126,
                        },
                        {
                            opcode: 126,
                        },
                    ],
                    ip: 5,
                    lastCodeSeparator: -1,
                    locktime: 0,
                    operationCount: 2,
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    outputValue: lib_1.hexToBin('0000000000000000'),
                    sequenceNumber: 0,
                    signatureOperationsCount: 0,
                    signedMessages: [],
                    stack: [lib_1.hexToBin('616263')],
                    transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                    transactionOutputs: lib_1.hexToBin('000000000000000000'),
                    transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                    version: 0,
                },
            },
            {
                evaluationRange: {
                    endColumn: 14,
                    endLineNumber: 20,
                    startColumn: 5,
                    startLineNumber: 17,
                },
                internalStates: [],
                range: {
                    endColumn: 5,
                    endLineNumber: 17,
                    startColumn: 5,
                    startLineNumber: 17,
                },
                state: {
                    alternateStack: [],
                    correspondingOutput: lib_1.hexToBin('000000000000000000'),
                    executionStack: [],
                    instructions: [
                        {
                            data: lib_1.hexToBin(''),
                            opcode: 0,
                        },
                        {
                            data: lib_1.hexToBin(''),
                            opcode: 0,
                        },
                        {
                            opcode: 126,
                        },
                    ],
                    ip: 0,
                    lastCodeSeparator: -1,
                    locktime: 0,
                    operationCount: 0,
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    outputValue: lib_1.hexToBin('0000000000000000'),
                    sequenceNumber: 0,
                    signatureOperationsCount: 0,
                    signedMessages: [],
                    stack: [],
                    transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                    transactionOutputs: lib_1.hexToBin('000000000000000000'),
                    transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                    version: 0,
                },
            },
            {
                evaluationRange: {
                    endColumn: 14,
                    endLineNumber: 20,
                    startColumn: 5,
                    startLineNumber: 17,
                },
                instruction: {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                internalStates: [],
                range: {
                    endColumn: 8,
                    endLineNumber: 18,
                    startColumn: 5,
                    startLineNumber: 18,
                },
                state: {
                    alternateStack: [],
                    correspondingOutput: lib_1.hexToBin('000000000000000000'),
                    executionStack: [],
                    instructions: [
                        {
                            data: lib_1.hexToBin(''),
                            opcode: 0,
                        },
                        {
                            data: lib_1.hexToBin(''),
                            opcode: 0,
                        },
                        {
                            opcode: 126,
                        },
                    ],
                    ip: 1,
                    lastCodeSeparator: -1,
                    locktime: 0,
                    operationCount: 0,
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    outputValue: lib_1.hexToBin('0000000000000000'),
                    sequenceNumber: 0,
                    signatureOperationsCount: 0,
                    signedMessages: [],
                    stack: [lib_1.hexToBin('')],
                    transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                    transactionOutputs: lib_1.hexToBin('000000000000000000'),
                    transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                    version: 0,
                },
            },
            {
                evaluationRange: {
                    endColumn: 14,
                    endLineNumber: 20,
                    startColumn: 5,
                    startLineNumber: 17,
                },
                instruction: {
                    data: lib_1.hexToBin(''),
                    opcode: 0,
                },
                internalStates: [],
                range: {
                    endColumn: 8,
                    endLineNumber: 19,
                    startColumn: 5,
                    startLineNumber: 19,
                },
                state: {
                    alternateStack: [],
                    correspondingOutput: lib_1.hexToBin('000000000000000000'),
                    executionStack: [],
                    instructions: [
                        {
                            data: lib_1.hexToBin(''),
                            opcode: 0,
                        },
                        {
                            data: lib_1.hexToBin(''),
                            opcode: 0,
                        },
                        {
                            opcode: 126,
                        },
                    ],
                    ip: 2,
                    lastCodeSeparator: -1,
                    locktime: 0,
                    operationCount: 0,
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    outputValue: lib_1.hexToBin('0000000000000000'),
                    sequenceNumber: 0,
                    signatureOperationsCount: 0,
                    signedMessages: [],
                    stack: [lib_1.hexToBin(''), lib_1.hexToBin('')],
                    transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                    transactionOutputs: lib_1.hexToBin('000000000000000000'),
                    transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                    version: 0,
                },
            },
            {
                evaluationRange: {
                    endColumn: 13,
                    endLineNumber: 20,
                    startColumn: 5,
                    startLineNumber: 20,
                },
                internalStates: [],
                range: {
                    endColumn: 5,
                    endLineNumber: 20,
                    startColumn: 5,
                    startLineNumber: 20,
                },
                state: {
                    alternateStack: [],
                    correspondingOutput: lib_1.hexToBin('000000000000000000'),
                    executionStack: [],
                    instructions: [
                        {
                            data: lib_1.hexToBin('7e'),
                            opcode: 1,
                        },
                    ],
                    ip: 0,
                    lastCodeSeparator: -1,
                    locktime: 0,
                    operationCount: 0,
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    outputValue: lib_1.hexToBin('0000000000000000'),
                    sequenceNumber: 0,
                    signatureOperationsCount: 0,
                    signedMessages: [],
                    stack: [],
                    transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                    transactionOutputs: lib_1.hexToBin('000000000000000000'),
                    transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                    version: 0,
                },
            },
            {
                evaluationRange: {
                    endColumn: 13,
                    endLineNumber: 20,
                    startColumn: 5,
                    startLineNumber: 20,
                },
                instruction: {
                    data: lib_1.hexToBin('7e'),
                    opcode: 1,
                },
                internalStates: [],
                range: {
                    endColumn: 13,
                    endLineNumber: 20,
                    startColumn: 5,
                    startLineNumber: 20,
                },
                state: {
                    alternateStack: [],
                    correspondingOutput: lib_1.hexToBin('000000000000000000'),
                    executionStack: [],
                    instructions: [
                        {
                            data: lib_1.hexToBin('7e'),
                            opcode: 1,
                        },
                    ],
                    ip: 1,
                    lastCodeSeparator: -1,
                    locktime: 0,
                    operationCount: 0,
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    outputValue: lib_1.hexToBin('0000000000000000'),
                    sequenceNumber: 0,
                    signatureOperationsCount: 0,
                    signedMessages: [],
                    stack: [lib_1.hexToBin('7e')],
                    transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                    transactionOutputs: lib_1.hexToBin('000000000000000000'),
                    transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                    version: 0,
                },
            },
            {
                evaluationRange: {
                    endColumn: 14,
                    endLineNumber: 20,
                    startColumn: 5,
                    startLineNumber: 17,
                },
                instruction: {
                    opcode: 126,
                },
                internalStates: [],
                range: {
                    endColumn: 14,
                    endLineNumber: 20,
                    startColumn: 3,
                    startLineNumber: 20,
                },
                state: {
                    alternateStack: [],
                    correspondingOutput: lib_1.hexToBin('000000000000000000'),
                    executionStack: [],
                    instructions: [
                        {
                            data: lib_1.hexToBin(''),
                            opcode: 0,
                        },
                        {
                            data: lib_1.hexToBin(''),
                            opcode: 0,
                        },
                        {
                            opcode: 126,
                        },
                    ],
                    ip: 3,
                    lastCodeSeparator: -1,
                    locktime: 0,
                    operationCount: 1,
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    outputValue: lib_1.hexToBin('0000000000000000'),
                    sequenceNumber: 0,
                    signatureOperationsCount: 0,
                    signedMessages: [],
                    stack: [lib_1.hexToBin('')],
                    transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                    transactionOutputs: lib_1.hexToBin('000000000000000000'),
                    transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                    version: 0,
                },
            },
            {
                evaluationRange: {
                    endColumn: 2,
                    endLineNumber: 21,
                    startColumn: 1,
                    startLineNumber: 1,
                },
                instruction: {
                    data: lib_1.hexToBin('616263'),
                    opcode: 3,
                },
                internalStates: [],
                range: {
                    endColumn: 2,
                    endLineNumber: 21,
                    startColumn: 1,
                    startLineNumber: 3,
                },
                state: {
                    alternateStack: [],
                    correspondingOutput: lib_1.hexToBin('000000000000000000'),
                    executionStack: [],
                    instructions: [
                        {
                            data: lib_1.hexToBin(''),
                            opcode: 0,
                        },
                        {
                            data: lib_1.hexToBin('616263'),
                            opcode: 3,
                        },
                    ],
                    ip: 2,
                    lastCodeSeparator: -1,
                    locktime: 0,
                    operationCount: 0,
                    outpointIndex: 0,
                    outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                    outputValue: lib_1.hexToBin('0000000000000000'),
                    sequenceNumber: 0,
                    signatureOperationsCount: 0,
                    signedMessages: [],
                    stack: [lib_1.hexToBin(''), lib_1.hexToBin('616263')],
                    transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                    transactionOutputs: lib_1.hexToBin('000000000000000000'),
                    transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                    version: 0,
                },
            },
        ],
        unmatchedStates: [
            {
                alternateStack: [],
                correspondingOutput: lib_1.hexToBin('000000000000000000'),
                executionStack: [],
                instructions: [
                    {
                        data: lib_1.hexToBin(''),
                        opcode: 0,
                    },
                    {
                        data: lib_1.hexToBin('616263'),
                        opcode: 3,
                    },
                ],
                ip: 2,
                lastCodeSeparator: -1,
                locktime: 0,
                operationCount: 0,
                outpointIndex: 0,
                outpointTransactionHash: lib_1.hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                outputValue: lib_1.hexToBin('0000000000000000'),
                sequenceNumber: 0,
                signatureOperationsCount: 0,
                signedMessages: [],
                stack: [lib_1.hexToBin(''), lib_1.hexToBin('616263')],
                transactionOutpoints: lib_1.hexToBin('000000000000000000000000000000000000000000000000000000000000000000000000'),
                transactionOutputs: lib_1.hexToBin('000000000000000000'),
                transactionSequenceNumbers: lib_1.hexToBin('00000000'),
                version: 0,
            },
        ],
    }, lib_1.stringifyTestVector(sampleResult));
});
const extractUnexecutedRangesMacro = async (t, scriptId, ranges, specifyStart
// eslint-disable-next-line max-params
) => {
    const compiler = await compilerPromise;
    const vm = await vmPromise;
    const result = compiler.generateBytecode(scriptId, {}, true);
    if (!result.success) {
        t.fail(lib_1.stringifyErrors(result.errors));
        return;
    }
    const testProgram = lib_1.createAuthenticationProgramEvaluationCommon(result.bytecode);
    const nodes = result.reduce.script;
    const evaluationRange = result.reduce.range;
    const traceWithUnlockingPhaseAndFinalState = vm.debug(testProgram);
    const trace = traceWithUnlockingPhaseAndFinalState.slice(1, -1);
    const { samples } = lib_1.extractEvaluationSamplesRecursive({
        evaluationRange,
        nodes,
        trace,
    });
    const unexecutedRanges = lib_1.extractUnexecutedRanges(samples, specifyStart === undefined ? undefined : '1,1');
    t.deepEqual(unexecutedRanges, ranges, lib_1.stringifyTestVector(unexecutedRanges));
};
// eslint-disable-next-line functional/immutable-data
extractUnexecutedRangesMacro.title = (_, scriptId) => `extractUnexecutedRangesMacro: ${scriptId}`;
ava_1.default(extractUnexecutedRangesMacro, 'unexecuted00', [
    {
        endColumn: 8,
        endLineNumber: 3,
        startColumn: 5,
        startLineNumber: 3,
    },
    {
        endColumn: 20,
        endLineNumber: 4,
        startColumn: 5,
        startLineNumber: 4,
    },
    {
        endColumn: 10,
        endLineNumber: 5,
        startColumn: 5,
        startLineNumber: 5,
    },
    {
        endColumn: 12,
        endLineNumber: 6,
        startColumn: 9,
        startLineNumber: 6,
    },
    {
        endColumn: 10,
        endLineNumber: 14,
        startColumn: 9,
        startLineNumber: 7,
    },
    {
        endColumn: 13,
        endLineNumber: 15,
        startColumn: 5,
        startLineNumber: 15,
    },
    {
        endColumn: 13,
        endLineNumber: 16,
        startColumn: 5,
        startLineNumber: 16,
    },
    {
        endColumn: 11,
        endLineNumber: 23,
        startColumn: 9,
        startLineNumber: 21,
    },
], true);
ava_1.default(extractUnexecutedRangesMacro, 'unexecuted01', [
    {
        endColumn: 8,
        endLineNumber: 3,
        startColumn: 5,
        startLineNumber: 3,
    },
    {
        endColumn: 20,
        endLineNumber: 4,
        startColumn: 5,
        startLineNumber: 4,
    },
    {
        endColumn: 10,
        endLineNumber: 5,
        startColumn: 5,
        startLineNumber: 5,
    },
    {
        endColumn: 12,
        endLineNumber: 6,
        startColumn: 9,
        startLineNumber: 6,
    },
    {
        endColumn: 10,
        endLineNumber: 14,
        startColumn: 9,
        startLineNumber: 7,
    },
    {
        endColumn: 13,
        endLineNumber: 15,
        startColumn: 5,
        startLineNumber: 15,
    },
    {
        endColumn: 13,
        endLineNumber: 16,
        startColumn: 5,
        startLineNumber: 16,
    },
]);
ava_1.default(extractUnexecutedRangesMacro, 'unexecuted10', [
    {
        endColumn: 12,
        endLineNumber: 6,
        startColumn: 9,
        startLineNumber: 6,
    },
    {
        endColumn: 10,
        endLineNumber: 14,
        startColumn: 9,
        startLineNumber: 7,
    },
    {
        endColumn: 8,
        endLineNumber: 18,
        startColumn: 5,
        startLineNumber: 18,
    },
    {
        endColumn: 20,
        endLineNumber: 19,
        startColumn: 5,
        startLineNumber: 19,
    },
    {
        endColumn: 10,
        endLineNumber: 20,
        startColumn: 5,
        startLineNumber: 20,
    },
    {
        endColumn: 11,
        endLineNumber: 23,
        startColumn: 9,
        startLineNumber: 21,
    },
    {
        endColumn: 13,
        endLineNumber: 24,
        startColumn: 5,
        startLineNumber: 24,
    },
]);
ava_1.default(extractUnexecutedRangesMacro, 'unexecuted11', [
    {
        endColumn: 22,
        endLineNumber: 12,
        startColumn: 17,
        startLineNumber: 12,
    },
    {
        endColumn: 8,
        endLineNumber: 18,
        startColumn: 5,
        startLineNumber: 18,
    },
    {
        endColumn: 20,
        endLineNumber: 19,
        startColumn: 5,
        startLineNumber: 19,
    },
    {
        endColumn: 10,
        endLineNumber: 20,
        startColumn: 5,
        startLineNumber: 20,
    },
    {
        endColumn: 11,
        endLineNumber: 23,
        startColumn: 9,
        startLineNumber: 21,
    },
    {
        endColumn: 13,
        endLineNumber: 24,
        startColumn: 5,
        startLineNumber: 24,
    },
]);
ava_1.default(extractUnexecutedRangesMacro, 'unexecutedEmpty', []);
//# sourceMappingURL=language-utils.spec.js.map