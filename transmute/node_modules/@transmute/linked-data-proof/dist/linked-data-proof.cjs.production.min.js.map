{"version":3,"file":"linked-data-proof.cjs.production.min.js","sources":["../src/purposes/ProofPurpose.ts","../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/purposes/ControllerProofPurpose.ts","../src/purposes/index.ts","../src/purposes/AssertionProofPurpose.ts","../src/purposes/AuthenticationProofPurpose.ts","../src/strictExpansionMap.ts","../src/ProofSet.ts","../src/VerificationError.ts","../src/sign.ts","../src/verify.ts"],"sourcesContent":["import { IPurposeValidateOptions } from \"../types\";\n\nexport class ProofPurpose {\n  public term: any;\n  public date: any;\n  public maxTimestampDelta: any;\n\n  constructor({ term, date, maxTimestampDelta = Infinity }: any = {}) {\n    if (term === undefined) {\n      throw new Error('\"term\" is required.');\n    }\n    if (\n      maxTimestampDelta !== undefined &&\n      typeof maxTimestampDelta !== \"number\"\n    ) {\n      throw new TypeError('\"maxTimestampDelta\" must be a number.');\n    }\n    this.term = term;\n    if (date !== undefined) {\n      this.date = new Date(date);\n      if (isNaN(this.date)) {\n        throw TypeError(`\"date\" \"${date}\" is not a valid date.`);\n      }\n    }\n    this.maxTimestampDelta = maxTimestampDelta;\n  }\n\n  async validate(proof: any, _options: IPurposeValidateOptions) {\n    try {\n      // check expiration\n      if (this.maxTimestampDelta !== Infinity) {\n        const expected = (this.date || new Date()).getTime();\n        const delta = this.maxTimestampDelta * 1000;\n        const created = new Date(proof.created).getTime();\n        // comparing this way handles NaN case where `created` is invalid\n        if (!(created >= expected - delta && created <= expected + delta)) {\n          throw new Error(\"The proof's created timestamp is out of range.\");\n        }\n      }\n      return { valid: true };\n    } catch (error) {\n      return { valid: false, error };\n    }\n  }\n\n  /**\n   * Called to update a proof when it is being created, adding any properties\n   * specific to this purpose. This method is called prior to the proof\n   * value being generated such that any properties added may be, for example,\n   * included in a digital signature value.\n   *\n   * @param proof {object} the proof, in the `constants.SECURITY_CONTEXT_URL`\n   *   to update.\n   *\n   * @return {Promise<object>} resolves to the proof instance (in the\n   *   `constants.SECURITY_CONTEXT_URL`.\n   */\n  async update(proof: any, _options: IPurposeValidateOptions) {\n    proof.proofPurpose = this.term;\n    return proof;\n  }\n\n  /**\n   * Determines if the given proof has a purpose that matches this instance,\n   * i.e. this ProofPurpose instance should be used to validate the given\n   * proof.\n   *\n   * @param proof {object} the proof to check.\n   *\n   * @return {Promise<boolean>} `true` if there's a match, `false` if not.\n   */\n  async match(\n    proof: any\n    // { document, documentLoader, expansionMap }\n  ) {\n    return proof.proofPurpose === this.term;\n  }\n}\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import { ProofPurpose } from \"./ProofPurpose\";\nimport { IPurposeValidateOptions } from \"../types\";\nimport jsonld from \"jsonld\";\n\nexport class ControllerProofPurpose extends ProofPurpose {\n  public controller: any;\n  constructor({ term, date, maxTimestampDelta = Infinity }: any = {}) {\n    super({ term, date, maxTimestampDelta });\n  }\n\n  async validate(proof: any, _options: IPurposeValidateOptions) {\n    try {\n      const result: any = await super.validate(proof, _options);\n      if (!result.valid) {\n        throw result.error;\n      }\n\n      const { verificationMethod, documentLoader } = _options;\n      const { id: verificationId } = verificationMethod;\n\n      const { controller } = verificationMethod;\n      const { id: controllerId } = controller;\n\n      const { document } = await documentLoader(controllerId);\n      result.controller = document;\n      const verificationMethods = jsonld.getValues(\n        result.controller,\n        this.term\n      );\n\n      result.valid = verificationMethods.some(\n        (vm: any) =>\n          vm === verificationId ||\n          vm === \"#\" + verificationId.split(\"#\").pop() ||\n          (typeof vm === \"object\" && vm.id === verificationId)\n      );\n\n      if (!result.valid) {\n        throw new Error(\n          `Verification method \"${verificationMethod.id}\" not authorized ` +\n            `by controller for proof purpose \"${this.term}\".`\n        );\n      }\n      return result;\n    } catch (error) {\n      return { valid: false, error };\n    }\n  }\n}\n","import { ProofPurpose } from \"./ProofPurpose\";\nimport { ControllerProofPurpose } from \"./ControllerProofPurpose\";\nimport { AssertionProofPurpose } from \"./AssertionProofPurpose\";\nimport { AuthenticationProofPurpose } from \"./AuthenticationProofPurpose\";\n\nexport const purposes = {\n  ProofPurpose,\n  ControllerProofPurpose,\n  AssertionProofPurpose,\n  AuthenticationProofPurpose\n};\n","import { ControllerProofPurpose } from \"./ControllerProofPurpose\";\n\nexport class AssertionProofPurpose extends ControllerProofPurpose {\n  constructor({\n    term = \"assertionMethod\",\n    controller,\n    date,\n    maxTimestampDelta = Infinity\n  }: any = {}) {\n    super({ term, controller, date, maxTimestampDelta });\n  }\n}\n","import { ControllerProofPurpose } from \"./ControllerProofPurpose\";\nimport { IPurposeValidateOptions } from \"../types\";\n\nexport class AuthenticationProofPurpose extends ControllerProofPurpose {\n  public challenge: string;\n  public domain: string;\n  constructor({\n    term = \"authentication\",\n    controller,\n    challenge,\n    date,\n    domain,\n    maxTimestampDelta = Infinity\n  }: any = {}) {\n    super({ term, controller, date, maxTimestampDelta });\n    if (typeof challenge !== \"string\") {\n      throw new TypeError('\"challenge\" must be a string.');\n    }\n    if (domain !== undefined && typeof domain !== \"string\") {\n      throw new TypeError('\"domain\" must be a string.');\n    }\n    this.challenge = challenge;\n    this.domain = domain;\n  }\n\n  async validate(\n    proof: any,\n    {\n      verificationMethod,\n      documentLoader,\n      expansionMap\n    }: IPurposeValidateOptions\n  ) {\n    try {\n      // check challenge\n      if (proof.challenge !== this.challenge) {\n        throw new Error(\n          \"The challenge is not as expected; \" +\n            `challenge=\"${proof.challenge}\", expected=\"${this.challenge}\"`\n        );\n      }\n\n      // check domain\n      if (this.domain !== undefined && proof.domain !== this.domain) {\n        throw new Error(\n          \"The domain is not as expected; \" +\n            `domain=\"${proof.domain}\", expected=\"${this.domain}\"`\n        );\n      }\n\n      return super.validate(proof, {\n        verificationMethod,\n        documentLoader,\n        expansionMap\n      });\n    } catch (error) {\n      return { valid: false, error };\n    }\n  }\n\n  async update(proof: any, _options: IPurposeValidateOptions) {\n    proof = await super.update(proof, _options);\n    proof.challenge = this.challenge;\n    if (this.domain !== undefined) {\n      proof.domain = this.domain;\n    }\n    return proof;\n  }\n}\n","// strict expansion map disallows dropping properties when expanding by default\nexport default (info: any) => {\n  if (info.unmappedProperty) {\n    throw new Error(\n      `The property \"${info.unmappedProperty}\" in the input was not defined in the context.`\n    );\n  }\n};\n","import jsonld from \"jsonld\";\nimport { serializeError } from \"serialize-error\";\n\nimport strictExpansionMap from \"./strictExpansionMap\";\n\nimport { IProofSetAddOptions } from \"./types\";\n\nexport class ProofSet {\n  async add(\n    document: any,\n    {\n      suite,\n      purpose,\n      documentLoader,\n      expansionMap,\n      compactProof = true\n    }: IProofSetAddOptions = { compactProof: true }\n  ) {\n    if (!suite) {\n      throw new TypeError('\"options.suite\" is required.');\n    }\n    if (!documentLoader) {\n      throw new TypeError('\"options.documentLoader\" is required.');\n    }\n    if (!purpose) {\n      throw new TypeError('\"options.purpose\" is required.');\n    }\n\n    if (suite.legacy) {\n      throw new TypeError(`Legacy suites are no longer supported.`);\n    }\n\n    if (expansionMap !== false) {\n      expansionMap = strictExpansionMap;\n    }\n\n    if (typeof document === \"string\") {\n      // fetch document\n      document = await documentLoader(document);\n    }\n\n    // preprocess document to prepare to remove existing proofs\n    let input = { ...document };\n\n    // save but exclude any existing proof(s)\n    const proofProperty = \"proof\";\n    //const existingProofs = input[proofProperty];\n    delete input[proofProperty];\n\n    const proof = await suite.createProof({\n      document: input,\n      purpose,\n      documentLoader,\n      expansionMap,\n      compactProof\n    });\n\n    delete proof[\"@context\"];\n    // this is required here, for cases where the suite\n    // still requires / uses sec-v2... like bbs+\n    proof.type = proof.type.replace(\"sec:\", \"\");\n    jsonld.addValue(document, proofProperty, proof);\n\n    return document;\n  }\n\n  private _getProofs = async ({\n    document,\n    documentLoader,\n    expansionMap,\n    compactProof\n  }: any) => {\n    // handle document preprocessing to find proofs\n    const proofProperty = \"proof\";\n    let proofSet;\n\n    if (compactProof) {\n      // if we must compact the proof(s) then we must first compact the input\n      // document to find the proof(s)\n      const context = document[\"@context\"];\n      // console.log(document);\n      document = await jsonld.compact(document, context, {\n        documentLoader,\n        expansionMap,\n        compactToRelative: false\n      });\n    }\n    proofSet = jsonld.getValues(document, proofProperty);\n    delete document[proofProperty];\n\n    if (proofSet.length === 0) {\n      // no possible matches\n      throw new Error(\"No matching proofs found in the given document.\");\n    }\n\n    const secV2Locked = [\"BbsBlsSignatureProof2020\"];\n    // TODO: consider in-place editing to optimize\n    const context = document[\"@context\"];\n    proofSet = proofSet.map((proof: any) => ({\n      // this is required because of...\n      // https://github.com/mattrglobal/jsonld-signatures-bbs/blob/master/src/BbsBlsSignatureProof2020.ts#L32\n      // A seperate implementation is probably advisable.\n      \"@context\": secV2Locked.includes(proof.type)\n        ? [\"https://w3id.org/security/v2\"]\n        : context,\n      ...proof\n    }));\n\n    return { proofSet, document };\n  };\n\n  private _verify = async ({\n    document,\n    suites,\n    proofSet,\n    purpose,\n    documentLoader,\n    expansionMap,\n    compactProof\n  }: any) => {\n    // filter out matching proofs\n    const result = await Promise.all(\n      proofSet.map((proof: any) =>\n        purpose.match(proof, { document, documentLoader, expansionMap })\n      )\n    );\n    const matches = proofSet.filter((_value: any, index: any) => result[index]);\n    if (matches.length === 0) {\n      // no matches, nothing to verify\n      return [];\n    }\n\n    // verify each matching proof\n    return (\n      await Promise.all(\n        matches.map(async (proof: any) => {\n          for (const s of suites) {\n            // Previously we used s.matchProof\n            // since issues were reported here:\n            // https://github.com/digitalbazaar/jsonld-signatures/issues/143\n            // https://github.com/mattrglobal/jsonld-signatures-bbs/issues/139\n            // we think matchProof should be a simply string comparison here...\n            // and no support for the \"expanded\" proofs should be provided...\n            const matchFound = s.type.replace(\"sec:\", \"\") === proof.type;\n\n            if (matchFound) {\n              return s\n                .verifyProof({\n                  proof,\n                  document,\n                  purpose,\n                  documentLoader,\n                  expansionMap,\n                  compactProof\n                })\n                .catch((error: any) => ({ verified: false, error }));\n            }\n          }\n        })\n      )\n    )\n      .map((r: any, i) => {\n        if (!r) {\n          return null;\n        }\n        if (r.error) {\n          this._addToJSON(r.error);\n        }\n        return { proof: matches[i], ...r };\n      })\n      .filter(r => r);\n  };\n\n  private _addToJSON = (error: any) => {\n    Object.defineProperty(error, \"toJSON\", {\n      value: function() {\n        return serializeError(this);\n      },\n      configurable: true,\n      writable: true\n    });\n  };\n\n  public verify = async (\n    document: any,\n    {\n      suite,\n      purpose,\n      documentLoader,\n      expansionMap,\n      // digital bazaar doesn't have this option as of version 8.0.0\n      // https://github.com/digitalbazaar/jsonld-signatures/blob/9a665c5b712ca997b9ca8205de11fb6f6ae15fe0/CHANGELOG.md#removed\n      compactProof = false\n    }: any = {}\n  ) => {\n    if (!suite) {\n      throw new TypeError('\"options.suite\" is required.');\n    }\n    if (!purpose) {\n      throw new TypeError('\"options.purpose\" is required.');\n    }\n    const suites = Array.isArray(suite) ? suite : [suite];\n    if (suites.length === 0) {\n      throw new TypeError(\"At least one suite is required.\");\n    }\n    const legacy = suites.some(s => s.legacy);\n    if (legacy) {\n      throw new TypeError(`Legacy suites are no longer supported.`);\n    }\n\n    if (!documentLoader) {\n      throw new TypeError('\"options.documentLoader\" is required.');\n    }\n    if (expansionMap !== false) {\n      expansionMap = strictExpansionMap;\n    }\n\n    try {\n      if (typeof document === \"string\") {\n        // fetch document\n        document = await documentLoader(document);\n      } else {\n        // never mutate function arguments.\n        document = JSON.parse(JSON.stringify(document));\n      }\n\n      // get proofs from document\n      const { proofSet, document: doc } = await this._getProofs({\n        document,\n        documentLoader,\n        expansionMap,\n        compactProof\n      });\n\n      document = doc;\n\n      // verify proofs\n      const results = await this._verify({\n        document,\n        suites,\n        proofSet,\n        purpose,\n        documentLoader,\n        expansionMap,\n        compactProof\n      });\n\n      if (results.length === 0) {\n        throw new Error(\n          \"Could not verify any proofs; no proofs matched the required \" +\n            \"suite and purpose.\"\n        );\n      }\n\n      // combine results\n      const verified = results.some(r => r.verified);\n      if (!verified) {\n        const errors = [].concat(\n          ...results.filter(r => r.error).map(r => r.error)\n        );\n        const result: any = { verified, results };\n        if (errors.length > 0) {\n          result.error = errors;\n        }\n        return result;\n      }\n      return { verified, results };\n    } catch (error) {\n      this._addToJSON(error);\n      return { verified: false, error };\n    }\n  };\n}\n","export class VerificationError extends Error {\n  public errors: any[];\n  constructor(errors: any) {\n    super(\"Verification error(s).\");\n\n    this.name = \"VerificationError\";\n    this.errors = [].concat(errors);\n  }\n}\n","import { ProofSet } from \"./ProofSet\";\n\nimport { ISignOptions } from \"./types\";\n\nexport const sign = async (\n  document: any,\n  {\n    suite,\n    purpose,\n    documentLoader,\n    expansionMap,\n    compactProof\n  }: ISignOptions = {\n    compactProof: true\n  }\n) => {\n  try {\n    return await new ProofSet().add(document, {\n      suite,\n      purpose,\n      documentLoader,\n      expansionMap,\n      compactProof\n    });\n  } catch (e) {\n    if (!documentLoader && e.name === \"jsonld.InvalidUrl\") {\n      const {\n        details: { url }\n      } = e;\n      const err: any = new Error(\n        `A URL \"${url}\" could not be fetched;` +\n          `you need to pass \"documentLoader\" or resolve the URL before calling \"sign\".`\n      );\n      err.cause = e;\n      throw err;\n    }\n    throw e;\n  }\n};\n","import { ProofSet } from \"./ProofSet\";\nimport { VerificationError } from \"./VerificationError\";\nimport { IVerifyOptions } from \"./types\";\nexport const verify = async (\n  document: any,\n  {\n    suite,\n    purpose,\n    documentLoader,\n    expansionMap,\n    compactProof\n  }: IVerifyOptions = {}\n) => {\n  const result = await new ProofSet().verify(document, {\n    suite,\n    purpose,\n    documentLoader,\n    expansionMap,\n    compactProof\n  });\n  const { error } = result;\n  if (error) {\n    if (!documentLoader && error.name === \"jsonld.InvalidUrl\") {\n      const {\n        details: { url }\n      } = error;\n      const urlError = new Error(\n        `A URL \"${url}\" could not be fetched; you need to pass ` +\n          '\"documentLoader\" or resolve the URL before calling \"verify\".'\n      );\n      result.error = new VerificationError(urlError);\n    } else {\n      result.error = new VerificationError(error);\n    }\n  }\n  return result;\n};\n"],"names":["ProofPurpose","term","date","maxTimestampDelta","Infinity","undefined","Error","TypeError","Date","isNaN","this","validate","proof","_options","expected","getTime","delta","created","valid","error","update","proofPurpose","match","_catch","body","recover","result","e","then","Symbol","iterator","asyncIterator","ControllerProofPurpose","_ProofPurpose","verificationMethod","verificationId","id","documentLoader","controller","document","verificationMethods","jsonld","getValues","_this2","some","vm","split","pop","purposes","AssertionProofPurpose","_ControllerProofPurpo","AuthenticationProofPurpose","challenge","domain","expansionMap","_this5","info","unmappedProperty","ProofSet","compactProof","proofSet","proofProperty","length","secV2Locked","context","map","includes","type","compact","compactToRelative","suites","purpose","Promise","all","matches","filter","_value","index","s","replace","verifyProof","verified","_Promise$all","r","i","_addToJSON","Object","defineProperty","value","serializeError","configurable","writable","suite","Array","isArray","legacy","strictExpansionMap","_getProofs","_verify","results","errors","concat","JSON","parse","stringify","add","input","createProof","addValue","VerificationError","name","err","details","url","cause","verify","urlError"],"mappings":"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"}