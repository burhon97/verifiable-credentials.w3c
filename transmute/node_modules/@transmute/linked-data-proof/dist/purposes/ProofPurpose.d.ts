import { IPurposeValidateOptions } from "../types";
export declare class ProofPurpose {
    term: any;
    date: any;
    maxTimestampDelta: any;
    constructor({ term, date, maxTimestampDelta }?: any);
    validate(proof: any, _options: IPurposeValidateOptions): Promise<{
        valid: boolean;
        error?: undefined;
    } | {
        valid: boolean;
        error: any;
    }>;
    /**
     * Called to update a proof when it is being created, adding any properties
     * specific to this purpose. This method is called prior to the proof
     * value being generated such that any properties added may be, for example,
     * included in a digital signature value.
     *
     * @param proof {object} the proof, in the `constants.SECURITY_CONTEXT_URL`
     *   to update.
     *
     * @return {Promise<object>} resolves to the proof instance (in the
     *   `constants.SECURITY_CONTEXT_URL`.
     */
    update(proof: any, _options: IPurposeValidateOptions): Promise<any>;
    /**
     * Determines if the given proof has a purpose that matches this instance,
     * i.e. this ProofPurpose instance should be used to validate the given
     * proof.
     *
     * @param proof {object} the proof to check.
     *
     * @return {Promise<boolean>} `true` if there's a match, `false` if not.
     */
    match(proof: any): Promise<boolean>;
}
