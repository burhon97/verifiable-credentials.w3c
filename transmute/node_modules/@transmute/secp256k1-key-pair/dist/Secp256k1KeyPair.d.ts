import { LdKeyPairInstance } from '@transmute/ld-key-pair';
import { JsonWebKey2020, EcdsaSecp256k1VerificationKey2020, EcdsaSecp256k1VerificationKey2019 } from './types';
export declare class Secp256k1KeyPair implements LdKeyPairInstance {
    id: string;
    type: string;
    controller: string;
    publicKey: Uint8Array;
    privateKey?: Uint8Array;
    static generate: ({ secureRandom, }: {
        secureRandom: () => Uint8Array;
    }) => Promise<Secp256k1KeyPair>;
    static from: (k: JsonWebKey2020 | EcdsaSecp256k1VerificationKey2019 | EcdsaSecp256k1VerificationKey2020) => Promise<Secp256k1KeyPair>;
    static fromFingerprint({ fingerprint }: {
        fingerprint: string;
    }): Promise<Secp256k1KeyPair>;
    static fingerprintFromPublicKey(importableType: JsonWebKey2020 | EcdsaSecp256k1VerificationKey2019): Promise<string>;
    constructor(opts: {
        id: string;
        type: string;
        controller: string;
        publicKey: Uint8Array;
        privateKey?: Uint8Array;
    });
    fingerprint(): Promise<string>;
    signer(type?: 'Ecdsa' | 'EcRecover' | 'Schnorr'): {
        sign({ data }: any): Promise<any>;
    };
    verifier(type?: 'Ecdsa' | 'EcRecover' | 'Schnorr'): {
        verify({ data, signature }: any): Promise<boolean>;
    };
    deriveSecret({ publicKey, }: {
        publicKey: JsonWebKey2020 | EcdsaSecp256k1VerificationKey2019 | EcdsaSecp256k1VerificationKey2020;
    }): Promise<any>;
    export(options?: {
        privateKey?: boolean;
        type: 'JsonWebKey2020' | 'EcdsaSecp256k1VerificationKey2020' | 'EcdsaSecp256k1VerificationKey2019';
    }): Promise<JsonWebKey2020 | EcdsaSecp256k1VerificationKey2020 | EcdsaSecp256k1VerificationKey2019>;
}
