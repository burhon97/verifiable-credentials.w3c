'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var webcrypto = require('@peculiar/webcrypto');
var bigInt = _interopDefault(require('big-integer'));
var tslib = require('tslib');
var ldKeyPair = require('@transmute/ld-key-pair');

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}
});

var crypto = /*#__PURE__*/new webcrypto.Crypto();
var subtle = typeof window !== 'undefined' && typeof jest === 'undefined' ? window.crypto.subtle : crypto.subtle;

var allowedMap = {
  'EC P-256': {
    name: 'ECDSA',
    namedCurve: 'P-256'
  },
  'EC P-384': {
    name: 'ECDSA',
    namedCurve: 'P-384'
  },
  'EC P-521': {
    name: 'ECDSA',
    namedCurve: 'P-521'
  },
  'RSASSA-PKCS1-v1_5 2048': {
    name: 'RSASSA-PKCS1-v1_5',
    modulusLength: 2048,
    hash: 'SHA-256',
    publicExponent: /*#__PURE__*/new Uint8Array([1, 0, 1])
  }
};
var getJwkFromCryptoKey = /*#__PURE__*/function () {
  var _ref = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(cryptoKey) {
    var jwk;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return subtle.exportKey('jwk', cryptoKey);

          case 2:
            jwk = _context.sent;
            delete jwk.ext;
            delete jwk.key_ops;
            return _context.abrupt("return", _extends({
              kty: jwk.kty,
              crv: jwk.crv
            }, jwk));

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getJwkFromCryptoKey(_x) {
    return _ref.apply(this, arguments);
  };
}();
var getCleanJwksFromCryptoKeyPair = /*#__PURE__*/function () {
  var _ref3 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(_ref2) {
    var publicKey, privateKey;
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            publicKey = _ref2.publicKey, privateKey = _ref2.privateKey;
            _context2.next = 3;
            return getJwkFromCryptoKey(publicKey);

          case 3:
            _context2.t0 = _context2.sent;
            _context2.next = 6;
            return getJwkFromCryptoKey(privateKey);

          case 6:
            _context2.t1 = _context2.sent;
            return _context2.abrupt("return", {
              publicKeyJwk: _context2.t0,
              privateKeyJwk: _context2.t1
            });

          case 8:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function getCleanJwksFromCryptoKeyPair(_x2) {
    return _ref3.apply(this, arguments);
  };
}();

var generateKey = /*#__PURE__*/function () {
  var _ref4 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(options) {
    var k;
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return subtle.generateKey(options, true, ['sign', 'verify']);

          case 2:
            k = _context3.sent;
            return _context3.abrupt("return", getCleanJwksFromCryptoKeyPair(k));

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function generateKey(_x3) {
    return _ref4.apply(this, arguments);
  };
}();

var generate = /*#__PURE__*/function () {
  var _ref5 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(opts) {
    var options, kp;
    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.prev = 0;
            options = allowedMap[opts.kty + " " + opts.crvOrSize];
            _context4.next = 4;
            return generateKey(options);

          case 4:
            kp = _context4.sent;
            return _context4.abrupt("return", _extends({
              id: '',
              type: 'JsonWebKey2020',
              controller: ''
            }, kp));

          case 8:
            _context4.prev = 8;
            _context4.t0 = _context4["catch"](0);
            console.warn(_context4.t0);
            throw new Error("Unsupport generate options: " + JSON.stringify(opts));

          case 12:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, null, [[0, 8]]);
  }));

  return function generate(_x4) {
    return _ref5.apply(this, arguments);
  };
}();

// base-x encoding / decoding
// Copyright (c) 2018 base-x contributors
// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
// Distributed under the MIT software license, see the accompanying
// file LICENSE or http://www.opensource.org/licenses/mit-license.php.
// @ts-ignore
function base(ALPHABET) {
  if (ALPHABET.length >= 255) {
    throw new TypeError('Alphabet too long');
  }

  var BASE_MAP = new Uint8Array(256);

  for (var j = 0; j < BASE_MAP.length; j++) {
    BASE_MAP[j] = 255;
  }

  for (var i = 0; i < ALPHABET.length; i++) {
    var x = ALPHABET.charAt(i);
    var xc = x.charCodeAt(0);

    if (BASE_MAP[xc] !== 255) {
      throw new TypeError(x + ' is ambiguous');
    }

    BASE_MAP[xc] = i;
  }

  var BASE = ALPHABET.length;
  var LEADER = ALPHABET.charAt(0);
  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up

  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up

  function encode(source) {
    if (Array.isArray(source) || source instanceof Uint8Array) {
      source = Buffer.from(source);
    }

    if (!Buffer.isBuffer(source)) {
      throw new TypeError('Expected Buffer');
    }

    if (source.length === 0) {
      return '';
    } // Skip & count leading zeroes.


    var zeroes = 0;
    var length = 0;
    var pbegin = 0;
    var pend = source.length;

    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++;
      zeroes++;
    } // Allocate enough space in big-endian base58 representation.


    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
    var b58 = new Uint8Array(size); // Process the bytes.

    while (pbegin !== pend) {
      var carry = source[pbegin]; // Apply "b58 = b58 * 256 + ch".

      var i = 0;

      for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {
        carry += 256 * b58[it1] >>> 0;
        b58[it1] = carry % BASE >>> 0;
        carry = carry / BASE >>> 0;
      }

      if (carry !== 0) {
        throw new Error('Non-zero carry');
      }

      length = i;
      pbegin++;
    } // Skip leading zeroes in base58 result.


    var it2 = size - length;

    while (it2 !== size && b58[it2] === 0) {
      it2++;
    } // Translate the result into a string.


    var str = LEADER.repeat(zeroes);

    for (; it2 < size; ++it2) {
      str += ALPHABET.charAt(b58[it2]);
    }

    return str;
  }

  function decodeUnsafe(source) {
    if (typeof source !== 'string') {
      throw new TypeError('Expected String');
    }

    if (source.length === 0) {
      return Buffer.alloc(0);
    }

    var psz = 0; // Skip leading spaces.

    if (source[psz] === ' ') {
      return;
    } // Skip and count leading '1's.


    var zeroes = 0;
    var length = 0;

    while (source[psz] === LEADER) {
      zeroes++;
      psz++;
    } // Allocate enough space in big-endian base256 representation.


    var size = (source.length - psz) * FACTOR + 1 >>> 0; // log(58) / log(256), rounded up.

    var b256 = new Uint8Array(size); // Process the characters.

    while (source[psz]) {
      // Decode character
      var carry = BASE_MAP[source.charCodeAt(psz)]; // Invalid character

      if (carry === 255) {
        return;
      }

      var i = 0;

      for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {
        carry += BASE * b256[it3] >>> 0;
        b256[it3] = carry % 256 >>> 0;
        carry = carry / 256 >>> 0;
      }

      if (carry !== 0) {
        throw new Error('Non-zero carry');
      }

      length = i;
      psz++;
    } // Skip trailing spaces.


    if (source[psz] === ' ') {
      return;
    } // Skip leading zeroes in b256.


    var it4 = size - length;

    while (it4 !== size && b256[it4] === 0) {
      it4++;
    }

    var vch = Buffer.allocUnsafe(zeroes + (size - it4));
    vch.fill(0x00, 0, zeroes);
    var j = zeroes;

    while (it4 !== size) {
      vch[j++] = b256[it4++];
    }

    return vch;
  }

  function decode(string) {
    var buffer = decodeUnsafe(string);

    if (buffer) {
      return buffer;
    }

    throw new Error('Non-base' + BASE + ' character');
  }

  return {
    encode: encode,
    decodeUnsafe: decodeUnsafe,
    decode: decode
  };
}

var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
var base58 = /*#__PURE__*/base(ALPHABET);

var base64 = {
  encode: function encode(unencoded) {
    return Buffer.from(unencoded || '').toString('base64');
  },
  decode: function decode(encoded) {
    return Buffer.from(encoded || '', 'base64').toString('utf8');
  }
};
var base64url = {
  encode: function encode(unencoded) {
    var encoded = base64.encode(unencoded);
    return encoded.replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/g, '');
  },
  decode: function decode(encoded) {
    encoded = encoded.replace(/-/g, '+').replace(/_/g, '/');

    while (encoded.length % 4) {
      encoded += '=';
    }

    return base64.decode(encoded);
  }
};



var index = {
  __proto__: null,
  base58: base58,
  base64: base64,
  base64url: base64url
};

var getConstantsForCurve = function getConstantsForCurve(curve) {
  var two, prime, b, pIdent;

  if (curve === 'P-256') {
    two = new bigInt(2);
    prime = two.pow(256).subtract(two.pow(224)).add(two.pow(192)).add(two.pow(96)).subtract(1);
    pIdent = prime.add(1).divide(4);
    b = new bigInt('5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b', 16);
  }

  if (curve === 'P-384') {
    two = new bigInt(2);
    prime = two.pow(384).subtract(two.pow(128)).subtract(two.pow(96)).add(two.pow(32)).subtract(1);
    pIdent = prime.add(1).divide(4);
    b = new bigInt('b3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef', 16);
  }

  if (curve === 'P-521') {
    two = new bigInt(2);
    prime = two.pow(521).subtract(1);
    b = new bigInt('00000051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00', 16);
    pIdent = prime.add(1).divide(4);
  }

  return {
    prime: prime,
    b: b,
    pIdent: pIdent
  };
};

// https://github.com/w3c-ccg/did-method-key/pull/36

/**
 * Point compress elliptic curve key
 * @param {Uint8Array} x component
 * @param {Uint8Array} y component
 * @return {Uint8Array} Compressed representation
 */

function compressECPoint(x, y) {
  var out = new Uint8Array(x.length + 1);
  out[0] = 2 + (y[y.length - 1] & 1);
  out.set(x, 1);
  return out;
}

function pad_with_zeroes(number, length) {
  var retval = '' + number;

  while (retval.length < length) {
    retval = '0' + retval;
  }

  return retval;
}

var compress = function compress(publicKey) {
  var publicKeyHex = Buffer.from(publicKey).toString('hex');
  var xHex = publicKeyHex.slice(0, publicKeyHex.length / 2);
  var yHex = publicKeyHex.slice(publicKeyHex.length / 2, publicKeyHex.length);
  var xOctet = Uint8Array.from(Buffer.from(xHex, 'hex'));
  var yOctet = Uint8Array.from(Buffer.from(yHex, 'hex'));
  return compressECPoint(xOctet, yOctet);
};
var curveToPointLength = {
  'P-256': 64,
  'P-384': 96,
  'P-521': 132
};
var expand = function expand(publicKey, curve) {
  var publicKeyComponent = Buffer.from(publicKey).toString('hex');

  var _getConstantsForCurve = getConstantsForCurve(curve),
      prime = _getConstantsForCurve.prime,
      b = _getConstantsForCurve.b,
      pIdent = _getConstantsForCurve.pIdent; // eslint-disable-next-line


  var signY = new Number(publicKeyComponent[1]) - 2;
  var x = new bigInt(publicKeyComponent.substring(2), 16); // y^2 = x^3 - 3x + b

  var y;
  y = x.pow(3).subtract(x.multiply(3)).add(b).modPow(pIdent, prime); // If the parity doesn't match it's the *other* root

  if (y.mod(2).toJSNumber() !== signY) {
    // y = prime - y
    y = prime.subtract(y);
  }

  return Buffer.from(pad_with_zeroes(x.toString(16), curveToPointLength[curve]) + pad_with_zeroes(y.toString(16), curveToPointLength[curve]), 'hex');
};

var canonicalize = JSON.stringify;
var crvToUvarint = {
  'P-256': '8024',
  'P-384': '8124',
  'P-521': '8224'
};
var uvarintToCrv = {
  '8024': 'P-256',
  '8124': 'P-384',
  '8224': 'P-521'
};
var getJwkFromMulticodec = function getJwkFromMulticodec(fingerprint) {
  var decoders = {
    z: base58,
    u: base64url
  };
  var encoding = fingerprint[0];
  var decoded = decoders[encoding].decode(fingerprint.substring(1));
  var prefix = decoded.slice(0, 2);
  var publicKey = decoded.slice(2);
  var crv = uvarintToCrv[prefix.toString('hex')];
  var expanded = expand(publicKey, crv);
  var x = expanded.slice(0, expanded.length / 2);
  var y = expanded.slice(expanded.length / 2);
  return {
    kty: 'EC',
    crv: crv,
    x: base64url.encode(x),
    y: base64url.encode(y)
  };
};
var getKid = /*#__PURE__*/function () {
  var _ref = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(jwk) {
    var copy, digest;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            copy = _extends({}, jwk);
            delete copy.d;
            delete copy.kid;
            delete copy.alg;
            _context.next = 6;
            return subtle.digest('SHA-256', Buffer.from(canonicalize(copy)));

          case 6:
            digest = _context.sent;
            return _context.abrupt("return", base64url.encode(digest));

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getKid(_x) {
    return _ref.apply(this, arguments);
  };
}();
var getMulticodec = /*#__PURE__*/function () {
  var _ref2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(jwk) {
    var publicKey, publicKeyBuffer, compressed;
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            publicKey = [];

            if (jwk.x) {
              publicKey.push(Buffer.from(jwk.x, 'base64'));
            }

            if (jwk.y) {
              publicKey.push(Buffer.from(jwk.y, 'base64'));
            }

            publicKeyBuffer = Buffer.concat(publicKey);
            compressed = Buffer.from(compress(Uint8Array.from(publicKeyBuffer)));
            return _context2.abrupt("return", 'z' + base58.encode(Buffer.concat([Buffer.from(crvToUvarint[jwk.crv], 'hex'), compressed])));

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function getMulticodec(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

var getImportKeyOptsFromJwk = function getImportKeyOptsFromJwk(jwk, derive) {
  if (derive === void 0) {
    derive = false;
  }

  if (jwk.kty === 'EC' && jwk.crv === 'P-256') {
    return {
      name: derive ? 'ECDH' : 'ECDSA',
      namedCurve: 'P-256'
    };
  }

  if (jwk.kty === 'EC' && jwk.crv === 'P-384') {
    return {
      name: derive ? 'ECDH' : 'ECDSA',
      namedCurve: 'P-384'
    };
  }

  if (jwk.kty === 'EC' && jwk.crv === 'P-521') {
    return {
      name: derive ? 'ECDH' : 'ECDSA',
      namedCurve: 'P-521'
    };
  }

  if (jwk.kty === 'RSA') {
    return derive ? {
      name: 'RSASSA-PKCS1-v1_5',
      modulusLength: 2048,
      hash: 'SHA-256',
      publicExponent: new Uint8Array([1, 0, 1])
    } : {
      name: 'RSASSA-PKCS1-v1_5',
      modulusLength: 2048,
      hash: 'SHA-256',
      publicExponent: new Uint8Array([1, 0, 1])
    };
  }

  throw new Error('Unsupported jwk: ' + JSON.stringify(jwk));
};

var getCryptoKeyFromJsonWebKey2020 = /*#__PURE__*/function () {
  var _ref = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(keypair, derive) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (derive === void 0) {
              derive = false;
            }

            if (keypair.privateKeyJwk) {
              _context.next = 3;
              break;
            }

            return _context.abrupt("return", subtle.importKey('jwk', keypair.publicKeyJwk, getImportKeyOptsFromJwk(keypair.publicKeyJwk, derive), true, derive ? [] : ['verify']));

          case 3:
            if (!keypair.privateKeyJwk) {
              _context.next = 5;
              break;
            }

            return _context.abrupt("return", subtle.importKey('jwk', keypair.privateKeyJwk, getImportKeyOptsFromJwk(keypair.privateKeyJwk, derive), true, derive ? ['deriveBits'] : ['sign']));

          case 5:
            throw new Error('unsupported key type:  ' + JSON.stringify(keypair));

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getCryptoKeyFromJsonWebKey2020(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var getCryptoKeyPairFromJsonWebKey2020 = /*#__PURE__*/function () {
  var _ref = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(k, derive) {
    var keypair;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (derive === void 0) {
              derive = false;
            }

            keypair = {};

            if (!k.publicKeyJwk) {
              _context.next = 6;
              break;
            }

            _context.next = 5;
            return getCryptoKeyFromJsonWebKey2020({
              publicKeyJwk: k.publicKeyJwk
            }, derive);

          case 5:
            keypair.publicKey = _context.sent;

          case 6:
            if (!k.privateKeyJwk) {
              _context.next = 10;
              break;
            }

            _context.next = 9;
            return getCryptoKeyFromJsonWebKey2020({
              privateKeyJwk: k.privateKeyJwk
            }, derive);

          case 9:
            keypair.privateKey = _context.sent;

          case 10:
            return _context.abrupt("return", keypair);

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getCryptoKeyPairFromJsonWebKey2020(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var securityVocabTypeToCrv = {
  P256Key2021: 'P-256',
  P384Key2021: 'P-384',
  P521Key2021: 'P-521'
};

var convertMultiKey2021ToJsonWebKey2020 = function convertMultiKey2021ToJsonWebKey2020(keyPair) {
  var publicKeyJwk = {
    kty: 'EC',
    crv: securityVocabTypeToCrv[keyPair.type]
  };

  if (keyPair.publicKeyBase58) {
    // assume compressed
    var publicKey = base58.decode(keyPair.publicKeyBase58);
    var expanded = expand(Uint8Array.from(publicKey), publicKeyJwk.crv);
    var x = expanded.slice(0, expanded.length / 2);
    var y = expanded.slice(expanded.length / 2);
    publicKeyJwk = _extends({}, publicKeyJwk, {
      x: base64url.encode(x),
      y: base64url.encode(y)
    });
  }

  var jsonWebKey = {
    id: keyPair.id,
    controller: keyPair.controller,
    type: 'JsonWebKey2020',
    publicKeyJwk: publicKeyJwk
  };

  if (keyPair.privateKeyBase58) {
    var privateKey = base58.decode(keyPair.privateKeyBase58);
    jsonWebKey.privateKeyJwk = _extends({}, jsonWebKey.publicKeyJwk, {
      d: base64url.encode(privateKey)
    });
  }

  return jsonWebKey;
};

var getCryptoKeyPairFromMultiKey2021 = /*#__PURE__*/function () {
  var _ref = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(keypair, derive) {
    var jsonWebKey;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (derive === void 0) {
              derive = false;
            }

            _context.prev = 1;
            jsonWebKey = convertMultiKey2021ToJsonWebKey2020(keypair);
            return _context.abrupt("return", getCryptoKeyPairFromJsonWebKey2020(jsonWebKey, derive));

          case 6:
            _context.prev = 6;
            _context.t0 = _context["catch"](1);
            throw new Error("unsupported key type:  " + _context.t0 + "\n " + JSON.stringify(keypair));

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[1, 6]]);
  }));

  return function getCryptoKeyPairFromMultiKey2021(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();



var key = {
  __proto__: null,
  getJwkFromCryptoKey: getJwkFromCryptoKey,
  getCleanJwksFromCryptoKeyPair: getCleanJwksFromCryptoKeyPair,
  generate: generate,
  getJwkFromMulticodec: getJwkFromMulticodec,
  getKid: getKid,
  getMulticodec: getMulticodec,
  getCryptoKeyFromJsonWebKey2020: getCryptoKeyFromJsonWebKey2020,
  getCryptoKeyPairFromJsonWebKey2020: getCryptoKeyPairFromJsonWebKey2020,
  getCryptoKeyPairFromMultiKey2021: getCryptoKeyPairFromMultiKey2021
};

var getSignatureOptionsFromCryptoKey = function getSignatureOptionsFromCryptoKey(cryptoKey) {
  if (cryptoKey.algorithm.name === 'ECDSA' && cryptoKey.algorithm.namedCurve === 'P-256') {
    return {
      name: 'ECDSA',
      hash: 'SHA-256'
    };
  }

  if (cryptoKey.algorithm.name === 'ECDSA' && cryptoKey.algorithm.namedCurve === 'P-384') {
    return {
      name: 'ECDSA',
      hash: 'SHA-384'
    };
  }

  if (cryptoKey.algorithm.name === 'ECDSA' && cryptoKey.algorithm.namedCurve === 'P-521') {
    return {
      name: 'ECDSA',
      hash: 'SHA-512'
    };
  }

  if (cryptoKey.algorithm.name === 'RSASSA-PKCS1-v1_5') {
    return 'RSASSA-PKCS1-v1_5';
  }

  throw new Error('Unsupported cryptoKey: ' + JSON.stringify(cryptoKey));
};

var getSigner = function getSigner(k) {
  return {
    sign: function () {
      var _sign = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(_ref) {
        var data, cryptoKey, signature;
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                data = _ref.data;
                cryptoKey = k;

                if (!(k.type === 'JsonWebKey2020')) {
                  _context.next = 6;
                  break;
                }

                _context.next = 5;
                return getCryptoKeyFromJsonWebKey2020(k);

              case 5:
                cryptoKey = _context.sent;

              case 6:
                _context.next = 8;
                return subtle.sign(getSignatureOptionsFromCryptoKey(cryptoKey), cryptoKey, Buffer.from(data));

              case 8:
                signature = _context.sent;
                return _context.abrupt("return", new Uint8Array(signature));

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function sign(_x) {
        return _sign.apply(this, arguments);
      }

      return sign;
    }()
  };
};

var getVerifier = function getVerifier(k, opts) {
  if (opts === void 0) {
    opts = {
      ignorePrivateKey: false
    };
  }

  return {
    verify: function () {
      var _verify = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(_ref) {
        var signature, data, cryptoKey, verified;
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                signature = _ref.signature, data = _ref.data;
                cryptoKey = k;

                if (!(k.type === 'JsonWebKey2020')) {
                  _context.next = 9;
                  break;
                }

                if (!k.privateKeyJwk) {
                  _context.next = 6;
                  break;
                }

                if (opts.ignorePrivateKey) {
                  _context.next = 6;
                  break;
                }

                throw new Error('verification method contained private key!');

              case 6:
                _context.next = 8;
                return getCryptoKeyFromJsonWebKey2020(k);

              case 8:
                cryptoKey = _context.sent;

              case 9:
                verified = false;
                _context.prev = 10;
                _context.next = 13;
                return subtle.verify(getSignatureOptionsFromCryptoKey(cryptoKey), cryptoKey, signature, data);

              case 13:
                verified = _context.sent;
                _context.next = 18;
                break;

              case 16:
                _context.prev = 16;
                _context.t0 = _context["catch"](10);

              case 18:
                return _context.abrupt("return", verified);

              case 19:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[10, 16]]);
      }));

      function verify(_x) {
        return _verify.apply(this, arguments);
      }

      return verify;
    }()
  };
};



var raw = {
  __proto__: null,
  getSigner: getSigner,
  getVerifier: getVerifier
};

var canonicalize$1 = JSON.stringify;
var getJwaAlgFromJwk = function getJwaAlgFromJwk(jwk) {
  if (jwk.kty === 'EC' && jwk.crv === 'P-256') {
    return 'ES256';
  }

  if (jwk.kty === 'EC' && jwk.crv === 'P-384') {
    return 'ES384';
  }

  if (jwk.kty === 'EC' && jwk.crv === 'P-521') {
    return 'ES512';
  }

  if (jwk.kty === 'RSA') {
    return 'RS256';
  }

  throw new Error('Unsupported getJwaAlgFromJwk for jwk: ' + JSON.stringify(jwk));
};
var createJws = /*#__PURE__*/function () {
  var _ref = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(signer, payload, header) {
    var encodedHeader, encodedPayload, toBeSigned, signature;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            encodedHeader = base64url.encode(canonicalize$1(header));
            encodedPayload = base64url.encode(typeof payload === 'string' ? payload : canonicalize$1(payload));
            toBeSigned = encodedHeader + "." + encodedPayload;
            _context.next = 5;
            return signer.sign({
              data: toBeSigned
            });

          case 5:
            signature = _context.sent;
            return _context.abrupt("return", toBeSigned + "." + base64url.encode(Buffer.from(signature)));

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function createJws(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
var verifyJws = /*#__PURE__*/function () {
  var _ref2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(verifier, jws) {
    var _jws$split, header, payload, signature, toBeVerified, verified;

    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _jws$split = jws.split('.'), header = _jws$split[0], payload = _jws$split[1], signature = _jws$split[2];
            toBeVerified = header + "." + payload;
            _context2.next = 4;
            return verifier.verify({
              data: Buffer.from(toBeVerified),
              signature: Buffer.from(signature, 'base64')
            });

          case 4:
            verified = _context2.sent;
            return _context2.abrupt("return", verified);

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function verifyJws(_x4, _x5) {
    return _ref2.apply(this, arguments);
  };
}();
var createDetachedJws = /*#__PURE__*/function () {
  var _ref3 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(signer, payload, header) {
    var encodedHeader, toBeSigned, signature, encodedSignature;
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            encodedHeader = base64url.encode(canonicalize$1(_extends({}, header, {
              b64: false,
              crit: ['b64']
            })));
            toBeSigned = new Uint8Array(Buffer.concat([Buffer.from(encodedHeader, 'utf-8'), Buffer.from('.', 'utf-8'), payload]));
            _context3.next = 4;
            return signer.sign({
              data: toBeSigned
            });

          case 4:
            signature = _context3.sent;
            encodedSignature = base64url.encode(Buffer.from(signature));
            return _context3.abrupt("return", encodedHeader + ".." + encodedSignature);

          case 7:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function createDetachedJws(_x6, _x7, _x8) {
    return _ref3.apply(this, arguments);
  };
}();
var verifyDetachedJws = /*#__PURE__*/function () {
  var _ref4 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(verifier, payload, signature) {
    var _signature$split, encodedHeader, encodedSignature, toBeVerified, verified;

    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _signature$split = signature.split('..'), encodedHeader = _signature$split[0], encodedSignature = _signature$split[1];
            toBeVerified = new Uint8Array(Buffer.concat([Buffer.from(encodedHeader, 'utf-8'), Buffer.from('.', 'utf-8'), payload]));
            _context4.next = 4;
            return verifier.verify({
              data: toBeVerified,
              signature: Buffer.from(encodedSignature, 'base64')
            });

          case 4:
            verified = _context4.sent;
            return _context4.abrupt("return", verified);

          case 6:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function verifyDetachedJws(_x9, _x10, _x11) {
    return _ref4.apply(this, arguments);
  };
}();

var getAlg = /*#__PURE__*/function () {
  var _ref5 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(cryptoKey) {
    var rawSignatureOptions, alg;
    return runtime_1.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            rawSignatureOptions = getSignatureOptionsFromCryptoKey(cryptoKey);
            alg = 'none';

            if (rawSignatureOptions === 'RSASSA-PKCS1-v1_5') {
              alg = 'RS256';
            }

            if (rawSignatureOptions.name === 'ECDSA' && rawSignatureOptions.hash === 'SHA-256') {
              alg = 'ES256';
            }

            if (rawSignatureOptions.name === 'ECDSA' && rawSignatureOptions.hash === 'SHA-384') {
              alg = 'ES384';
            }

            if (rawSignatureOptions.name === 'ECDSA' && rawSignatureOptions.hash === 'SHA-512') {
              alg = 'ES512';
            }

            if (!(alg === 'none')) {
              _context5.next = 10;
              break;
            }

            throw new Error("Unsupported signature alg: " + alg);

          case 10:
            return _context5.abrupt("return", alg);

          case 11:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  return function getAlg(_x12) {
    return _ref5.apply(this, arguments);
  };
}();

var getJwsSigner = function getJwsSigner(cryptoKey) {
  return {
    sign: function () {
      var _sign = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(_ref6) {
        var data, signer, alg;
        return runtime_1.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                data = _ref6.data;
                signer = getSigner(cryptoKey);
                _context6.next = 4;
                return getAlg(cryptoKey);

              case 4:
                alg = _context6.sent;
                return _context6.abrupt("return", createJws(signer, data, {
                  alg: alg
                }));

              case 6:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      function sign(_x13) {
        return _sign.apply(this, arguments);
      }

      return sign;
    }()
  };
};
var getDetachedJwsSigner = function getDetachedJwsSigner(cryptoKey) {
  return {
    sign: function () {
      var _sign2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(_ref7) {
        var data, signer, alg;
        return runtime_1.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                data = _ref7.data;
                signer = getSigner(cryptoKey);
                _context7.next = 4;
                return getAlg(cryptoKey);

              case 4:
                alg = _context7.sent;
                return _context7.abrupt("return", createDetachedJws(signer, data, {
                  alg: alg
                }));

              case 6:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      function sign(_x14) {
        return _sign2.apply(this, arguments);
      }

      return sign;
    }()
  };
};
var getJwsVerifier = function getJwsVerifier(cryptoKey) {
  return {
    verify: function () {
      var _verify = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(_ref8) {
        var signature, verifier;
        return runtime_1.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                signature = _ref8.signature;
                verifier = getVerifier(cryptoKey);
                return _context8.abrupt("return", verifyJws(verifier, signature));

              case 3:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));

      function verify(_x15) {
        return _verify.apply(this, arguments);
      }

      return verify;
    }()
  };
};
var getDetachedJwsVerifier = function getDetachedJwsVerifier(cryptoKey) {
  return {
    verify: function () {
      var _verify2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(_ref9) {
        var data, signature, verifier;
        return runtime_1.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                data = _ref9.data, signature = _ref9.signature;
                verifier = getVerifier(cryptoKey);
                return _context9.abrupt("return", verifyDetachedJws(verifier, data, signature));

              case 3:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      }));

      function verify(_x16) {
        return _verify2.apply(this, arguments);
      }

      return verify;
    }()
  };
};

var jws = {
  __proto__: null,
  getJwaAlgFromJwk: getJwaAlgFromJwk,
  createJws: createJws,
  verifyJws: verifyJws,
  createDetachedJws: createDetachedJws,
  verifyDetachedJws: verifyDetachedJws,
  getJwsSigner: getJwsSigner,
  getDetachedJwsSigner: getDetachedJwsSigner,
  getJwsVerifier: getJwsVerifier,
  getDetachedJwsVerifier: getDetachedJwsVerifier
};

var deriveBitsFromCryptoKey = /*#__PURE__*/function () {
  var _ref = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(privateKey, publicKey) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.t0 = Uint8Array;
            _context.next = 3;
            return subtle.deriveBits({
              name: 'ECDH',
              "public": publicKey
            }, privateKey, 256);

          case 3:
            _context.t1 = _context.sent;
            return _context.abrupt("return", new _context.t0(_context.t1));

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function deriveBitsFromCryptoKey(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
var deriveBitsFromJsonWebKey2020 = /*#__PURE__*/function () {
  var _ref2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(localPrivateKey, remotePublicKey) {
    var privateKey, publicKey;
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!(localPrivateKey.privateKeyJwk.kty === 'RSA')) {
              _context2.next = 2;
              break;
            }

            throw new Error('deriveBits is not supported on this key type');

          case 2:
            _context2.next = 4;
            return getCryptoKeyFromJsonWebKey2020({
              publicKeyJwk: _extends({}, localPrivateKey.publicKeyJwk),
              privateKeyJwk: _extends({}, localPrivateKey.privateKeyJwk, {
                usages: ['deriveKey', 'deriveBits']
              })
            }, true);

          case 4:
            privateKey = _context2.sent;
            _context2.next = 7;
            return getCryptoKeyFromJsonWebKey2020({
              publicKeyJwk: remotePublicKey.publicKeyJwk
            }, true);

          case 7:
            publicKey = _context2.sent;

            if (!(remotePublicKey.publicKeyJwk.kty !== localPrivateKey.privateKeyJwk.kty)) {
              _context2.next = 10;
              break;
            }

            throw new Error("local and remote kty must match: " + remotePublicKey.publicKeyJwk.kty + " " + localPrivateKey.privateKeyJwk.kty);

          case 10:
            _context2.t0 = Uint8Array;
            _context2.next = 13;
            return subtle.deriveBits({
              name: 'ECDH',
              "public": publicKey
            }, privateKey, 256);

          case 13:
            _context2.t1 = _context2.sent;
            return _context2.abrupt("return", new _context2.t0(_context2.t1));

          case 15:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function deriveBitsFromJsonWebKey2020(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();

var toJsonWebKey2020 = /*#__PURE__*/function () {
  var _ref = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(id, controller, publicKey, privateKey) {
    var kp;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.t0 = id;
            _context.t1 = controller;
            _context.next = 4;
            return getJwkFromCryptoKey(publicKey);

          case 4:
            _context.t2 = _context.sent;
            kp = {
              id: _context.t0,
              type: 'JsonWebKey2020',
              controller: _context.t1,
              publicKeyJwk: _context.t2
            };

            if (!privateKey) {
              _context.next = 16;
              break;
            }

            _context.prev = 7;
            _context.next = 10;
            return getJwkFromCryptoKey(privateKey);

          case 10:
            kp.privateKeyJwk = _context.sent;
            _context.next = 16;
            break;

          case 13:
            _context.prev = 13;
            _context.t3 = _context["catch"](7);
            throw new Error('Cannot export private key');

          case 16:
            return _context.abrupt("return", kp);

          case 17:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[7, 13]]);
  }));

  return function toJsonWebKey2020(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();

var conventionExportHelper = /*#__PURE__*/function () {
  var _ref2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(id, type, controller, publicKey, privateKey) {
    var publicKeyJwk, privateKeyJwk, kp;
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return getJwkFromCryptoKey(publicKey);

          case 2:
            publicKeyJwk = _context2.sent;

            if (!privateKey) {
              _context2.next = 9;
              break;
            }

            _context2.next = 6;
            return getJwkFromCryptoKey(privateKey);

          case 6:
            _context2.t0 = _context2.sent;
            _context2.next = 10;
            break;

          case 9:
            _context2.t0 = undefined;

          case 10:
            privateKeyJwk = _context2.t0;
            kp = {
              id: id,
              type: type,
              controller: controller,
              publicKeyBase58: base58.encode(compress(Buffer.concat([Buffer.from(publicKeyJwk.x, 'base64'), Buffer.from(publicKeyJwk.y, 'base64')])))
            };

            if (privateKeyJwk) {
              kp.privateKeyBase58 = base58.encode(Buffer.from(privateKeyJwk.d, 'base64'));
            }

            return _context2.abrupt("return", kp);

          case 14:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function conventionExportHelper(_x5, _x6, _x7, _x8, _x9) {
    return _ref2.apply(this, arguments);
  };
}();

var toP521Key2021 = /*#__PURE__*/function () {
  var _ref3 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(id, controller, publicKey, privateKey) {
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", conventionExportHelper(id, 'P521Key2021', controller, publicKey, privateKey));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function toP521Key2021(_x10, _x11, _x12, _x13) {
    return _ref3.apply(this, arguments);
  };
}();
var toP384Key2021 = /*#__PURE__*/function () {
  var _ref4 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(id, controller, publicKey, privateKey) {
    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", conventionExportHelper(id, 'P384Key2021', controller, publicKey, privateKey));

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function toP384Key2021(_x14, _x15, _x16, _x17) {
    return _ref4.apply(this, arguments);
  };
}();
var toP256Key2021 = /*#__PURE__*/function () {
  var _ref5 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(id, controller, publicKey, privateKey) {
    return runtime_1.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            return _context5.abrupt("return", conventionExportHelper(id, 'P256Key2021', controller, publicKey, privateKey));

          case 1:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  return function toP256Key2021(_x18, _x19, _x20, _x21) {
    return _ref5.apply(this, arguments);
  };
}();
var exportableTypes = {
  JsonWebKey2020: toJsonWebKey2020,
  P521Key2021: toP521Key2021,
  P384Key2021: toP384Key2021,
  P256Key2021: toP256Key2021
};

var WebCryptoKey_1;

exports.WebCryptoKey = WebCryptoKey_1 = /*#__PURE__*/function () {
  function WebCryptoKey(opts) {
    this.type = 'JsonWebKey2020';
    this.id = opts.id;
    this.type = opts.type || 'JsonWebKey2020';
    this.controller = opts.controller;
    this.publicKey = opts.publicKey;
    this.privateKey = opts.privateKey;
  }

  WebCryptoKey.fingerprintFromPublicKey = /*#__PURE__*/function () {
    var _fingerprintFromPublicKey = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(publicKey) {
      var k;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return WebCryptoKey_1.from(publicKey);

            case 2:
              k = _context.sent;
              _context.next = 5;
              return k;

            case 5:
              return _context.abrupt("return", _context.sent.fingerprint());

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function fingerprintFromPublicKey(_x) {
      return _fingerprintFromPublicKey.apply(this, arguments);
    }

    return fingerprintFromPublicKey;
  }();

  WebCryptoKey.fromFingerprint = /*#__PURE__*/function () {
    var _fromFingerprint = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(_ref) {
      var fingerprint, publicKeyJwk;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              fingerprint = _ref.fingerprint;
              _context2.prev = 1;
              publicKeyJwk = getJwkFromMulticodec(fingerprint);
              return _context2.abrupt("return", WebCryptoKey_1.from({
                id: "did:key:" + fingerprint + "#" + fingerprint,
                type: 'JsonWebKey2020',
                controller: "did:key:" + fingerprint,
                publicKeyJwk: publicKeyJwk
              }));

            case 6:
              _context2.prev = 6;
              _context2.t0 = _context2["catch"](1);
              throw new Error('Unsupported fingerprint type: ' + fingerprint);

            case 9:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, null, [[1, 6]]);
    }));

    function fromFingerprint(_x2) {
      return _fromFingerprint.apply(this, arguments);
    }

    return fromFingerprint;
  }();

  var _proto = WebCryptoKey.prototype;

  _proto.fingerprint = /*#__PURE__*/function () {
    var _fingerprint = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3() {
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.t0 = getMulticodec;
              _context3.next = 3;
              return getJwkFromCryptoKey(this.publicKey);

            case 3:
              _context3.t1 = _context3.sent;
              return _context3.abrupt("return", (0, _context3.t0)(_context3.t1));

            case 5:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function fingerprint() {
      return _fingerprint.apply(this, arguments);
    }

    return fingerprint;
  }();

  _proto["export"] = /*#__PURE__*/function () {
    var _export2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(options) {
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (options === void 0) {
                options = {
                  privateKey: false,
                  type: 'JsonWebKey2020'
                };
              }

              if (!exportableTypes[options.type]) {
                _context4.next = 3;
                break;
              }

              return _context4.abrupt("return", exportableTypes[options.type](this.id, this.controller, this.publicKey, options.privateKey ? this.privateKey : undefined));

            case 3:
              throw new Error('Unsupported export options: ' + JSON.stringify(options));

            case 4:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function _export(_x3) {
      return _export2.apply(this, arguments);
    }

    return _export;
  }();

  _proto.signer = function signer(type) {
    if (type === void 0) {
      type = 'Ecdsa';
    }

    if (this.privateKey) {
      return getSigner(this.privateKey);
    }

    throw new Error("No private key to sign " + type + " with.");
  };

  _proto.verifier = function verifier(type) {
    if (type === void 0) {
      type = 'Ecdsa';
    }

    if (this.publicKey) {
      return getVerifier(this.publicKey);
    }

    throw new Error("No public key to verify " + type + " with.");
  };

  _proto.deriveSecret = /*#__PURE__*/function () {
    var _deriveSecret = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(_ref2) {
      var _this$privateKey;

      var publicKey, localPrivateKey, remotePublicKey;
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              publicKey = _ref2.publicKey;

              if (this.privateKey) {
                _context5.next = 3;
                break;
              }

              throw new Error('private key is required to deriveSecret');

            case 3:
              localPrivateKey = this.privateKey; // This is required by web crypto to set the key type.
              // so that deriveBits may be called.

              if (!((_this$privateKey = this.privateKey) != null && _this$privateKey.extractable)) {
                _context5.next = 12;
                break;
              }

              _context5.t0 = key;
              _context5.next = 8;
              return this["export"]({
                type: 'JsonWebKey2020',
                privateKey: true
              });

            case 8:
              _context5.t1 = _context5.sent;
              _context5.next = 11;
              return _context5.t0.getCryptoKeyPairFromJsonWebKey2020.call(_context5.t0, _context5.t1, true);

            case 11:
              localPrivateKey = _context5.sent.privateKey;

            case 12:
              if (!(publicKey.type === 'JsonWebKey2020')) {
                _context5.next = 18;
                break;
              }

              _context5.next = 15;
              return getCryptoKeyPairFromJsonWebKey2020(publicKey, true);

            case 15:
              _context5.t2 = _context5.sent;
              _context5.next = 21;
              break;

            case 18:
              _context5.next = 20;
              return getCryptoKeyPairFromMultiKey2021(publicKey, true);

            case 20:
              _context5.t2 = _context5.sent;

            case 21:
              remotePublicKey = _context5.t2;
              return _context5.abrupt("return", deriveBitsFromCryptoKey(localPrivateKey, remotePublicKey.publicKey));

            case 23:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function deriveSecret(_x4) {
      return _deriveSecret.apply(this, arguments);
    }

    return deriveSecret;
  }();

  return WebCryptoKey;
}();

exports.WebCryptoKey.generate = /*#__PURE__*/function () {
  var _ref3 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(opts) {
    var kp, id, _yield$key$getCryptoK, publicKey, privateKey;

    return runtime_1.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (opts === void 0) {
              opts = {
                kty: 'EC',
                crvOrSize: 'P-384'
              };
            }

            _context6.next = 3;
            return generate(opts);

          case 3:
            kp = _context6.sent;
            _context6.next = 6;
            return WebCryptoKey_1.fingerprintFromPublicKey({
              id: "",
              type: 'JsonWebKey2020',
              controller: "",
              publicKeyJwk: kp.publicKeyJwk
            });

          case 6:
            id = _context6.sent;
            _context6.next = 9;
            return getCryptoKeyPairFromJsonWebKey2020(kp);

          case 9:
            _yield$key$getCryptoK = _context6.sent;
            publicKey = _yield$key$getCryptoK.publicKey;
            privateKey = _yield$key$getCryptoK.privateKey;
            return _context6.abrupt("return", new WebCryptoKey_1({
              id: "did:key:" + id + "#" + id,
              type: 'JsonWebKey2020',
              controller: "did:key:" + id,
              publicKey: publicKey,
              privateKey: privateKey
            }));

          case 13:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));

  return function (_x5) {
    return _ref3.apply(this, arguments);
  };
}();

exports.WebCryptoKey.from = /*#__PURE__*/function () {
  var _ref4 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(k) {
    var _yield$key$getCryptoK2, _publicKey, _privateKey, _yield$key$getCryptoK3, publicKey, privateKey;

    return runtime_1.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            if (!(k.type === 'JsonWebKey2020')) {
              _context7.next = 7;
              break;
            }

            _context7.next = 3;
            return getCryptoKeyPairFromJsonWebKey2020(k);

          case 3:
            _yield$key$getCryptoK2 = _context7.sent;
            _publicKey = _yield$key$getCryptoK2.publicKey;
            _privateKey = _yield$key$getCryptoK2.privateKey;
            return _context7.abrupt("return", new WebCryptoKey_1({
              id: k.id,
              type: 'JsonWebKey2020',
              controller: k.controller,
              publicKey: _publicKey,
              privateKey: _privateKey
            }));

          case 7:
            _context7.next = 9;
            return getCryptoKeyPairFromMultiKey2021(k);

          case 9:
            _yield$key$getCryptoK3 = _context7.sent;
            publicKey = _yield$key$getCryptoK3.publicKey;
            privateKey = _yield$key$getCryptoK3.privateKey;
            return _context7.abrupt("return", new WebCryptoKey_1({
              id: k.id,
              type: k.type,
              controller: k.controller,
              publicKey: publicKey,
              privateKey: privateKey
            }));

          case 13:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));

  return function (_x6) {
    return _ref4.apply(this, arguments);
  };
}();

exports.WebCryptoKey = WebCryptoKey_1 = /*#__PURE__*/tslib.__decorate([/*#__PURE__*/ldKeyPair.staticImplements()], exports.WebCryptoKey);

exports.deriveBitsFromCryptoKey = deriveBitsFromCryptoKey;
exports.deriveBitsFromJsonWebKey2020 = deriveBitsFromJsonWebKey2020;
exports.encoding = index;
exports.jws = jws;
exports.key = key;
exports.raw = raw;
exports.subtle = subtle;
//# sourceMappingURL=web-crypto-key-pair.cjs.development.js.map
