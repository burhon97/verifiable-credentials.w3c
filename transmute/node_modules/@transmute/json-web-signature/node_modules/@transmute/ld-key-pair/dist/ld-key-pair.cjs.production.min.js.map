{"version":3,"file":"ld-key-pair.cjs.production.min.js","sources":["../src/types/LdKeyPair.ts"],"sourcesContent":["import { Signer } from \"./Signer\";\nimport { Verifier } from \"./Verifier\";\nimport { DeriveSecret } from \"./DeriveSecret\";\n\nexport interface LdKeyPairStatic {\n  generate: (options: any) => Promise<any>;\n  fromFingerprint({ fingerprint }: { fingerprint: string }): Promise<any>; // import from a fingerprint\n  from(serialized: any): Promise<any>; // import from a serialization\n}\n\nexport interface LdKeyPairInstance {\n  fingerprint(): Promise<string>; // produce a fingerprint\n  export({\n    type,\n    privateKey\n  }: {\n    type: any;\n    privateKey?: boolean;\n  }): Promise<any>; // create serialization\n  signer?: Signer; // create signature\n  verifier?: Verifier; // check signature\n  deriveSecret?: DeriveSecret; // only for key agreement / ecdh\n  getDerivedKeyPairs?: () => Promise<any[]>; // only derivable key pairs like ed25519 to x25519\n  getPairedKeyPairs?: () => Promise<any[]>; // only for pairing friendly curves\n}\n\nexport function staticImplements<T>() {\n  return <U extends T>(constructor: U) => {\n    //eslint-disable-next-line\n    constructor;\n  };\n}\n"],"names":["constructor"],"mappings":"+GA2BS,SAAcA"}