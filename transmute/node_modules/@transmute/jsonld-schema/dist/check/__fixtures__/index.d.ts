import { documentLoader } from './documentLoader';
declare const good: {
    goodCase0: {
        "@context": string[];
        id: string;
        type: string[];
        issuer: string;
        issuanceDate: string;
        credentialSubject: {
            id: string;
        };
        proof: {
            type: string;
            created: string;
            proofPurpose: string;
            verificationMethod: string;
            jws: string;
        };
    };
    goodCase1: {
        "@context": string[];
        id: string;
        type: string[];
        issuer: {
            id: string;
        };
        issuanceDate: string;
        credentialSubject: {
            id: string;
        };
        proof: {
            type: string;
            created: string;
            proofPurpose: string;
            verificationMethod: string;
            jws: string;
        };
    };
};
declare const bad: {
    badCase0: {
        input: {
            "@context": string[];
            barbar: number;
            id: string;
            type: string[];
            issuer: string;
            issuanceDate: string;
            credentialSubject: {
                id: string;
            };
            proof: {
                type: string;
                created: string;
                proofPurpose: string;
                verificationMethod: string;
                jws: string;
            };
        };
        output: {
            "json-schema": {
                error: {
                    details: {
                        instancePath: string;
                        keyword: string;
                        message: string;
                        params: {
                            additionalProperty: string;
                        };
                        schemaPath: string;
                    }[];
                    type: string;
                };
                ok: boolean;
            };
            "json-ld": {
                ok: boolean;
                error: {
                    type: string;
                    details: string[];
                };
            };
        };
    };
    badCase1: {
        input: {
            "@context": string[];
            id: string;
            type: string[];
            issuer: string;
            issuanceDate: string;
            credentialSubject: {
                id: string;
                barbar: number;
            };
            proof: {
                type: string;
                created: string;
                proofPurpose: string;
                verificationMethod: string;
                jws: string;
            };
        };
        output: {
            "json-schema": {
                ok: boolean;
                error: {
                    type: string;
                    details: ({
                        instancePath: string;
                        schemaPath: string;
                        keyword: string;
                        params: {
                            type: string;
                            additionalProperty?: undefined;
                            passingSchemas?: undefined;
                        };
                        message: string;
                    } | {
                        instancePath: string;
                        schemaPath: string;
                        keyword: string;
                        params: {
                            additionalProperty: string;
                            type?: undefined;
                            passingSchemas?: undefined;
                        };
                        message: string;
                    } | {
                        instancePath: string;
                        schemaPath: string;
                        keyword: string;
                        params: {
                            passingSchemas: null;
                            type?: undefined;
                            additionalProperty?: undefined;
                        };
                        message: string;
                    })[];
                };
            };
            "json-ld": {
                ok: boolean;
                error: {
                    type: string;
                    details: string[];
                };
            };
        };
    };
};
declare const schemas: {
    VerifiableCredential: {
        title: string;
        type: string;
        properties: {
            "@context": {
                oneOf: {
                    type: string;
                }[];
            };
            id: {
                type: string;
            };
            type: {
                oneOf: {
                    type: string;
                }[];
            };
            issuer: {
                oneOf: ({
                    type: string;
                    properties?: undefined;
                } | {
                    type: string;
                    properties: {
                        id: {
                            type: string;
                        };
                    };
                })[];
            };
            issuanceDate: {
                type: string;
            };
            credentialSubject: {
                oneOf: ({
                    type: string;
                    properties?: undefined;
                    additionalProperties?: undefined;
                } | {
                    type: string;
                    properties: {
                        id: {
                            type: string;
                        };
                    };
                    additionalProperties: boolean;
                })[];
            };
            proof: {
                type: string;
                properties: {
                    type: {
                        oneOf: {
                            type: string;
                        }[];
                    };
                    created: {
                        type: string;
                    };
                    proofPurpose: {
                        type: string;
                    };
                    verificationMethod: {
                        type: string;
                    };
                    jws: {
                        type: string;
                    };
                };
                additionalProperties: boolean;
            };
        };
        required: string[];
        additionalProperties: boolean;
    };
};
export { good, bad, schemas, documentLoader };
