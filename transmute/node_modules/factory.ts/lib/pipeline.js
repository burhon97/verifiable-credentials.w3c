"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pipeline = void 0;
const Async = require("./async");
class Pipeline {
    constructor(current) {
        this.current = current;
    }
    static start() {
        return new Pipeline(Promise.resolve({}));
    }
    //add<T,U>(factory: Async.IFactory<T,U> | Async.FactoryFunc<T,U>, val: Parti (p:P) => Partial<T>)
    addValues(val) {
        return new Pipeline(this.current.then((c) => __awaiter(this, void 0, void 0, function* () {
            const v = typeof val === "function"
                ? yield Async.lift(val(c))
                : val;
            return Object.assign(Object.assign({}, c), v);
        })));
    }
    // NOTE: want to combine all addFactory() methods, but
    // Typescript and or ts-node seems to have problems
    // also want use object { key: partial } instead
    // but can't get the types right
    addFactoryFunc(factory, key, partial) {
        return new Pipeline(this.current.then((c) => __awaiter(this, void 0, void 0, function* () {
            const p = typeof partial === "function"
                ? yield Async.lift(partial(c))
                : partial;
            const val = yield factory(p);
            const newV = {};
            newV[key] = val;
            return Object.assign(Object.assign({}, c), newV);
        })));
    }
    addFactory(factory, key, partial) {
        return this.addFactoryFunc(((v) => factory.build(v)), key, partial);
    }
    addTxFactory(factory, key, partial) {
        return this.addFactoryFunc(((v) => factory.build(v)), key, partial);
    }
    then(onfulfilled, onrejected) {
        return this.current.then(onfulfilled, onrejected);
    }
}
exports.Pipeline = Pipeline;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZWxpbmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcGlwZWxpbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsaUNBQWlDO0FBWWpDLE1BQWEsUUFBUTtJQUNuQixZQUFvQixPQUFtQjtRQUFuQixZQUFPLEdBQVAsT0FBTyxDQUFZO0lBQUcsQ0FBQztJQUUzQyxNQUFNLENBQUMsS0FBSztRQUNWLE9BQU8sSUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxpR0FBaUc7SUFDMUYsU0FBUyxDQUNkLEdBQTRCO1FBRTVCLE9BQU8sSUFBSSxRQUFRLENBQ2pCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQU0sQ0FBQyxFQUFDLEVBQUU7WUFDMUIsTUFBTSxDQUFDLEdBQ0wsT0FBTyxHQUFHLEtBQUssVUFBVTtnQkFDdkIsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksQ0FBRSxHQUEwQixDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNsRCxDQUFDLENBQUMsR0FBRyxDQUFDO1lBQ1YsdUNBQ00sQ0FBUyxHQUNULENBQVMsRUFDYjtRQUNKLENBQUMsQ0FBQSxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFRCxzREFBc0Q7SUFDdEQsbURBQW1EO0lBQ25ELGdEQUFnRDtJQUNoRCxnQ0FBZ0M7SUFDekIsY0FBYyxDQUNuQixPQUFvQyxFQUNwQyxHQUFNLEVBQ04sT0FBMEU7UUFFMUUsT0FBTyxJQUFJLFFBQVEsQ0FDakIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBTSxDQUFDLEVBQUMsRUFBRTtZQUMxQixNQUFNLENBQUMsR0FDTCxPQUFPLE9BQU8sS0FBSyxVQUFVO2dCQUMzQixDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxDQUFFLE9BQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdkMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUNkLE1BQU0sR0FBRyxHQUFHLE1BQU0sT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdCLE1BQU0sSUFBSSxHQUFPLEVBQUUsQ0FBQztZQUNuQixJQUFZLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ3pCLHVDQUNNLENBQVMsR0FDVixJQUFJLEVBQ1A7UUFDSixDQUFDLENBQUEsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBRU0sVUFBVSxDQUNmLE9BQTZCLEVBQzdCLEdBQU0sRUFDTixPQUEwRTtRQUUxRSxPQUFPLElBQUksQ0FBQyxjQUFjLENBQ3hCLENBQUMsQ0FBQyxDQUFNLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQVEsRUFDckMsR0FBRyxFQUNILE9BQU8sQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUVNLFlBQVksQ0FDakIsT0FBeUMsRUFDekMsR0FBTSxFQUNOLE9BQTBFO1FBRTFFLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FDeEIsQ0FBQyxDQUFDLENBQU0sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBUSxFQUNyQyxHQUFHLEVBQ0gsT0FBTyxDQUNSLENBQUM7SUFDSixDQUFDO0lBRUQsSUFBSSxDQUNGLFdBQTRELEVBQzVELFVBQThEO1FBRTlELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ3BELENBQUM7Q0FDRjtBQWpGRCw0QkFpRkMifQ==