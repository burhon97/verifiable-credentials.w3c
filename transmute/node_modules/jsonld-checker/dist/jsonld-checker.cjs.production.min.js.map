{"version":3,"file":"jsonld-checker.cjs.production.min.js","sources":["../src/CheckResult.ts","../src/defaultDocumentLoader.ts","../src/check.ts","../src/github.ts","../src/utils.ts"],"sourcesContent":["class CheckResult {\n  ok: boolean;\n\n  error?: {\n    type: string;\n    details: string;\n  };\n\n  constructor(ok: boolean, type = '', details = '') {\n    this.ok = ok;\n    this.error = {\n      type,\n      details,\n    };\n  }\n}\n\nexport default CheckResult;\n","import jsonld from 'jsonld';\n\nconst CONTEXTS = {};\n\n// From https://github.com/flexdinesh/browser-or-node/blob/master/src/index.js\nconst isNode =\n  typeof process !== 'undefined' &&\n  process.versions != null &&\n  process.versions.node != null;\n\nconst nodeDocumentLoader = isNode\n  ? (jsonld as any).documentLoaders.node()\n  : (jsonld as any).documentLoaders.xhr();\n\n// change the default document loader\nconst defaultLoader = async (url: string) => {\n  if (url in CONTEXTS) {\n    return {\n      contextUrl: null,\n      document: CONTEXTS[url],\n      documentUrl: url,\n    };\n  }\n  const res = await nodeDocumentLoader(url);\n  CONTEXTS[url] = res.document;\n  return res;\n};\n\nexport default defaultLoader;\n","import jsonld from 'jsonld';\nimport CheckResult from './CheckResult';\nimport defaultLoader from './defaultDocumentLoader';\n\n// const isNotJsonLdPropery = property => !['@id', '@type'].includes(property);\n\nconst check = async (\n  jsonldDocument: string | object,\n  documentLoader = defaultLoader\n) => {\n  try {\n    let jsonldDoc: object;\n    if (typeof jsonldDocument === 'string') {\n      jsonldDoc = JSON.parse(jsonldDocument);\n    } else {\n      jsonldDoc = jsonldDocument;\n    }\n\n    const unmappedProperties: string[] = [];\n\n    const expansionMap = info => {\n      if (info) {\n        if (info.activeProperty) {\n          unmappedProperties.push(\n            `${info.activeProperty}.${info.unmappedProperty}`\n          );\n        } else if (info.unmappedProperty) {\n          unmappedProperties.push(info.unmappedProperty);\n        }\n      }\n    };\n\n    // Remove all keys not present in the jsonld context\n    const expanded = await jsonld.expand(jsonldDoc, {\n      documentLoader,\n      expansionMap,\n    });\n    await jsonld.compact(expanded, jsonldDoc['@context'], { documentLoader });\n\n    if (unmappedProperties.length === 0) {\n      return new CheckResult(true);\n    }\n    return new CheckResult(\n      false,\n      'MISSING_PROPERTIES_IN_CONTEXT',\n      JSON.stringify(unmappedProperties)\n    );\n  } catch (err) {\n    return new CheckResult(false, err.name, err.message);\n  }\n};\n\nexport default check;\n","const fetch = require('node-fetch');\n\nconst githubApi = async endpoint => {\n  return fetch(`https://api.github.com/repos/${endpoint}`).then(res =>\n    res.json()\n  );\n};\n\nconst getFiles = async (user, repo, ref = 'HEAD') => {\n  const all = await githubApi(`${user}/${repo}/git/trees/${ref}?recursive=1`);\n  const files = all.tree.filter(node => node.type === 'blob');\n  return files;\n};\n\nexport default getFiles;\n","const getAllOpenBrackets = (text: string) => {\n  const results: number[] = [];\n  for (let cursor = 0; cursor < text.length; cursor += 1) {\n    if (text[cursor] === '{') {\n      results.push(cursor);\n    }\n  }\n  return results;\n};\n\nconst getStringUntilMatchingBracket = (\n  text: string,\n  openBracketIndex: number\n) => {\n  let substring = text[openBracketIndex];\n  if (substring !== '{') {\n    throw new Error('start must be the index of an opening bracket');\n  }\n  let bracketCount = 1;\n  let cursor = openBracketIndex + 1;\n  const { length } = text;\n  while (bracketCount !== 0 && cursor < length) {\n    const currentChar = text[cursor];\n    if (currentChar === '{') {\n      bracketCount += 1;\n    } else if (currentChar === '}') {\n      bracketCount -= 1;\n    }\n    cursor += 1;\n    substring += currentChar;\n  }\n  try {\n    return JSON.parse(substring);\n  } catch (e) {\n    return null;\n  }\n};\n\nconst getAllJsonFromString = (text: string): Array<Object> => {\n  const openBrackets = getAllOpenBrackets(text);\n  return openBrackets\n    .map(openBracketIndex =>\n      getStringUntilMatchingBracket(text, openBracketIndex)\n    )\n    .filter(Boolean);\n};\n\nconst isJsonLdObject = (obj: Object): Boolean => {\n  return '@context' in obj;\n};\n\nconst getAllJsonLdFromString = (text: string) => {\n  return getAllJsonFromString(text).filter(obj => isJsonLdObject(obj));\n};\n\nexport { getAllJsonLdFromString, isJsonLdObject, getAllJsonFromString };\n"],"names":["CheckResult","ok","type","details","this","error","CONTEXTS","nodeDocumentLoader","process","versions","node","jsonld","documentLoaders","xhr","defaultLoader","url","_context","contextUrl","document","documentUrl","res","check","jsonldDocument","documentLoader","jsonldDoc","JSON","parse","unmappedProperties","expansionMap","info","activeProperty","push","unmappedProperty","expand","expanded","compact","length","stringify","name","message","fetch","require","githubApi","endpoint","then","json","getFiles","user","repo","ref","_context2","files","tree","filter","getAllJsonFromString","text","results","cursor","getAllOpenBrackets","map","openBracketIndex","substring","Error","bracketCount","currentChar","e","getStringUntilMatchingBracket","Boolean","isJsonLdObject","obj"],"mappings":"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"}